Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_instrument", "development/how_to_submit_pr", "development/how_to_test", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/deployment", "flex/interactive/dev_guide", "flex/interactive/development/admin_service", "flex/interactive/development/cpp_procedure", "flex/interactive/development/cypher_procedure", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/stored_procedures", "flex/interactive/tools/admin_tool", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/optimizer", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_instrument.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/deployment.md", "flex/interactive/dev_guide.md", "flex/interactive/development/admin_service.md", "flex/interactive/development/cpp_procedure.md", "flex/interactive/development/cypher_procedure.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/stored_procedures.md", "flex/interactive/tools/admin_tool.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/optimizer.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetworkX APIs", "Tutorial: Graph Operations with NetworkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to instrument", "How to Submit Pull-requests", "How to Test", "Engine Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "GraphScope Interactive Deployment", "GraphScope Interactive Development guide", "GraphScope Interactive Admin Service Documentation", "Create c++ Stored Procedures on GraphScope Interactive", "Turning Cypher Queries into Stored Procedures with GraphScope Interactive", "Getting Started", "Glossary", "Installation", "Overview", "Stored Procedures", "The Administrative tool", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "A Generic Graph Optimizer for GIE", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 41, 42, 43, 44, 45, 48, 51, 55, 57, 59, 65, 67, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 112, 130, 131, 132, 135, 143, 145, 146, 153, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 180, 181, 185, 186, 187, 190, 191, 193, 195, 196, 201, 204, 209, 210, 211, 212, 213, 214, 217, 220, 223, 226, 228, 229, 230, 232, 233, 235, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 296, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314, 317, 318, 320, 323, 324, 325, 326, 327, 328, 331, 332, 334], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 42, 47, 48, 50, 51, 52, 55, 56, 57, 59, 65, 66, 67, 68, 69, 71, 72, 76, 77, 79, 80, 84, 86, 93, 97, 100, 101, 102, 103, 104, 111, 112, 113, 114, 115, 116, 119, 121, 122, 124, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 145, 152, 154, 160, 166, 169, 170, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 312, 315, 316, 317, 318, 327, 328, 331, 334, 338, 339, 340, 342, 343, 344], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 34, 36, 37, 38, 41, 50, 59, 78, 80, 93, 95, 97, 98, 100, 104, 106, 109, 114, 173, 311, 316, 324, 327, 328, 334], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 34, 38, 41, 46, 48, 52, 54, 55, 57, 59, 62, 65, 66, 67, 70, 73, 74, 75, 78, 82, 86, 87, 90, 92, 93, 94, 95, 96, 98, 102, 106, 114, 130, 154, 159, 167, 173, 174, 175, 311, 317, 318, 320, 324, 325, 326, 327, 337, 338], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 59, 64, 80, 81, 91, 94, 98, 99, 100, 106, 130, 174, 335, 336], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 39, 42, 43, 44, 45, 51, 52, 53, 54, 55, 56, 58, 59, 61, 65, 67, 69, 70, 73, 75, 76, 77, 78, 80, 81, 83, 86, 87, 88, 89, 90, 92, 93, 95, 99, 100, 102, 103, 106, 173, 174, 175, 176, 311, 313, 314, 315, 316, 317, 318, 319, 323, 324, 325, 326, 327, 328, 331, 334, 335, 337, 338, 339, 342, 344, 345], "offer": [0, 2, 9, 12, 20, 34, 43, 44, 45, 46, 48, 50, 51, 54, 55, 64, 67, 71, 73, 77, 81, 82, 91, 93, 97, 98, 323], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 45, 54, 57, 59, 62, 66, 83, 90, 92, 93, 94, 96, 160, 167, 214, 258, 260, 311, 323, 328], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 41, 42, 44, 45, 54, 55, 59, 62, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 104, 106, 110, 113, 126, 135, 137, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 173, 174, 175, 176, 190, 215, 217, 230, 231, 232, 240, 242, 259, 260, 261, 268, 270, 271, 289, 301, 303, 305, 309, 310, 311, 313, 314, 315, 317, 318, 320, 322, 323, 324, 325, 326, 328, 331], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 42, 46, 47, 51, 52, 54, 56, 57, 59, 77, 78, 82, 87, 88, 91, 92, 93, 95, 96, 97, 98, 99, 101, 170, 176, 311, 318, 323, 324, 327, 328, 332], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 41, 42, 44, 45, 47, 50, 51, 52, 54, 59, 64, 66, 70, 73, 74, 76, 78, 81, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 159, 161, 162, 163, 164, 165, 166, 168, 171, 174, 311, 317, 318, 320, 323, 324, 327, 338, 341, 342], "analyz": [0, 7, 13, 19, 27, 77, 91, 92, 94, 95, 97, 165, 323], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 47, 48, 51, 52, 53, 54, 55, 56, 57, 59, 64, 66, 67, 70, 72, 73, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 109, 111, 117, 118, 123, 128, 129, 133, 141, 142, 159, 161, 162, 163, 164, 165, 169, 173, 183, 189, 205, 206, 221, 238, 254, 273, 303, 311, 313, 314, 317, 318, 320, 323, 325, 326, 328, 334, 335, 337, 338, 343], "least": [0, 6, 37, 78, 176, 210, 232], "effort": [0, 34, 54, 76, 99, 323], "cover": [0, 6, 15, 41, 85], "wide": [0, 11, 12, 24, 54, 68, 80, 81, 85, 91, 92, 94, 95, 96, 98, 163, 322, 328], "rang": [0, 13, 18, 44, 45, 73, 74, 76, 78, 81, 84, 85, 87, 88, 89, 91, 92, 95, 98, 101, 103, 104, 117, 118, 128, 129, 133, 141, 142, 159, 164, 168, 216, 218, 220, 223, 226, 238, 244, 258, 259, 260, 261, 289, 311, 316, 323, 334, 337, 338, 342, 343], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 39, 48, 52, 53, 54, 59, 65, 66, 69, 77, 79, 81, 82, 93, 94, 95, 96, 99, 101, 102, 104, 114, 163, 242, 266, 322, 332], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 81, 91, 92, 93, 94, 97, 101, 102, 106, 161, 169, 262, 303, 308, 312, 322, 331], "detect": [0, 6, 8, 9, 81, 91, 92, 94, 95, 97, 98, 102, 230, 234, 235, 236], "etc": [0, 6, 7, 15, 29, 62, 66, 73, 74, 82, 85, 90, 92, 93, 96, 99, 103, 159, 162, 163, 164, 167, 178, 190, 199, 204, 205, 311, 313, 324], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 59, 62, 65, 66, 67, 70, 71, 73, 74, 76, 77, 78, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 106, 109, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 185, 186, 187, 200, 201, 206, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 229, 230, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 250, 254, 256, 257, 258, 259, 260, 261, 262, 266, 268, 270, 272, 273, 276, 294, 303, 304, 305, 306, 307, 311, 314, 317, 318, 320, 322, 323, 324, 325, 327, 331, 332, 344], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 45, 51, 62, 66, 69, 71, 72, 74, 76, 79, 81, 82, 85, 89, 90, 91, 95, 98, 101, 102, 106, 159, 161, 163, 164, 165, 167, 170, 171, 173, 174, 176, 252, 253, 257, 258, 260, 262, 263, 264, 305, 306, 314, 334], "pie": [0, 1, 3, 8, 12, 34, 78, 80, 81, 94, 106, 109, 316, 328, 338, 340], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 50, 54, 55, 80, 81, 85, 91, 93, 94, 96, 98, 99, 106, 159, 164, 165, 323, 324, 328], "model": [0, 1, 3, 8, 9, 18, 43, 46, 51, 57, 62, 66, 72, 73, 74, 78, 80, 81, 84, 85, 86, 90, 91, 92, 94, 95, 98, 106, 161, 163, 165, 166, 230, 234, 238, 240, 242, 244, 250, 252, 253, 258, 259, 260, 261, 262, 266, 267, 301, 308, 318, 322, 328, 338], "highli": [0, 4, 12, 34, 72, 78, 81, 93, 94, 322], "optim": [0, 9, 12, 14, 34, 42, 44, 45, 50, 54, 55, 64, 66, 77, 78, 79, 81, 82, 84, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 102, 159, 171, 173, 323, 325, 338], "best": [0, 16, 91, 93, 95, 98, 99, 102, 311, 334], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 41, 42, 44, 46, 54, 64, 66, 71, 73, 76, 78, 79, 80, 82, 91, 93, 94, 96, 97, 98, 103, 161, 165, 167, 173, 268, 273, 303, 315, 317, 320, 324, 326, 328], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 59, 62, 65, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 85, 87, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 106, 110, 112, 136, 137, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 185, 186, 189, 193, 214, 217, 230, 231, 232, 239, 240, 242, 258, 259, 260, 261, 268, 272, 273, 280, 282, 284, 289, 292, 297, 298, 303, 305, 311, 314, 315, 317, 318, 320, 322, 323, 324, 325, 326, 328, 331, 332, 334], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 41, 42, 44, 45, 46, 48, 51, 52, 54, 55, 56, 57, 59, 62, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 111, 112, 136, 137, 146, 151, 159, 160, 161, 162, 163, 165, 167, 170, 172, 173, 174, 175, 176, 195, 196, 205, 217, 220, 224, 230, 231, 232, 238, 240, 244, 245, 247, 249, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 268, 272, 276, 289, 294, 303, 305, 308, 309, 311, 313, 314, 316, 318, 322, 323, 326, 327, 328, 331, 332, 334, 338, 344], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 41, 43, 55, 59, 62, 66, 71, 76, 78, 87, 91, 92, 94, 96, 98, 99, 100, 111, 159, 162, 171, 216, 303, 317, 323, 324, 334], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 74, 77, 82, 89, 90, 92, 93, 94, 95, 98, 102, 104, 159, 162, 163, 165, 173, 176, 233, 242, 243, 250, 251, 254, 268, 269, 305, 309, 311, 323, 324, 325, 327, 338, 342], "box": [0, 93, 304], "manner": [0, 2, 17, 18, 32, 36, 54, 92, 94, 95], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 41, 42, 43, 45, 48, 53, 55, 59, 65, 66, 67, 70, 71, 73, 74, 76, 77, 78, 81, 83, 84, 87, 88, 90, 96, 99, 102, 160, 161, 165, 168, 170, 171, 173, 176, 230, 242, 257, 258, 260, 269, 289, 311, 314, 322, 323, 324, 338], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 110, 112, 136, 146, 148, 152, 153, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 205, 206, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 331, 332, 334, 337, 338, 342, 343, 344], "full": [0, 4, 12, 16, 17, 18, 22, 34, 44, 74, 81, 82, 85, 91, 96, 98, 102, 159, 162, 163, 165, 221, 324, 328, 334, 343], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 43, 44, 45, 48, 55, 65, 71, 74, 76, 78, 81, 87, 90, 93, 96, 100, 102, 104, 123, 124, 131, 132, 146, 160, 163, 165, 173, 176, 185, 187, 190, 197, 199, 205, 206, 209, 210, 214, 216, 217, 235, 238, 240, 242, 243, 244, 245, 246, 258, 262, 265, 268, 269, 274, 276, 289, 305, 311, 312, 314, 318, 324, 327, 332, 339, 342], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 42, 43, 45, 46, 51, 54, 57, 59, 62, 65, 66, 68, 72, 74, 78, 79, 80, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 106, 112, 159, 160, 161, 163, 164, 165, 167, 168, 170, 173, 174, 176, 311, 314, 317, 318, 320, 322, 324, 325, 327, 328, 331, 337], "bf": [0, 15, 17, 34, 99, 102, 334], "df": [0, 34], "hit": [0, 34, 36, 102, 103, 176, 312, 317, 334], "lpa": [0, 7, 34, 92, 102, 334], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 58, 92, 99, 102, 103, 110, 317, 318, 326, 327, 334], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 48, 50, 51, 54, 55, 56, 59, 62, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 120, 133, 136, 151, 159, 160, 161, 163, 164, 165, 166, 167, 169, 171, 173, 176, 193, 207, 208, 209, 210, 211, 212, 217, 220, 222, 223, 230, 231, 232, 234, 235, 238, 239, 240, 242, 244, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 270, 272, 289, 291, 294, 299, 303, 305, 306, 308, 309, 310, 311, 313, 315, 317, 318, 319, 320, 322, 323, 324, 328, 331, 332, 334], "find": [0, 4, 8, 9, 17, 22, 31, 32, 36, 37, 41, 43, 53, 59, 62, 64, 67, 74, 76, 78, 87, 90, 92, 94, 95, 99, 101, 110, 158, 176, 181, 200, 201, 230, 318, 323, 324, 331], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 31, 37, 38, 59, 61, 62, 66, 78, 94, 96], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 42, 50, 51, 52, 53, 54, 55, 57, 59, 62, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 110, 130, 131, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 190, 209, 211, 216, 218, 220, 223, 230, 233, 237, 238, 239, 240, 242, 245, 250, 251, 253, 254, 258, 259, 260, 261, 262, 263, 270, 277, 286, 298, 303, 305, 306, 310, 311, 313, 314, 317, 318, 323, 325, 331, 334, 338, 339, 342, 344], "given": [0, 7, 9, 13, 14, 20, 34, 44, 54, 55, 56, 57, 62, 65, 66, 67, 73, 76, 77, 78, 85, 90, 92, 95, 96, 98, 102, 163, 165, 168, 171, 173, 175, 210, 217, 228, 240, 241, 242, 243, 244, 245, 246, 254, 262, 263, 264, 268, 269, 270, 271, 275, 303, 306, 307, 310, 311, 317, 318, 322, 323, 326, 327], "weight": [0, 7, 19, 20, 33, 44, 48, 58, 73, 76, 78, 85, 92, 94, 99, 102, 131, 159, 161, 162, 163, 164, 165, 168, 171, 173, 176, 178, 179, 180, 184, 195, 196, 238, 250, 254, 258, 261, 301, 309, 310, 311, 313, 318, 343], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 54, 59, 66, 68, 71, 78, 84, 85, 91, 95, 159, 161, 167, 168, 169, 240, 322, 323], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 54, 55, 62, 66, 67, 68, 70, 73, 76, 77, 78, 81, 85, 91, 92, 94, 95, 96, 101, 102, 103, 111, 117, 118, 127, 133, 135, 137, 138, 141, 142, 159, 162, 163, 165, 167, 168, 170, 173, 174, 176, 240, 242, 245, 264, 311, 324, 326, 334, 338], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 52, 54, 66, 67, 76, 78, 81, 82, 85, 92, 93, 94, 95, 96, 97, 98, 101, 102, 104, 163, 164, 167, 169, 176, 257, 260, 261, 265, 270, 279, 302, 303, 315, 318, 324, 325, 334], "minimum": [0, 6, 59, 67, 71, 76, 78, 102, 230, 318], "distanc": [0, 7, 15, 17, 18, 92, 102, 176, 211, 250, 254, 258, 259, 260, 261, 262, 280, 292, 334], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 42, 43, 55, 56, 65, 66, 68, 74, 76, 77, 78, 90, 91, 92, 94, 95, 98, 100, 101, 103, 112, 119, 163, 173, 174, 175, 176, 187, 191, 206, 230, 235, 237, 240, 242, 258, 260, 262, 311, 314, 317, 323, 331], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 43, 45, 58, 65, 71, 73, 74, 76, 80, 81, 82, 85, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 109, 130, 160, 161, 162, 163, 164, 165, 168, 171, 173, 175, 176, 250, 255, 272, 273, 289, 314, 316, 320, 322, 324, 325, 328, 334, 339], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 44, 53, 54, 55, 57, 59, 62, 66, 74, 76, 78, 81, 82, 85, 87, 91, 93, 94, 95, 96, 97, 98, 102, 104, 159, 161, 163, 165, 169, 172, 173, 174, 176, 180, 211, 213, 217, 220, 230, 239, 245, 251, 260, 261, 303, 311, 313, 314, 317, 318, 322, 323, 327], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 44, 45, 54, 58, 65, 66, 68, 71, 73, 74, 76, 82, 85, 91, 92, 94, 95, 96, 101, 102, 103, 104, 132, 160, 161, 162, 163, 164, 165, 168, 171, 173, 234, 245, 255, 257, 272, 273, 284, 286, 297, 298, 304, 317, 318, 320, 322, 323, 324, 325, 334, 338, 339], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 30, 33, 34, 37, 41, 43, 45, 51, 52, 54, 55, 59, 65, 67, 68, 71, 74, 76, 78, 82, 83, 85, 94, 95, 96, 98, 102, 121, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 176, 209, 210, 221, 230, 231, 232, 233, 234, 235, 236, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 310, 311, 324, 328, 342], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 43, 65, 66, 74, 77, 78, 82, 85, 90, 91, 94, 98, 102, 159, 160, 161, 162, 165, 168, 173, 303, 311], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 59, 62, 76, 80, 85, 91, 93, 94, 98, 99, 102, 104, 162, 176, 198, 199, 205, 257, 311, 320, 328], "dissimilar": 0, "measur": [0, 6, 20, 66, 94, 96, 102, 160, 176, 254, 255, 288], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 45, 46, 51, 66, 71, 74, 76, 78, 82, 90, 94, 95, 99, 160, 161, 165, 166, 169, 171, 173, 175, 176, 204, 205, 226, 234, 235, 240, 242, 268, 269, 271, 304, 305, 311, 318, 322, 323, 324, 325, 326], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 43, 44, 45, 48, 51, 52, 57, 58, 67, 70, 73, 79, 92, 94, 95, 96, 101, 102, 103, 104, 121, 135, 149, 150, 151, 162, 165, 173, 174, 258, 273, 303, 308, 311, 314, 317, 318, 320, 322, 324, 325, 332, 338, 339, 342], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 41, 43, 44, 45, 48, 50, 65, 66, 73, 74, 76, 77, 78, 82, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 150, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 173, 176, 185, 187, 205, 206, 211, 215, 217, 222, 228, 230, 232, 233, 234, 236, 237, 239, 240, 242, 243, 245, 250, 253, 255, 258, 259, 260, 261, 262, 265, 266, 268, 270, 271, 276, 279, 291, 296, 301, 305, 307, 308, 309, 311, 317, 318, 320, 322, 323, 324, 325, 328, 332], "attribute_assort": [0, 34], "nearest": [0, 102], "neighbor": [0, 6, 9, 13, 14, 17, 18, 58, 73, 76, 78, 82, 85, 94, 95, 96, 102, 104, 159, 160, 162, 163, 165, 167, 168, 169, 171, 172, 176, 181, 182, 201, 253, 254, 268, 271, 304, 311, 320, 323, 334], "return": [0, 6, 9, 15, 18, 20, 48, 50, 58, 66, 68, 69, 70, 71, 73, 76, 77, 78, 85, 87, 89, 92, 95, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 152, 153, 154, 158, 159, 161, 162, 163, 164, 165, 168, 169, 170, 171, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 317, 318, 320, 323, 334, 343], "success": [0, 13, 22, 48, 106, 161, 245, 276], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 42, 43, 44, 46, 48, 59, 62, 65, 67, 68, 72, 76, 78, 82, 84, 85, 87, 88, 89, 90, 92, 99, 101, 102, 103, 104, 118, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 176, 178, 179, 180, 182, 186, 187, 190, 191, 195, 205, 209, 210, 212, 213, 214, 215, 217, 220, 222, 223, 225, 226, 227, 229, 230, 233, 234, 235, 236, 238, 239, 240, 242, 243, 246, 249, 251, 258, 259, 260, 261, 262, 268, 269, 273, 276, 289, 294, 303, 305, 306, 311, 313, 314, 318, 320, 323, 324, 325, 326, 332, 334, 336, 337, 338, 339, 341, 342, 343, 344], "1": [0, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 42, 44, 46, 48, 57, 62, 65, 66, 67, 68, 72, 73, 74, 76, 78, 82, 84, 85, 87, 88, 89, 90, 92, 95, 96, 99, 102, 103, 159, 162, 164, 165, 166, 168, 173, 174, 175, 176, 178, 179, 180, 182, 186, 187, 190, 195, 196, 199, 204, 205, 209, 211, 212, 213, 214, 215, 217, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 311, 313, 314, 318, 323, 324, 325, 326, 332, 334, 338, 339, 341, 342, 343, 344], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 42, 44, 45, 46, 48, 57, 65, 66, 67, 68, 72, 73, 76, 78, 82, 84, 85, 87, 88, 89, 90, 92, 95, 96, 99, 102, 103, 159, 162, 163, 164, 165, 166, 168, 176, 178, 179, 180, 182, 190, 191, 195, 196, 199, 204, 205, 212, 213, 214, 217, 222, 223, 228, 230, 232, 234, 236, 237, 238, 240, 241, 242, 244, 245, 246, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 278, 280, 282, 283, 284, 288, 289, 291, 293, 294, 296, 303, 304, 305, 306, 311, 313, 314, 318, 323, 325, 326, 334, 335, 336, 338, 339, 342, 343, 344], "average_degree_connect": [0, 102, 334], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 42, 46, 50, 52, 54, 55, 59, 66, 71, 76, 77, 78, 85, 89, 92, 96, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 151, 158, 160, 161, 163, 165, 168, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 193, 194, 195, 196, 200, 201, 205, 206, 209, 211, 213, 214, 216, 217, 218, 220, 221, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 318, 323, 324, 331], "str": [0, 20, 87, 88, 90, 102, 103, 104, 110, 111, 117, 118, 119, 121, 128, 129, 130, 133, 135, 136, 137, 138, 141, 142, 171, 173, 174, 189, 191, 305, 311, 313, 317, 318, 324, 339, 344], "target": [0, 6, 17, 22, 24, 48, 67, 82, 83, 91, 92, 96, 98, 102, 104, 165, 167, 173, 176, 247, 249, 268, 271, 303, 324, 334], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 42, 44, 47, 54, 62, 65, 66, 67, 70, 74, 76, 78, 81, 85, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 125, 131, 159, 161, 163, 165, 166, 167, 173, 176, 247, 286, 301, 311, 323, 324, 328, 334, 343], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 58, 62, 68, 71, 74, 77, 78, 85, 92, 95, 96, 101, 102, 103, 104, 159, 162, 163, 164, 165, 168, 171, 173, 174, 175, 176, 182, 205, 230, 233, 238, 240, 244, 250, 253, 258, 261, 268, 271, 273, 305, 311, 317, 318, 323, 324, 334, 338, 342, 343], "sum": [0, 20, 71, 74, 94, 102, 104, 176, 230, 235, 238, 240, 241, 242, 251, 258, 261, 262, 269, 270, 309, 311, 342], "fraction": [0, 102, 176, 230], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 42, 54, 55, 66, 68, 70, 76, 78, 85, 90, 95, 96, 102, 104, 109, 165, 169, 171, 220, 258, 260, 303, 311, 315, 324, 334, 339, 344], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 43, 51, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 78, 79, 82, 85, 90, 92, 94, 95, 96, 98, 103, 106, 160, 161, 163, 164, 165, 170, 171, 173, 176, 206, 220, 237, 276, 311, 323, 324], "betweenness_centr": [0, 34, 176], "normal": [0, 6, 27, 59, 78, 102, 165, 173, 176, 233, 323], "endpoint": [0, 9, 10, 27, 28, 29, 42, 46, 48, 51, 54, 65, 67, 69, 72, 76, 77, 87, 90, 92, 101, 165, 174, 176, 318, 320, 324, 331, 334, 342, 344], "bool": [0, 6, 14, 15, 20, 58, 71, 90, 101, 102, 104, 148, 156, 173, 176, 183, 193, 195, 196, 205, 234, 244, 250, 254, 270, 311, 313, 318, 323, 344], "whether": [0, 37, 42, 44, 55, 65, 66, 73, 76, 78, 90, 91, 95, 101, 102, 160, 161, 165, 173, 233, 235, 238, 258, 269, 270, 311, 323, 324, 325], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 44, 50, 51, 65, 66, 68, 70, 74, 76, 78, 90, 91, 92, 96, 101, 102, 110, 113, 126, 135, 169, 170, 173, 175, 176, 206, 230, 258, 259, 260, 261, 311, 313, 318, 320, 323, 324, 325, 326], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 43, 44, 45, 48, 54, 55, 56, 62, 64, 66, 67, 71, 72, 73, 78, 81, 82, 83, 84, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 161, 162, 165, 167, 173, 176, 191, 230, 238, 244, 254, 303, 310, 311, 322, 323, 324, 331, 332], "count": [0, 6, 33, 48, 50, 66, 68, 71, 73, 74, 77, 78, 85, 92, 94, 101, 102, 163, 164, 168, 169, 172, 176, 186, 244, 311, 324, 338, 342], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 41, 42, 43, 44, 45, 47, 48, 51, 54, 55, 56, 57, 59, 62, 65, 66, 67, 68, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 106, 110, 113, 114, 115, 116, 117, 118, 120, 121, 123, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 145, 146, 154, 159, 160, 161, 163, 164, 165, 167, 168, 170, 171, 173, 175, 176, 187, 188, 193, 198, 199, 205, 206, 208, 209, 210, 212, 215, 216, 217, 218, 220, 221, 223, 225, 226, 229, 231, 232, 240, 242, 243, 244, 246, 247, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 267, 268, 269, 270, 271, 272, 276, 278, 284, 289, 293, 296, 297, 301, 303, 304, 305, 306, 308, 309, 311, 314, 315, 317, 318, 320, 322, 323, 324, 325, 326, 327, 328, 331], "travers": [0, 6, 13, 15, 17, 51, 52, 54, 65, 66, 71, 74, 77, 82, 91, 92, 93, 94, 159, 162, 165, 167, 171, 174, 305, 311, 320, 323, 324, 325, 334, 342], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 37, 41, 43, 44, 45, 50, 54, 59, 62, 65, 66, 68, 70, 71, 74, 76, 77, 78, 81, 82, 88, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 106, 152, 159, 160, 161, 165, 167, 169, 173, 174, 176, 180, 235, 239, 263, 264, 268, 271, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 292, 295, 297, 298, 303, 311, 318, 322, 323, 324, 325, 331, 332], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 39, 42, 45, 47, 54, 55, 56, 57, 64, 65, 69, 70, 71, 76, 77, 85, 87, 89, 90, 95, 97, 100, 101, 103, 159, 163, 165, 174, 175, 176, 211, 236, 240, 242, 243, 246, 262, 276, 305, 313, 318, 323, 324, 328, 341], "root": [0, 4, 27, 32, 36, 42, 59, 90, 93, 211, 213, 304, 305, 322], "explor": [0, 17, 43, 44, 53, 57, 62, 67, 76, 78, 91, 92, 95, 323], "present": [0, 2, 20, 27, 44, 56, 73, 78, 85, 86, 87, 88, 89, 91, 92, 94, 106, 176, 187, 230, 311, 322, 323], "prior": [0, 12, 34, 43, 76, 78, 81, 91], "move": [0, 4, 6, 43, 54, 70, 93, 165, 268, 271], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 53, 77, 78, 82, 85, 86, 90, 91, 96, 159, 160, 163, 165, 167, 169, 170, 171, 237, 305, 317, 320, 323, 324, 326], "level": [0, 6, 12, 38, 42, 54, 62, 66, 91, 93, 96, 102, 167, 221, 268, 269, 308, 323, 324], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 58, 73, 74, 87, 90, 101, 102, 103, 104, 136, 160, 161, 162, 163, 164, 165, 168, 171, 172, 173, 175, 176, 204, 209, 211, 213, 216, 218, 220, 221, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 246, 247, 248, 249, 250, 252, 253, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 272, 273, 274, 275, 306, 311, 313, 318, 320, 324, 334, 342, 344], "evalu": [0, 6, 14, 15, 16, 18, 37, 81, 92, 93, 96, 99, 101, 102, 103, 114, 137, 146, 148, 152, 154, 173, 318, 328, 342], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 43, 45, 46, 47, 48, 52, 54, 56, 59, 62, 65, 66, 70, 74, 76, 78, 81, 84, 86, 87, 91, 92, 93, 94, 96, 98, 99, 101, 102, 104, 106, 159, 160, 161, 163, 166, 167, 168, 171, 173, 174, 176, 211, 230, 255, 257, 258, 262, 281, 286, 291, 303, 305, 309, 311, 314, 317, 318, 320, 322, 323, 324, 327, 328, 334], "known": [0, 6, 8, 9, 24, 32, 65, 68, 70, 71, 78, 94, 95, 102, 193, 211, 214, 263, 264, 281, 305, 326], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 44, 48, 51, 54, 59, 65, 68, 70, 74, 77, 78, 81, 90, 97, 102, 103, 106, 152, 154, 160, 161, 163, 168, 171, 173, 209, 219, 224, 230, 233, 234, 235, 236, 238, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 265, 266, 267, 268, 271, 276, 303, 306, 308, 311, 313, 317, 318, 322, 323, 324, 327], "max_round": [0, 102, 334], "10": [0, 13, 15, 16, 17, 20, 27, 31, 45, 59, 61, 62, 66, 68, 69, 74, 76, 78, 84, 85, 87, 88, 89, 92, 99, 102, 160, 161, 162, 164, 165, 171, 173, 176, 178, 179, 180, 214, 220, 230, 233, 235, 244, 245, 246, 247, 249, 253, 258, 262, 266, 282, 288, 293, 306, 311, 318, 324, 332, 334, 338, 342], "maximum": [0, 65, 71, 76, 78, 94, 102, 162, 176, 230, 246, 261, 262, 263, 264, 269, 310, 324], "round": [0, 9, 14, 17, 24, 102, 104, 228, 238], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 41, 42, 44, 45, 46, 48, 50, 51, 54, 55, 56, 59, 62, 65, 67, 68, 74, 76, 78, 84, 87, 90, 99, 101, 102, 103, 104, 121, 130, 152, 153, 156, 160, 161, 165, 172, 173, 175, 176, 178, 179, 180, 183, 205, 207, 208, 211, 213, 214, 216, 218, 220, 221, 223, 225, 226, 229, 230, 233, 234, 235, 236, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 303, 304, 306, 308, 309, 311, 313, 314, 318, 320, 324, 331, 332, 344], "origin": [0, 4, 6, 9, 12, 13, 22, 43, 66, 73, 74, 76, 82, 87, 88, 96, 101, 103, 130, 159, 161, 173, 174, 230, 252, 258, 297, 305, 309, 311, 317, 318, 324, 325], "reciproc": [0, 176], "n": [0, 19, 20, 30, 33, 38, 42, 44, 48, 50, 55, 56, 66, 68, 69, 71, 76, 78, 81, 85, 92, 96, 99, 102, 103, 163, 165, 168, 170, 176, 186, 190, 191, 193, 197, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 239, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 272, 273, 276, 289, 304, 305, 306, 308, 311], "reachabl": [0, 176], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 45, 48, 50, 59, 62, 71, 72, 84, 85, 86, 91, 92, 94, 96, 98, 100, 102, 103, 104, 124, 127, 132, 135, 136, 154, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 197, 199, 201, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 323, 325, 334, 337, 338, 343], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 81, 91, 93, 94, 96, 98, 163, 169, 320, 323], "improv": [0, 6, 9, 17, 19, 23, 54, 74, 93, 96, 97, 98, 327], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 41, 45, 48, 50, 51, 54, 55, 59, 62, 66, 67, 68, 70, 73, 74, 76, 78, 81, 82, 83, 84, 85, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 106, 159, 160, 163, 164, 165, 169, 170, 173, 176, 209, 250, 257, 258, 272, 273, 305, 311, 313, 318, 322, 323, 324, 327, 328, 331], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 54, 59, 65, 66, 71, 76, 78, 80, 85, 90, 91, 94, 95, 97, 98, 102, 161, 163, 165, 172, 176, 186, 220, 228, 230, 232, 237, 239, 250, 252, 261, 318, 323, 324, 327, 328], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 41, 45, 48, 50, 54, 59, 62, 64, 65, 66, 71, 74, 76, 78, 82, 85, 90, 92, 95, 96, 98, 101, 102, 104, 110, 111, 151, 159, 160, 161, 162, 163, 165, 169, 173, 176, 185, 209, 210, 213, 214, 217, 226, 227, 230, 239, 240, 245, 247, 248, 249, 250, 251, 253, 268, 271, 279, 282, 286, 289, 295, 296, 297, 303, 305, 307, 311, 317, 318, 320, 322, 323, 324, 327, 338, 342], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 41, 45, 59, 68, 73, 91, 93, 94, 95, 101, 102, 176, 244, 258, 317, 323, 324], "ratio": [0, 13, 78, 303], "actor": [0, 48, 55, 78, 91, 288], "group": [0, 2, 54, 59, 66, 90, 92, 94, 95, 101, 167, 173, 234, 235, 236, 238, 255, 283, 301, 322, 324, 342, 344], "who": [0, 11, 29, 54, 78, 91, 95, 166, 171, 324], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 44, 45, 51, 54, 55, 56, 59, 61, 62, 64, 65, 67, 70, 73, 75, 76, 77, 78, 79, 80, 86, 87, 88, 89, 91, 92, 94, 95, 96, 98, 100, 103, 106, 114, 160, 161, 165, 167, 318, 319, 323, 324, 325, 327, 328, 338], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 42, 43, 44, 54, 55, 56, 62, 70, 73, 74, 76, 78, 82, 84, 85, 88, 90, 91, 92, 94, 95, 96, 102, 103, 104, 151, 159, 161, 165, 169, 171, 173, 176, 218, 221, 228, 230, 250, 255, 268, 271, 279, 298, 308, 318, 323, 324, 326], "being": [0, 74, 85, 95, 173, 210, 240, 320, 323, 324, 325], "cliqu": [0, 6, 78, 91, 94, 231, 232, 236, 237, 239, 253], "complet": [0, 14, 31, 33, 34, 48, 66, 70, 74, 78, 90, 93, 159, 161, 165, 186, 211, 212, 214, 216, 217, 223, 228, 237, 268, 271, 295, 311, 324], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 42, 43, 45, 53, 59, 62, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 81, 83, 85, 90, 91, 92, 94, 95, 96, 98, 102, 103, 106, 110, 159, 160, 161, 162, 163, 165, 166, 168, 169, 171, 173, 176, 186, 190, 193, 205, 211, 216, 221, 230, 240, 241, 242, 244, 250, 253, 268, 269, 271, 287, 291, 305, 311, 317, 318, 322, 323, 324, 326, 328, 331, 332, 338], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 43, 45, 48, 54, 58, 65, 66, 70, 71, 73, 74, 76, 82, 84, 85, 87, 88, 89, 91, 92, 94, 95, 96, 98, 101, 102, 103, 104, 115, 116, 119, 124, 131, 135, 136, 154, 159, 160, 161, 162, 163, 164, 165, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 180, 183, 186, 187, 189, 190, 191, 193, 195, 196, 199, 200, 202, 204, 205, 206, 210, 212, 213, 214, 215, 216, 217, 220, 222, 223, 224, 227, 228, 230, 232, 235, 236, 238, 240, 241, 242, 244, 246, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 301, 305, 308, 309, 310, 311, 312, 314, 317, 318, 320, 322, 324, 325, 326, 334, 338, 339, 343], "u": [0, 6, 14, 16, 18, 20, 37, 58, 59, 74, 78, 90, 92, 102, 165, 169, 171, 173, 176, 182, 205, 217, 230, 244, 250, 253, 258, 261, 273, 311, 323, 334, 344], "equal": [0, 10, 59, 71, 76, 78, 84, 88, 90, 92, 176, 228, 230, 261, 266, 304, 338], "degree_assortativity_coeffici": [0, 102, 334], "hold": [0, 10, 20, 46, 76, 101, 102, 103, 104, 130, 138, 161, 173, 176, 311, 317], "numer": [0, 20, 91, 93, 94, 102, 103, 176, 311, 317, 323], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 42, 44, 50, 58, 59, 65, 66, 68, 71, 82, 87, 90, 94, 96, 101, 102, 103, 104, 137, 146, 158, 159, 161, 162, 163, 164, 165, 168, 170, 171, 172, 173, 175, 176, 185, 205, 220, 230, 258, 259, 260, 261, 268, 270, 271, 303, 304, 305, 311, 313, 314, 317, 318, 320, 323, 324, 325, 334, 342, 343, 344], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 42, 43, 44, 45, 46, 51, 53, 55, 56, 59, 65, 67, 68, 70, 76, 78, 84, 90, 92, 98, 102, 103, 106, 158, 160, 161, 165, 166, 169, 170, 172, 173, 174, 175, 176, 181, 182, 184, 191, 195, 196, 205, 206, 211, 212, 213, 214, 216, 217, 218, 220, 221, 223, 225, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 271, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 303, 306, 307, 309, 311, 313, 314, 317, 318, 320, 323, 324, 325, 331, 332], "fals": [0, 13, 15, 17, 18, 19, 20, 42, 44, 46, 54, 65, 70, 76, 89, 90, 101, 102, 104, 152, 159, 160, 161, 165, 171, 173, 175, 176, 189, 193, 195, 196, 205, 207, 208, 233, 234, 235, 238, 244, 254, 269, 311, 314, 318, 324, 334, 343], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 41, 42, 43, 45, 48, 54, 59, 62, 66, 67, 68, 70, 71, 73, 74, 75, 78, 82, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 106, 151, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 174, 176, 193, 195, 196, 199, 204, 205, 211, 226, 228, 230, 241, 245, 250, 258, 259, 260, 261, 262, 268, 271, 277, 278, 282, 283, 287, 293, 295, 298, 301, 303, 305, 309, 311, 315, 317, 318, 326, 328, 338, 339, 342], "adjac": [0, 10, 16, 20, 24, 76, 78, 96, 102, 162, 167, 176, 199, 232, 256, 274, 289, 303, 304, 311, 312, 323], "direct": [0, 9, 10, 15, 43, 45, 65, 78, 82, 85, 88, 90, 92, 93, 96, 101, 102, 122, 152, 159, 161, 165, 168, 171, 173, 176, 181, 186, 192, 207, 218, 231, 232, 233, 234, 235, 238, 242, 243, 245, 254, 255, 256, 257, 268, 269, 278, 305, 309, 311, 312, 314, 318, 322, 323, 325, 339, 343, 344], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 41, 43, 78, 90, 91, 93, 98, 99, 106, 160, 163, 164, 165, 168, 169, 170, 171, 176, 205, 210, 217, 293, 298, 307, 311, 324, 328], "separ": [0, 6, 17, 30, 36, 55, 65, 67, 78, 91, 98, 160, 161, 258, 313, 323, 324], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 43, 44, 45, 51, 54, 55, 59, 65, 70, 73, 74, 76, 78, 81, 84, 87, 90, 91, 92, 93, 95, 101, 102, 106, 121, 159, 160, 163, 165, 168, 170, 171, 176, 213, 235, 237, 260, 317, 318, 322, 323, 324, 338], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 41, 42, 43, 44, 45, 46, 48, 55, 56, 59, 65, 66, 67, 70, 71, 73, 74, 76, 78, 89, 90, 91, 93, 95, 101, 102, 103, 104, 110, 146, 160, 162, 165, 167, 169, 171, 173, 174, 176, 195, 196, 210, 277, 284, 289, 301, 307, 311, 313, 314, 317, 318, 322, 323, 324, 332, 334, 335, 337, 342, 344], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 45, 51, 55, 65, 68, 73, 74, 82, 88, 90, 91, 92, 93, 94, 95, 96, 102, 104, 159, 160, 161, 173, 174, 175, 190, 199, 204, 205, 210, 230, 254, 257, 262, 268, 271, 318, 320, 322, 323, 324, 326, 327, 341, 342], "degree_centr": [0, 34, 62, 102, 176, 312, 334], "centrality_typ": [0, 102], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 42, 46, 51, 65, 66, 73, 76, 80, 82, 91, 92, 94, 98, 253, 260, 276, 303, 320, 323, 324, 326, 328], "far": [0, 91, 160], "possibl": [0, 4, 6, 15, 44, 54, 57, 59, 66, 82, 95, 96, 102, 161, 167, 168, 176, 244, 252, 253, 268, 269, 270, 271, 303, 307, 323], "along": [0, 6, 10, 20, 24, 31, 56, 74, 76, 82, 104, 161, 165, 171, 305, 311, 324, 325], "branch": [0, 71, 78, 165, 211, 221, 342], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 42, 43, 45, 51, 56, 70, 76, 78, 85, 87, 101, 102, 106, 159, 165, 172, 211, 213, 214, 216, 218, 221, 223, 225, 226, 229, 240, 242, 243, 245, 247, 248, 249, 255, 256, 257, 263, 264, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 306, 313, 318, 320, 323, 324, 326], "backtrack": 0, "influenc": [0, 27, 176], "relationship": [0, 45, 54, 59, 66, 71, 72, 73, 78, 82, 85, 91, 94, 95, 96, 160, 161, 171, 323, 324], "high": [0, 6, 9, 54, 57, 62, 66, 73, 78, 90, 93, 94, 96, 97, 98, 99, 167, 245, 276, 318, 320, 324], "score": [0, 78, 96], "contribut": [0, 4, 64, 323], "low": [0, 6, 7, 13, 32, 66, 84, 91, 92, 96, 97, 98, 303, 324], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 42, 44, 45, 52, 57, 62, 67, 69, 71, 77, 78, 82, 84, 90, 91, 93, 94, 95, 96, 99, 101, 102, 103, 104, 111, 112, 114, 115, 116, 119, 122, 124, 131, 132, 136, 137, 146, 163, 164, 165, 168, 170, 173, 174, 175, 176, 178, 179, 180, 182, 183, 185, 187, 189, 190, 191, 193, 194, 195, 196, 199, 204, 205, 206, 209, 210, 211, 213, 214, 216, 220, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 246, 250, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 277, 279, 288, 299, 303, 304, 305, 306, 308, 309, 311, 313, 318, 322, 323, 324, 325, 326], "mean": [0, 2, 20, 29, 30, 36, 37, 42, 54, 65, 66, 74, 87, 101, 103, 109, 148, 161, 164, 165, 175, 176, 216, 233, 240, 250, 259, 260, 261, 311, 314, 317, 318, 320, 323, 324, 326, 331], "themselv": [0, 66, 78, 82, 305], "eigenvector_centr": [0, 34, 102, 176, 312, 334], "toler": [0, 102, 176, 230], "doubl": [0, 9, 14, 16, 18, 33, 44, 58, 71, 73, 74, 76, 90, 99, 104, 160, 170, 281, 305, 326, 334, 342, 344], "error": [0, 2, 32, 36, 37, 38, 42, 48, 59, 64, 66, 68, 73, 101, 102, 165, 169, 173, 176, 210, 311, 324], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 46, 54, 56, 59, 65, 66, 70, 73, 76, 78, 85, 87, 94, 95, 102, 169, 173, 176, 269, 270, 311, 318, 323, 324, 332, 337, 338], "converg": [0, 6, 9, 14, 17, 24, 96, 99, 102, 176], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 42, 45, 62, 65, 67, 68, 75, 76, 78, 82, 86, 87, 92, 94, 96, 99, 101, 102, 104, 161, 162, 163, 164, 165, 168, 172, 176, 186, 191, 193, 202, 203, 204, 209, 210, 212, 214, 217, 221, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 284, 289, 294, 301, 303, 304, 306, 308, 309, 310, 311, 318, 320, 323, 324, 325, 332, 338, 342], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 76, 77, 82, 84, 85, 87, 88, 90, 91, 92, 93, 94, 96, 97, 102, 104, 159, 162, 171, 175, 176, 178, 179, 180, 181, 182, 187, 198, 199, 200, 201, 205, 206, 216, 217, 218, 220, 223, 225, 226, 229, 230, 258, 259, 260, 261, 262, 268, 271, 273, 305, 311, 334, 338, 343], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 48, 54, 56, 57, 62, 64, 66, 68, 69, 70, 77, 78, 80, 82, 84, 85, 87, 88, 89, 90, 92, 94, 96, 102, 103, 152, 154, 159, 160, 161, 163, 166, 168, 170, 171, 172, 173, 176, 230, 258, 259, 260, 261, 311, 318, 322, 326, 328, 332, 334, 335, 336, 338, 339, 342, 343, 344], "rate": [0, 43, 54, 57, 91, 97, 102, 258, 260, 261], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 45, 54, 59, 62, 65, 66, 70, 73, 74, 76, 78, 82, 83, 90, 92, 94, 95, 96, 98, 99, 159, 160, 161, 162, 163, 165, 167, 169, 171, 173, 176, 182, 205, 212, 213, 215, 217, 218, 222, 239, 250, 251, 258, 259, 260, 261, 262, 266, 268, 271, 272, 277, 278, 286, 304, 305, 310, 311, 322, 323, 324, 331, 338], "hub": [0, 29, 102, 103, 176, 229, 317], "author": [0, 27, 88, 92, 102, 176, 230, 318, 338], "estim": [0, 66, 73, 78, 94, 95, 171, 176], "within": [0, 13, 30, 36, 42, 44, 45, 50, 54, 55, 56, 57, 70, 71, 73, 74, 76, 77, 78, 83, 91, 92, 93, 94, 95, 96, 165, 174, 176, 230, 233, 234, 254, 260, 261, 318, 323, 332, 338, 342], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 50, 51, 53, 54, 55, 59, 62, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 106, 110, 112, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 214, 228, 230, 240, 242, 268, 289, 311, 314, 317, 318, 323, 324, 326, 328, 338, 344], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 41, 42, 43, 46, 50, 54, 59, 62, 65, 66, 70, 78, 81, 82, 83, 84, 87, 90, 91, 92, 93, 95, 96, 98, 101, 102, 106, 159, 160, 161, 163, 165, 168, 169, 170, 172, 173, 245, 258, 263, 269, 289, 305, 311, 314, 320, 323, 324, 326, 327, 328, 334], "rel": [0, 27, 42, 44, 66, 67, 82, 90, 96, 161, 165, 176, 324], "immedi": [0, 6, 54, 66, 97, 102, 104, 165, 176, 314, 318, 324], "under": [0, 9, 10, 14, 17, 24, 38, 45, 54, 55, 73, 78, 84, 90, 91, 102, 106, 165, 167, 168, 176, 323], "consider": [0, 73, 74, 90, 176, 233], "katz_centr": [0, 34, 102, 176, 312, 334], "alpha": [0, 78, 102, 176, 250, 251, 262, 303], "beta": [0, 102, 176, 251, 262], "attenu": [0, 176], "factor": [0, 13, 67, 78, 102, 176, 211, 221, 243, 245, 323], "neighborhood": [0, 6, 91, 93, 96, 102, 165, 169, 176, 254], "maxim": [0, 6, 176, 264, 310], "subgraph": [0, 6, 9, 17, 33, 78, 79, 81, 92, 93, 94, 102, 124, 130, 159, 165, 167, 173, 174, 176, 187, 190, 212, 223, 254, 311, 338, 342], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 43, 44, 51, 53, 55, 59, 62, 65, 66, 71, 73, 75, 76, 78, 82, 85, 86, 90, 91, 92, 94, 96, 98, 99, 101, 104, 106, 159, 160, 163, 165, 168, 169, 170, 171, 173, 176, 178, 179, 180, 187, 190, 191, 206, 216, 217, 218, 220, 223, 238, 263, 264, 268, 269, 311, 314, 315, 318, 323, 324, 332, 336, 342], "found": [0, 4, 9, 16, 17, 18, 36, 48, 59, 65, 77, 78, 82, 83, 93, 99, 152, 172, 230, 272, 273, 309, 311, 318, 322, 323, 324, 328], "recurs": [0, 6, 165, 213], "prune": 0, "less": [0, 2, 6, 13, 17, 27, 65, 70, 71, 76, 90, 102, 165, 172, 176, 228, 239, 250, 252, 324], "kkore": [0, 34], "order": [0, 6, 34, 44, 54, 66, 71, 73, 81, 93, 95, 96, 102, 103, 160, 165, 171, 176, 178, 179, 185, 209, 210, 213, 218, 225, 238, 239, 242, 274, 275, 278, 303, 304, 311, 317, 320, 324, 342], "That": [0, 27, 102, 170, 228, 271, 314, 326], "kshell": [0, 34], "fast": [0, 9, 20, 66, 102, 169], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 41, 42, 46, 48, 59, 70, 71, 73, 74, 81, 82, 90, 91, 92, 95, 96, 98, 102, 146, 160, 161, 163, 165, 169, 176, 186, 193, 211, 240, 244, 246, 255, 258, 259, 260, 261, 289, 311, 318, 322, 323, 324, 331, 338, 342], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 65, 74, 83, 90, 92, 94, 96, 101, 102, 104, 176, 230, 238, 240, 242, 244, 258, 261, 266, 311, 314, 317, 320, 323, 324, 344], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 48, 55, 59, 68, 76, 78, 93, 94, 96, 101, 160, 165, 230, 318, 320, 324, 325, 326, 327], "aim": [0, 22, 50, 54, 78, 88, 93, 94, 95, 96, 98], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 44, 59, 64, 65, 69, 77, 78, 86, 90, 91, 92, 96, 101, 102, 106, 136, 160, 161, 169, 170, 171, 173, 325, 331, 341, 342], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 43, 44, 46, 50, 51, 53, 55, 56, 57, 59, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 110, 159, 160, 161, 162, 163, 165, 168, 169, 171, 173, 175, 210, 230, 240, 244, 250, 253, 263, 264, 270, 273, 294, 307, 311, 318, 320, 322, 323, 324, 325, 327, 328, 331, 332], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 41, 42, 50, 51, 56, 59, 62, 65, 66, 68, 71, 73, 74, 78, 81, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 163, 164, 165, 168, 171, 173, 230, 258, 262, 311, 317, 320, 322, 323, 324, 331], "ldbc": [0, 4, 34, 54, 65, 67, 74, 75, 81, 90, 94, 98, 99, 339, 344], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 43, 50, 54, 55, 59, 62, 65, 66, 73, 74, 77, 81, 93, 95, 96, 163, 165, 167, 169, 176, 230, 296, 303, 305, 311, 318, 322, 323, 325], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 34, 37, 42, 46, 50, 56, 62, 64, 71, 73, 76, 82, 90, 91, 93, 94, 95, 96, 98, 102, 104, 110, 112, 156, 158, 160, 163, 165, 169, 170, 173, 176, 195, 196, 200, 242, 251, 265, 309, 311, 318, 320, 322], "variant": [0, 31, 96, 99], "networkx": [0, 3, 7, 8, 12, 34, 62, 81, 97, 100, 101, 102, 136, 176, 178, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 193, 194, 195, 196, 200, 201, 205, 206, 210, 211, 213, 214, 216, 217, 218, 221, 223, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 251, 254, 255, 256, 257, 262, 263, 264, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 304, 306, 311, 313, 314, 316, 340, 345], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 39, 41, 42, 43, 44, 45, 46, 51, 54, 59, 62, 65, 66, 67, 68, 71, 72, 73, 76, 78, 81, 84, 85, 90, 91, 92, 93, 95, 96, 99, 100, 101, 102, 104, 152, 158, 159, 160, 161, 163, 165, 168, 171, 172, 173, 174, 175, 176, 190, 214, 230, 244, 245, 250, 254, 262, 265, 266, 267, 272, 273, 291, 306, 309, 311, 314, 318, 322, 323, 324, 325, 328, 331, 336, 337, 341], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 76, 78, 82, 84, 96, 151, 303, 324, 326], "rank": [0, 6, 33, 91, 101, 102, 103, 303, 317], "vote": [0, 104], "scheme": [0, 6, 9, 43, 44, 48, 65, 90], "With": [0, 4, 12, 19, 24, 34, 36, 41, 55, 67, 73, 74, 76, 78, 81, 86, 87, 91, 92, 93, 249, 322, 331], "top": [0, 9, 12, 22, 34, 74, 76, 78, 98, 163, 285, 324, 342], "highest": [0, 78, 245], "elect": 0, "num_of_nod": [0, 102], "select": [0, 9, 15, 36, 66, 70, 74, 82, 85, 90, 91, 94, 96, 103, 111, 117, 118, 128, 129, 133, 141, 142, 159, 165, 173, 230, 239, 262, 274, 308, 311, 317, 318, 322, 323, 342], "influenti": 0, "extract": [0, 53, 69, 71, 76, 90, 91, 92, 93, 102, 110, 174, 318, 320, 324], "weakli": [0, 102, 176, 250], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 42, 43, 44, 45, 46, 50, 52, 53, 54, 55, 59, 62, 64, 65, 66, 67, 68, 70, 71, 74, 76, 77, 78, 80, 81, 82, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 176, 233, 262, 265, 268, 269, 271, 311, 314, 317, 320, 323, 324, 326, 328, 331], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 37, 43, 62, 66, 67, 68, 71, 73, 74, 76, 78, 80, 81, 82, 85, 90, 93, 99, 121, 137, 160, 161, 162, 163, 173, 305, 311, 324, 328], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 41, 54, 55, 59, 67, 68, 70, 73, 78, 91, 92, 96, 97, 99, 100, 159, 173, 247, 248, 249, 320, 328], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 46, 47, 48, 51, 54, 55, 56, 59, 62, 64, 65, 66, 70, 71, 73, 74, 76, 77, 78, 80, 81, 82, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 120, 159, 161, 165, 166, 167, 171, 176, 207, 208, 230, 258, 259, 260, 261, 308, 311, 313, 318, 320, 322, 323, 324, 325, 328, 331, 334], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 42, 43, 46, 47, 48, 54, 55, 56, 57, 59, 65, 67, 69, 70, 77, 80, 83, 86, 87, 90, 91, 92, 93, 96, 98, 100, 101, 102, 103, 137, 148, 165, 169, 170, 171, 173, 174, 263, 264, 314, 315, 318, 323, 324, 325, 326, 327, 328, 331, 332, 334, 336], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 41, 43, 46, 51, 53, 54, 55, 57, 59, 67, 68, 69, 70, 77, 82, 83, 84, 86, 87, 92, 98, 100, 102, 106, 161, 166, 170, 171, 220, 240, 311, 318, 320, 323, 331, 334, 342], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 51, 70, 74, 80, 81, 94, 100, 106, 151, 163, 166, 171, 230, 240, 318, 323, 324, 328], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 42, 44, 45, 54, 55, 56, 57, 62, 64, 68, 73, 74, 78, 84, 85, 86, 87, 93, 95, 96, 97, 98, 101, 159, 161, 167, 176, 311, 324], "extens": [1, 4, 6, 27, 36, 44, 66, 68, 71, 85, 91, 160], "henc": [1, 2, 10, 32, 90, 185, 308, 311, 324], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 42, 43, 46, 50, 51, 53, 54, 55, 59, 65, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 83, 84, 86, 87, 90, 92, 95, 97, 98, 100, 102, 106, 158, 160, 161, 164, 165, 166, 169, 170, 173, 176, 189, 220, 230, 240, 242, 254, 259, 260, 261, 311, 318, 320, 323, 324, 326, 331, 332, 334, 344], "flash": [1, 3, 8, 12, 91], "java": [1, 4, 8, 12, 14, 34, 64, 67, 73, 79, 81, 93, 94, 98, 102, 106, 110, 323, 334], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 42, 43, 47, 48, 50, 51, 52, 54, 55, 56, 57, 73, 76, 78, 81, 82, 91, 93, 94, 101, 102, 103, 106, 109, 121, 133, 161, 165, 169, 171, 176, 209, 210, 220, 240, 251, 264, 265, 268, 269, 303, 305, 307, 308, 311, 323, 326, 332, 334, 336, 342], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 51, 59, 62, 64, 65, 68, 70, 72, 78, 79, 82, 84, 87, 90, 91, 92, 94, 95, 97, 98, 101, 102, 109, 159, 162, 166, 169, 171, 174, 175, 311, 313, 314, 322, 323, 331, 332, 334, 335, 337, 338, 340, 341, 342, 344], "These": [1, 4, 9, 15, 20, 24, 44, 45, 54, 65, 71, 82, 90, 91, 92, 94, 95, 96, 97, 165, 171, 323, 331], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 43, 44, 48, 51, 54, 55, 62, 65, 66, 67, 70, 72, 74, 76, 78, 82, 85, 87, 88, 89, 91, 92, 94, 95, 96, 99, 101, 102, 103, 109, 110, 112, 113, 117, 118, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 138, 141, 142, 146, 152, 154, 159, 161, 162, 163, 164, 165, 168, 169, 170, 171, 173, 174, 175, 176, 181, 182, 185, 187, 190, 191, 193, 195, 196, 199, 200, 201, 204, 205, 206, 209, 210, 211, 213, 214, 216, 217, 218, 220, 221, 223, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 303, 304, 305, 306, 307, 308, 312, 313, 315, 316, 318, 320, 322, 323, 324, 326, 335, 338, 343], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 42, 43, 46, 47, 48, 52, 57, 59, 62, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 111, 117, 118, 130, 133, 137, 141, 142, 146, 159, 161, 163, 165, 167, 171, 173, 175, 195, 196, 316, 317, 318, 323, 326, 328, 332, 338], "upon": [1, 2, 9, 14, 54, 71, 73, 98, 173, 324, 325], "pregel": [1, 4, 8, 12, 17, 22, 34, 81, 91, 94, 316, 328, 338, 340], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 41, 42, 62, 67, 73, 78, 85, 90, 92, 159, 309, 311, 344], "deploi": [2, 15, 33, 37, 57, 59, 64, 66, 67, 68, 69, 77, 81, 84, 91, 93, 98, 161, 318, 320, 325], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 44, 53, 54, 59, 65, 67, 68, 69, 77, 83, 84, 86, 87, 91, 92, 93, 94, 95, 96, 102, 159, 171, 318, 323], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 41, 42, 45, 51, 55, 59, 66, 70, 73, 78, 81, 82, 90, 92, 93, 96, 106, 123, 160, 163, 164, 165, 169, 171, 173, 176, 239, 260, 291, 309, 311, 315, 317, 323, 324, 325, 326], "advantag": [2, 66, 81, 90, 97, 98, 327], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 41, 42, 45, 48, 57, 59, 62, 65, 66, 67, 68, 72, 74, 76, 77, 78, 82, 85, 89, 92, 96, 99, 102, 103, 162, 163, 164, 165, 168, 173, 174, 176, 178, 179, 180, 182, 187, 191, 195, 196, 212, 214, 217, 220, 226, 230, 231, 232, 234, 235, 236, 238, 242, 245, 246, 250, 251, 255, 257, 268, 269, 271, 273, 276, 279, 284, 288, 289, 292, 295, 298, 300, 303, 304, 305, 306, 311, 313, 314, 323, 326, 335, 338, 341, 342], "gie": [2, 32, 33, 64, 71, 78, 81, 90, 91, 95, 98, 99, 100, 130, 318, 335, 336, 345], "gle": [2, 32, 64, 81, 84, 85, 86, 91, 96, 98, 100, 335, 336, 343], "address": [2, 9, 14, 17, 23, 31, 42, 59, 73, 74, 91, 96, 324, 342], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 41, 51, 54, 62, 65, 66, 70, 73, 76, 78, 79, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 121, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 230, 234, 235, 236, 258, 261, 268, 288, 303, 311, 316, 318, 320, 322, 323, 324, 325, 326, 327, 328, 331], "complex": [2, 4, 6, 12, 22, 34, 37, 52, 54, 55, 62, 66, 67, 73, 74, 75, 76, 81, 82, 90, 91, 93, 94, 95, 96, 97, 98, 102, 162, 176, 240, 244, 259, 260, 261, 323], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 43, 45, 48, 51, 52, 54, 56, 59, 64, 66, 70, 72, 73, 77, 82, 85, 88, 91, 92, 93, 95, 96, 101, 161, 165, 171, 267, 303, 308, 323, 324], "show": [2, 14, 19, 20, 27, 29, 30, 38, 55, 56, 59, 66, 67, 78, 81, 86, 87, 92, 94, 95, 96, 162, 163, 171, 314, 318, 320, 323], "kubernet": [2, 29, 59, 62, 64, 65, 67, 81, 86, 90, 92, 97, 318, 324, 335, 337, 338, 340, 344, 345], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 59, 62, 64, 67, 69, 77, 78, 81, 84, 86, 90, 91, 92, 93, 94, 95, 96, 97, 102, 161, 171, 176, 233, 312, 318, 324, 325, 332, 334, 341], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 42, 45, 46, 51, 54, 59, 62, 65, 66, 68, 70, 71, 73, 74, 78, 82, 90, 91, 96, 98, 160, 161, 162, 167, 176, 240, 311, 323, 324], "scenario": [2, 4, 6, 8, 12, 13, 41, 54, 55, 66, 76, 77, 78, 82, 85, 90, 91, 95, 96, 98, 160, 161, 163], "quit": [2, 30, 70, 230], "common": [2, 6, 12, 15, 30, 46, 66, 70, 78, 82, 85, 90, 91, 93, 94, 95, 96, 98, 159, 160, 167, 168, 182, 303, 305, 311, 323, 332], "intend": [2, 13, 36, 71, 303, 317], "analysi": [2, 7, 8, 11, 13, 66, 77, 78, 81, 90, 96, 97, 99, 100, 102, 264], "offlin": [2, 64, 81, 82, 93, 96, 97, 320], "everi": [2, 6, 23, 42, 45, 52, 76, 78, 85, 96, 101, 165, 176, 178, 179, 180, 195, 196, 214, 228, 291, 298, 311, 317, 323], "dai": [2, 20, 78, 311, 314], "export": [2, 4, 23, 29, 31, 33, 39, 53, 59, 67, 83, 322, 324, 337], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 42, 55, 56, 65, 74, 76, 91, 93, 98, 106, 119, 160, 162, 163, 164, 165, 186, 223, 237, 244, 250, 251, 258, 259, 260, 261, 262, 311, 314, 318, 323, 324, 326, 342], "real": [2, 6, 9, 12, 13, 34, 48, 62, 65, 74, 76, 81, 91, 92, 94, 96, 303, 324], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 48, 51, 59, 66, 71, 74, 76, 78, 81, 85, 89, 90, 92, 95, 96, 99, 102, 160, 161, 165, 176, 209, 210, 246, 247, 248, 249, 259, 260, 261, 263, 264, 273, 276, 311, 323, 324, 326, 338, 342], "sampl": [2, 29, 30, 31, 33, 43, 50, 57, 64, 65, 81, 82, 91, 92, 98, 106, 160, 161, 162, 164, 167, 169, 172, 175, 250, 270, 303, 324, 343], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 41, 46, 59, 62, 65, 66, 71, 74, 76, 78, 85, 90, 95, 99, 104, 160, 161, 165, 167, 169, 172, 176, 230, 238, 244, 268, 279, 295, 317, 318, 323, 324, 328, 331], "unnecessari": [2, 6, 9, 73, 78, 323], "capabl": [2, 6, 11, 16, 20, 54, 71, 72, 73, 76, 79, 91, 93, 95, 98, 311], "independ": [2, 6, 30, 91, 98, 160, 174, 187, 190, 238, 265, 311], "document": [2, 10, 27, 29, 33, 35, 36, 38, 47, 55, 56, 57, 59, 67, 70, 71, 72, 76, 77, 79, 81, 83, 96, 102, 159, 160, 166, 318, 319, 324], "walk": [2, 4, 32, 43, 51, 65, 78, 91, 92, 95, 165, 212, 223], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 42, 43, 48, 51, 52, 54, 55, 57, 62, 64, 65, 67, 68, 72, 73, 77, 78, 80, 81, 82, 84, 85, 86, 87, 91, 93, 94, 95, 96, 97, 101, 112, 160, 161, 163, 165, 169, 171, 240, 242, 245, 273, 279, 311, 318, 320, 322, 323, 326, 328], "standalon": [2, 23, 27, 32, 59, 64, 67, 68, 78, 90, 91, 325, 331, 344], "self": [2, 65, 78, 90, 146, 159, 162, 165, 176, 186, 199, 238, 240, 242, 244, 250, 258, 259, 260, 261, 262, 311, 312, 314, 318, 324, 339, 343, 344], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 47, 48, 52, 55, 56, 57, 59, 62, 65, 72, 78, 81, 85, 86, 87, 91, 93, 94, 95, 96, 97, 98, 99, 101, 318, 324, 325, 331, 334], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 41, 46, 59, 62, 64, 65, 69, 77, 81, 84, 86, 90, 98, 100, 318, 324, 334, 335, 336, 338, 341, 344], "7": [2, 10, 20, 23, 27, 30, 31, 32, 59, 68, 76, 78, 99, 160, 166, 171, 178, 179, 191, 214, 276, 282, 284, 288, 289, 292, 294, 306, 311, 326, 337, 341, 342], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 42, 43, 44, 46, 48, 50, 51, 53, 54, 55, 59, 62, 65, 66, 78, 80, 81, 82, 83, 85, 87, 88, 90, 91, 92, 96, 98, 99, 102, 106, 159, 160, 161, 163, 165, 166, 167, 169, 171, 176, 189, 240, 242, 247, 249, 258, 261, 301, 305, 311, 313, 317, 318, 320, 322, 323, 324, 327, 328, 331, 332], "get": [2, 4, 6, 12, 16, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 41, 48, 54, 57, 59, 64, 65, 66, 67, 71, 76, 78, 82, 85, 90, 95, 97, 100, 102, 103, 104, 122, 159, 162, 163, 164, 165, 168, 173, 174, 175, 176, 209, 230, 301, 311, 317, 318, 320, 323, 324, 328, 331, 332, 334, 337, 338], "instal": [2, 4, 15, 16, 17, 19, 23, 33, 35, 41, 46, 51, 57, 59, 65, 67, 69, 77, 92, 102, 106, 169, 311, 314, 318, 335, 336, 337, 338, 341], "client": [2, 17, 22, 23, 29, 33, 38, 41, 51, 58, 66, 77, 79, 81, 87, 89, 101, 102, 171, 318, 320, 322, 323, 324, 325, 334, 336, 341], "prepar": [2, 4, 33, 36, 43, 57, 65, 68, 70, 82, 83, 84, 85, 87, 88, 92, 96, 100, 323, 338], "continu": [2, 6, 15, 16, 20, 27, 65, 66, 77, 78, 81, 82, 91, 92, 96, 99, 159, 230, 268, 271, 323, 324, 325], "incas": [2, 65], "doesn": [2, 13, 29, 32, 37, 38, 41, 54, 65, 78, 106, 165, 173, 240, 242, 244, 311, 317, 326], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 41, 53, 54, 56, 58, 59, 65, 74, 76, 78, 89, 90, 93, 99, 101, 102, 104, 106, 112, 159, 164, 165, 171, 173, 175, 176, 189, 205, 240, 242, 244, 264, 268, 269, 303, 305, 308, 311, 317, 324, 326, 343], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 41, 45, 48, 53, 65, 67, 68, 76, 81, 83, 90, 100, 102, 154, 161, 163, 164, 173, 239, 322, 323, 324, 325], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 44, 46, 47, 48, 51, 54, 56, 57, 59, 65, 67, 68, 70, 73, 76, 77, 78, 90, 91, 92, 95, 96, 101, 102, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 136, 139, 140, 146, 152, 153, 154, 163, 165, 168, 170, 173, 174, 189, 211, 213, 214, 216, 217, 218, 220, 221, 223, 225, 226, 228, 229, 230, 232, 233, 235, 238, 240, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 257, 259, 260, 261, 263, 264, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 305, 306, 311, 313, 314, 315, 318, 324, 325, 326, 327, 332, 334, 337], "distinct": [2, 50, 71, 76, 91, 92, 95, 216, 278, 304, 323], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 48, 73, 78, 85, 87, 90, 94, 96, 101, 102, 104, 125, 136, 151, 159, 163, 167, 168, 173, 174, 176, 239, 247, 249, 258, 260, 311, 314, 316, 318, 323, 324, 328, 334], "entir": [2, 9, 34, 54, 55, 66, 78, 92, 96, 165, 176, 311], "discret": [2, 82, 96, 159, 230, 243, 245, 251, 255, 266], "util": [2, 4, 6, 9, 15, 32, 36, 41, 43, 45, 50, 54, 56, 71, 72, 73, 78, 81, 83, 88, 90, 91, 93, 94, 97, 101, 102, 104, 175, 276, 322, 323, 324, 327], "either": [2, 13, 30, 34, 51, 55, 59, 65, 73, 74, 77, 78, 85, 102, 161, 165, 173, 174, 214, 217, 230, 257, 268, 301, 311, 325], "aforement": [2, 50, 90, 94, 96, 160, 165, 324], "per": [2, 44, 54, 65, 73, 323, 324], "prefer": [2, 13, 27, 36, 42, 54, 323], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 59, 62, 68, 70, 75, 77, 78, 81, 84, 86, 90, 92, 100, 102, 103, 121, 152, 153, 154, 156, 158, 173, 174, 311, 315, 316, 324, 326, 331, 332, 334, 335, 336, 338, 339, 342, 344], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 71, 78, 85, 88, 90, 92, 96, 101, 102, 103, 104, 109, 159, 160, 173, 174, 175, 176, 220, 289, 311, 315, 318, 323, 324, 325, 334, 343], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 41, 42, 44, 50, 55, 56, 65, 67, 69, 70, 71, 74, 76, 77, 78, 81, 83, 90, 93, 95, 98, 102, 103, 106, 109, 130, 136, 137, 138, 148, 158, 160, 163, 165, 173, 174, 176, 178, 179, 180, 195, 196, 205, 211, 213, 214, 216, 218, 220, 221, 223, 225, 226, 229, 233, 234, 235, 238, 240, 242, 243, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 303, 306, 309, 311, 313, 314, 317, 318, 324, 325], "control": [2, 6, 27, 38, 90, 91, 93, 101, 176, 311, 323, 324], "subset": [2, 6, 20, 54, 74, 76, 88, 92, 217, 228, 317, 318], "launch": [2, 8, 9, 17, 22, 29, 36, 41, 46, 59, 62, 65, 75, 84, 86, 87, 92, 100, 152, 170, 315, 318, 324, 325, 331, 334, 338], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 41, 42, 43, 45, 46, 48, 50, 51, 54, 55, 59, 62, 65, 66, 71, 73, 74, 76, 78, 81, 82, 85, 87, 90, 91, 92, 94, 95, 96, 102, 104, 110, 159, 160, 161, 162, 165, 167, 169, 171, 173, 176, 188, 209, 212, 214, 217, 240, 242, 244, 245, 250, 253, 254, 258, 259, 260, 261, 262, 273, 276, 305, 311, 315, 317, 318, 324, 326, 327, 332], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 41, 43, 44, 45, 47, 50, 53, 55, 62, 64, 65, 68, 70, 71, 73, 74, 77, 78, 79, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 102, 103, 109, 110, 152, 154, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 182, 187, 189, 190, 195, 196, 199, 204, 205, 210, 212, 214, 216, 217, 220, 223, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 244, 246, 247, 249, 251, 254, 258, 259, 260, 261, 262, 268, 271, 276, 301, 303, 304, 305, 306, 309, 311, 313, 314, 315, 317, 318, 322, 323, 324, 325, 326, 331, 332, 334, 338, 343], "set_opt": [2, 7, 15, 17, 19, 29, 38, 59, 68, 70, 84, 87, 88, 89, 92, 332, 337], "show_log": [2, 7, 15, 17, 19, 29, 38, 59, 68, 84, 87, 88, 89, 92, 158, 332, 337], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 42, 44, 46, 48, 59, 65, 68, 73, 76, 77, 78, 84, 85, 87, 88, 89, 90, 92, 101, 102, 104, 106, 148, 152, 156, 159, 160, 161, 165, 168, 171, 173, 176, 183, 192, 193, 194, 195, 196, 205, 207, 208, 214, 216, 234, 238, 240, 244, 250, 254, 257, 269, 309, 311, 313, 314, 318, 324, 325, 332, 334, 337, 342, 343, 344], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 62, 70, 87, 88, 90, 102, 103, 148, 152, 173, 174, 318, 326, 332, 334, 335, 336, 338, 339, 342, 344], "enabled_engin": [2, 158, 318], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 36, 37, 41, 43, 45, 50, 51, 54, 55, 56, 62, 67, 68, 70, 74, 76, 77, 78, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 110, 154, 159, 161, 162, 163, 164, 165, 166, 168, 169, 171, 173, 174, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 210, 211, 213, 214, 216, 217, 220, 221, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 303, 304, 308, 309, 311, 313, 314, 317, 318, 320, 322, 323, 324, 325, 327, 328, 331, 332, 334, 337, 338, 339, 341, 342, 343, 344], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 44, 45, 48, 51, 54, 57, 66, 81, 85, 90, 91, 94, 96, 97, 159, 160, 163, 165, 167, 168, 169, 258, 260, 261, 308, 328], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 41, 42, 43, 46, 47, 50, 51, 55, 59, 64, 67, 83, 84, 101, 160, 324, 325, 332], "line": [2, 4, 6, 7, 17, 36, 37, 38, 41, 48, 50, 56, 64, 66, 83, 84, 93, 98, 159, 160, 311, 313, 324, 325, 332, 343], "releas": [2, 27, 31, 32, 35, 43, 46, 51, 59, 74, 87, 99, 268, 271, 317, 318, 324, 337, 341], "replac": [2, 17, 19, 22, 23, 29, 30, 43, 66, 67, 70, 76, 93, 99, 162, 163, 164, 173, 311], "my": [2, 18, 29, 311, 314, 318, 324], "illustr": [2, 4, 29, 43, 44, 45, 73, 78, 82, 88, 89, 94, 96, 162, 288], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 46, 62, 65, 66, 69, 77, 78, 85, 87, 90, 91, 92, 159, 165, 305, 320, 326], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 41, 45, 51, 54, 59, 65, 66, 72, 76, 78, 79, 81, 85, 87, 90, 91, 92, 93, 94, 96, 102, 103, 104, 160, 161, 163, 165, 168, 174, 176, 180, 197, 212, 214, 216, 218, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 235, 237, 239, 244, 245, 250, 251, 253, 258, 260, 261, 262, 263, 264, 265, 267, 276, 286, 287, 289, 291, 293, 310, 311, 318, 325, 326, 334, 342], "servic": [2, 27, 28, 29, 38, 39, 44, 46, 47, 50, 55, 57, 69, 77, 81, 87, 91, 92, 94, 96, 101, 318, 325], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 39, 42, 43, 44, 45, 46, 47, 51, 54, 59, 61, 65, 71, 73, 76, 78, 81, 84, 85, 90, 94, 96, 98, 101, 102, 103, 152, 154, 158, 160, 161, 163, 164, 167, 168, 169, 171, 268, 311, 318, 322, 324, 327, 328], "addr": [2, 29, 104, 318], "ip": [2, 29, 65, 67, 77, 318, 324, 342], "port": [2, 23, 29, 38, 42, 46, 51, 54, 56, 59, 65, 67, 70, 77, 90, 101, 318, 324, 342, 344], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 54, 59, 62, 65, 66, 68, 70, 74, 76, 78, 82, 84, 87, 90, 91, 92, 95, 96, 97, 98, 112, 160, 165, 167, 168, 169, 170, 173, 210, 233, 240, 242, 250, 311, 314, 317, 318, 323, 324, 326, 328, 331], "would": [2, 4, 20, 29, 31, 36, 37, 41, 59, 67, 70, 78, 91, 101, 102, 165, 171, 314, 317, 318, 324], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 41, 48, 78, 92, 102, 111, 159, 163, 165, 249, 324], "wcc_result": 2, "wcc": [2, 13, 99, 102, 334, 339], "print": [2, 7, 16, 20, 29, 30, 33, 46, 59, 62, 65, 68, 69, 70, 77, 78, 84, 85, 87, 88, 89, 90, 92, 102, 103, 162, 164, 165, 168, 171, 173, 174, 176, 189, 238, 306, 311, 314, 324, 332, 339, 342, 344], "to_datafram": [2, 7, 15, 62, 92, 103, 173, 317, 334], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 43, 44, 45, 48, 50, 58, 59, 62, 65, 66, 67, 70, 71, 73, 79, 82, 85, 90, 92, 95, 96, 99, 101, 102, 103, 104, 130, 136, 138, 159, 160, 161, 162, 163, 164, 165, 168, 169, 171, 172, 173, 175, 268, 269, 308, 311, 314, 317, 318, 324, 325, 332, 334, 335, 337, 338, 342, 343, 344], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 62, 65, 71, 92, 93, 96, 102, 103, 211, 221, 228, 234, 238, 250, 258, 267, 299, 304, 317, 318, 324, 334, 338, 339], "tip": [2, 13, 296], "encount": [2, 32, 37, 54, 59, 94, 112], "fail": [2, 37, 48, 59, 66, 73, 76, 96, 176, 311, 324], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 51, 54, 66, 69, 71, 92, 93, 95, 101, 102, 103, 135, 166, 173, 318, 324, 334, 338, 339, 342], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 42, 44, 51, 55, 59, 64, 66, 68, 74, 76, 78, 84, 90, 91, 92, 95, 102, 103, 135, 159, 161, 174, 176, 240, 242, 245, 246, 268, 269, 270, 271, 273, 285, 303, 311, 317, 324, 334, 337, 338, 342], "empti": [2, 19, 29, 41, 48, 56, 58, 76, 78, 90, 102, 104, 193, 217, 220, 250, 251, 289, 305, 311, 314, 324], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 43, 51, 52, 56, 57, 59, 62, 64, 65, 66, 67, 68, 69, 72, 77, 84, 92, 93, 94, 96, 99, 100, 101, 102, 110, 112, 114, 143, 159, 161, 170, 171, 173, 318, 323], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 59, 62, 68, 72, 78, 84, 87, 88, 89, 92, 96, 99, 102, 103, 159, 165, 171, 318, 334, 336, 338, 342, 344], "load_modern_graph": [2, 7, 30, 33, 68, 92, 102, 174], "modern": [2, 6, 7, 33, 42, 43, 46, 48, 50, 51, 55, 56, 57, 65, 67, 68, 73, 78, 81, 92, 93, 94, 320, 324, 325], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 42, 43, 44, 45, 46, 48, 51, 54, 55, 56, 59, 62, 65, 66, 71, 74, 76, 78, 81, 85, 87, 90, 92, 94, 95, 97, 102, 104, 153, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 173, 174, 303, 306, 311, 318, 323, 324, 331, 334, 341], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 45, 46, 48, 54, 58, 62, 67, 71, 73, 74, 78, 80, 81, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 112, 161, 162, 163, 164, 165, 168, 171, 173, 174, 175, 176, 212, 230, 240, 242, 244, 245, 247, 248, 249, 252, 257, 258, 265, 266, 267, 268, 271, 273, 289, 294, 300, 302, 311, 313, 314, 317, 318, 320, 322, 323, 325, 327, 328, 334, 338, 341, 342, 344], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 39, 42, 43, 44, 46, 48, 65, 66, 67, 70, 71, 73, 79, 81, 82, 85, 90, 92, 94, 95, 98, 102, 110, 160, 161, 163, 165, 170, 171, 173, 176, 179, 212, 218, 222, 223, 225, 242, 305, 311, 313, 315, 317, 318, 322, 324, 326, 334, 335, 338, 339, 342], "store": [2, 10, 12, 13, 16, 17, 30, 34, 42, 43, 45, 46, 47, 48, 51, 54, 56, 57, 59, 64, 65, 71, 72, 74, 76, 78, 81, 90, 91, 93, 94, 95, 97, 98, 103, 104, 117, 118, 133, 141, 142, 161, 167, 173, 174, 230, 235, 258, 259, 260, 261, 262, 311, 313, 318, 320, 322, 323, 325, 332, 334, 337], "pod": [2, 27, 28, 29, 30, 38, 41, 46, 48, 59, 62, 65, 87, 90, 318, 324, 332, 335, 337, 338, 344], "elimin": [2, 6, 14, 50, 161], "extran": 2, "resourc": [2, 27, 29, 33, 38, 53, 54, 59, 62, 77, 87, 91, 98, 102, 110, 230, 263, 318, 324, 327, 331, 337], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 42, 45, 51, 53, 55, 59, 62, 66, 68, 70, 73, 74, 76, 78, 82, 85, 87, 90, 91, 92, 96, 98, 102, 106, 120, 159, 160, 161, 163, 164, 168, 169, 170, 171, 172, 209, 257, 258, 262, 311, 318, 323, 324, 327, 341], "equival": [2, 20, 59, 71, 73, 74, 76, 78, 165, 230, 267, 311], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 43, 45, 52, 54, 55, 56, 59, 70, 71, 73, 74, 76, 77, 78, 82, 90, 91, 93, 96, 98, 101, 165, 169, 176, 209, 210, 217, 220, 240, 242, 247, 258, 259, 260, 261, 262, 270, 306, 309, 310, 311, 312, 313, 316, 322, 323, 328, 331, 334], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 44, 45, 46, 48, 54, 55, 59, 62, 65, 66, 70, 71, 76, 77, 78, 82, 85, 87, 91, 93, 94, 96, 98, 99, 102, 103, 104, 112, 146, 152, 160, 161, 162, 163, 164, 165, 168, 169, 170, 172, 173, 175, 176, 220, 230, 250, 258, 259, 260, 261, 267, 311, 313, 314, 318, 320, 322, 323, 324, 326, 331, 332], "close": [2, 6, 27, 29, 30, 33, 48, 77, 85, 87, 91, 102, 161, 171, 174, 313, 318, 324, 338], "free": [2, 9, 37, 59, 85, 98, 251, 258, 268, 271, 273, 304, 310, 318], "delet": [2, 9, 27, 29, 30, 33, 46, 48, 59, 131, 170, 318, 320, 324, 337], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 54, 56, 57, 65, 66, 74, 77, 78, 81, 91, 93, 94, 95, 96, 103, 133, 160, 172, 175, 311, 313, 323, 324], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 41, 42, 54, 56, 66, 74, 78, 81, 82, 91, 92, 93, 94, 96, 97, 123, 173, 276, 323, 328], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 59, 62, 66, 80, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 161, 164, 165, 167, 173, 221, 230, 233, 234, 242, 243, 244, 245, 246, 250, 251, 252, 253, 258, 263, 264, 267, 268, 270, 271, 294, 303, 308, 311, 312, 314, 316, 317, 327], "deriv": [3, 12, 34, 92, 95, 101, 103, 173, 176, 320], "grape": [3, 4, 15, 16, 22, 23, 34, 64, 80, 91, 97, 101, 110, 320, 323, 325, 326, 327, 328, 334, 340], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 48, 50, 51, 52, 53, 54, 59, 62, 65, 66, 68, 71, 72, 73, 74, 78, 79, 80, 81, 84, 91, 93, 94, 95, 96, 97, 99, 160, 161, 166, 169, 308, 310, 320, 322, 323, 324, 326, 328, 334, 342], "sigmod": [3, 12, 14, 24, 34, 91, 334, 340], "2017": [3, 12, 14, 34, 91, 268, 269, 334], "further": [3, 6, 10, 14, 20, 27, 30, 34, 54, 62, 67, 71, 74, 76, 78, 92, 93, 103, 161, 173, 174, 189, 320, 323], "enhanc": [3, 4, 9, 48, 54, 73, 76, 92], "introduc": [3, 6, 10, 19, 20, 24, 44, 64, 66, 71, 73, 74, 76, 78, 80, 82, 91, 93, 95, 98, 159, 162, 163, 165, 167, 176, 288, 310, 323, 328], "lot": [3, 13, 37, 62, 78, 80, 328], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 42, 48, 54, 57, 66, 68, 73, 78, 83, 91, 92, 93, 101, 104, 111, 112, 153, 170, 173, 174, 176, 183, 189, 230, 242, 251, 253, 273, 302, 309, 311, 318, 320, 322, 323, 324, 326, 338], "featur": [3, 6, 9, 12, 23, 32, 34, 43, 57, 71, 73, 80, 82, 84, 87, 88, 91, 92, 95, 96, 97, 98, 101, 106, 159, 160, 167, 171, 173, 311, 318, 323, 328, 338, 343], "storag": [3, 9, 30, 46, 54, 59, 66, 67, 71, 73, 74, 78, 90, 93, 96, 98, 138, 161, 173, 322, 324, 325], "languag": [3, 12, 16, 35, 51, 52, 57, 62, 66, 68, 73, 74, 76, 77, 78, 79, 81, 82, 85, 91, 92, 93, 94, 95, 98, 106, 174, 323, 324, 328], "pattern": [3, 6, 12, 23, 30, 42, 54, 66, 67, 70, 73, 74, 76, 81, 85, 91, 94, 98, 102, 164, 169, 324], "better": [3, 8, 12, 20, 24, 29, 34, 65, 66, 78, 80, 96, 98, 318, 324, 328], "integr": [3, 4, 9, 12, 13, 22, 23, 34, 44, 51, 66, 68, 70, 73, 79, 80, 91, 93, 95, 97, 98, 304, 323, 324, 326, 328], "big": [3, 6, 12, 37, 80, 93, 328], "overview": [3, 23, 34, 47, 51, 57, 73, 78, 92, 320], "architectur": [3, 9, 53, 54, 91, 96, 102], "kei": [3, 4, 13, 20, 27, 43, 44, 45, 48, 57, 65, 68, 71, 72, 73, 76, 78, 90, 93, 95, 96, 97, 102, 103, 104, 135, 136, 137, 146, 162, 165, 171, 173, 176, 205, 254, 258, 259, 260, 261, 309, 311, 313, 314, 317, 318, 323, 324, 334, 344], "concept": [3, 93, 96, 159, 160], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 22, 34, 80, 81, 91, 93, 94, 328], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 77, 82, 93, 101, 328], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 51, 59, 62, 65, 68, 71, 79, 81, 82, 84, 85, 86, 87, 88, 92, 96, 97, 100, 102, 167, 174, 317, 318, 320, 322, 338], "tune": [3, 62, 90, 91], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 41, 42, 43, 44, 48, 51, 53, 54, 55, 56, 57, 64, 65, 68, 70, 72, 76, 77, 79, 84, 87, 88, 92, 106, 338], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 47, 52, 54, 55, 64, 66, 67, 70, 71, 78, 83, 91, 92, 93, 98, 99, 101, 102, 104, 109, 159, 160, 161, 162, 165, 166, 171, 230, 272, 315, 323, 324, 326, 331], "organ": [4, 50, 56, 70, 76, 78, 81, 82, 96, 100, 159, 161, 163, 167, 168, 247, 249, 288], "identifi": [4, 9, 13, 24, 45, 74, 76, 78, 91, 92, 94, 102, 151, 238, 305, 308, 311, 318, 324, 331, 344], "simplic": [4, 9], "suggest": [4, 13, 66, 70, 78, 90, 93, 230], "prebuilt": [4, 41, 67], "docker": [4, 27, 32, 33, 36, 38, 41, 43, 51, 53, 56, 57, 59, 67, 81, 324, 331, 335, 338, 340, 341], "imag": [4, 29, 36, 38, 46, 51, 56, 59, 67, 81, 83, 99, 162, 318, 331], "necessari": [4, 6, 23, 27, 37, 41, 43, 53, 55, 67, 68, 73, 77, 90, 113, 121, 126, 160, 161, 163, 165, 173, 323, 324, 332], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 41, 53, 59, 67, 69, 70, 77, 78, 83, 84, 93, 96, 102, 165, 233, 238, 324, 331, 334], "shm": [4, 32, 41, 67, 83, 336], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 41, 44, 58, 59, 65, 67, 77, 82, 83, 85, 90, 96, 99, 104, 160, 162, 163, 165, 170, 172, 216, 217, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 242, 253, 262, 266, 268, 311, 323, 324, 325, 336], "4096m": [4, 32, 41, 67, 83], "registri": [4, 27, 32, 41, 46, 67, 83, 166, 318, 324, 336], "cn": [4, 23, 27, 29, 31, 32, 41, 46, 67, 83, 90, 166, 324, 335, 336, 344], "hongkong": [4, 27, 32, 41, 46, 67, 83, 324, 336], "aliyunc": [4, 23, 27, 29, 31, 32, 41, 46, 67, 83, 90, 166, 324, 335, 336, 344], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 41, 46, 67, 68, 70, 83, 84, 90, 93, 94, 99, 102, 106, 166, 169, 176, 263, 272, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 291, 296, 318, 323, 324, 334, 335, 336, 337, 344], "latest": [4, 14, 17, 32, 37, 38, 39, 41, 46, 51, 53, 67, 70, 83, 84, 323, 324, 336, 341], "altern": [4, 43, 45, 71, 239, 258, 262, 311, 323, 324], "manual": [4, 9, 27, 30, 33, 59, 91, 98, 173, 324], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 45, 46, 48, 51, 53, 54, 55, 56, 59, 65, 66, 68, 71, 73, 74, 76, 77, 78, 83, 85, 87, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 180, 181, 183, 184, 188, 190, 205, 206, 210, 211, 214, 216, 217, 221, 230, 239, 248, 254, 268, 269, 271, 273, 297, 305, 306, 309, 311, 318, 322, 323, 324, 327, 332], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 41, 42, 43, 46, 51, 53, 54, 59, 67, 70, 74, 85, 87, 90, 92, 159, 160, 161, 163, 164, 165, 166, 169, 171, 322, 324, 328, 331, 338], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 39, 43, 51, 59, 62, 64, 68, 72, 81, 87, 92, 93, 100, 102, 106, 166, 170, 176, 318, 323, 324, 325, 332, 337], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 42, 48, 55, 62, 70, 74, 76, 82, 93, 94, 96, 102, 103, 104, 114, 159, 160, 161, 162, 169, 170, 171, 176, 273, 284, 303, 311, 315, 317, 318, 320, 323, 324, 325, 331, 332, 334], "clone": [4, 17, 22, 29, 30, 31, 32, 36, 37, 46, 67, 70, 106, 166, 324, 336], "repositori": [4, 29, 36, 37, 46, 65, 70, 106, 318, 324], "enter": [4, 66, 77], "analytical_engin": [4, 15, 17, 31, 36, 106, 334], "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 42, 43, 46, 48, 55, 59, 70, 77, 81, 101, 105, 107, 159, 170, 318, 322, 331, 332, 335, 337, 338], "git": [4, 17, 22, 29, 30, 31, 32, 35, 37, 46, 67, 70, 106, 169, 323, 336], "http": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 42, 46, 47, 59, 67, 68, 69, 70, 72, 77, 84, 87, 88, 92, 93, 94, 102, 106, 166, 169, 176, 230, 234, 235, 236, 250, 253, 260, 261, 263, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 295, 296, 297, 298, 303, 318, 323, 324, 334, 335, 336, 337, 338, 341, 342, 344], "github": [4, 22, 29, 30, 31, 32, 35, 46, 67, 70, 93, 94, 102, 106, 166, 169, 261, 318, 323, 334, 336, 344], "alibaba": [4, 17, 22, 23, 29, 31, 32, 46, 67, 81, 91, 93, 96, 97, 106, 166, 169, 334, 336, 344], "cd": [4, 17, 22, 29, 31, 32, 35, 46, 53, 67, 69, 77, 106, 166, 169, 171, 324, 331, 332, 334, 336, 342], "sinc": [4, 6, 23, 24, 29, 30, 37, 42, 51, 54, 66, 70, 76, 78, 83, 87, 90, 91, 99, 112, 161, 165, 173, 209, 210, 240, 242, 289, 306, 313, 317, 323, 324, 331], "inherit": [4, 6, 9, 16, 66, 93, 101, 159, 169], "libgrap": [4, 16, 31, 34, 93, 106], "lite": [4, 16, 31, 34, 93, 106], "note": [4, 13, 14, 20, 27, 29, 37, 38, 42, 43, 45, 46, 50, 51, 54, 55, 66, 70, 71, 73, 78, 82, 87, 88, 90, 92, 93, 94, 102, 103, 104, 112, 151, 153, 161, 165, 173, 176, 185, 186, 189, 193, 206, 207, 208, 209, 210, 211, 217, 218, 223, 226, 228, 230, 231, 232, 233, 235, 237, 239, 240, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 288, 303, 304, 305, 306, 308, 311, 313, 314, 317, 318, 322, 324, 331, 338, 344], "core": [4, 6, 12, 34, 37, 59, 66, 68, 91, 92, 93, 102, 106, 171, 176, 318, 338], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 42, 44, 45, 54, 62, 66, 73, 77, 78, 88, 92, 93, 94, 95, 96, 102, 160, 161, 162, 173, 221, 240, 288, 303, 305, 311, 312, 322, 323, 324, 327], "partition": [4, 58, 169], "worker": [4, 9, 13, 14, 23, 28, 34, 42, 67, 85, 87, 161, 164, 171, 173, 318], "between": [4, 6, 9, 10, 12, 13, 18, 19, 45, 59, 64, 66, 73, 78, 79, 82, 94, 96, 101, 102, 160, 161, 163, 165, 171, 176, 233, 234, 235, 238, 244, 250, 251, 253, 257, 258, 259, 260, 262, 265, 267, 268, 269, 271, 276, 306, 308, 311, 323, 324, 331], "heavili": 4, "reus": [4, 30, 55, 73, 82, 85, 93, 102, 171, 173, 318, 320], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 46, 55, 74, 78, 84, 90, 97, 106, 112, 158, 169, 173, 220, 254, 311, 317, 318, 320, 324, 331], "fulli": [4, 54, 82, 85, 95, 102, 112, 253, 323, 334], "recommend": [4, 27, 30, 36, 37, 59, 65, 68, 70, 78, 82, 90, 91, 92, 96, 165], "locat": [4, 23, 27, 36, 38, 43, 44, 45, 48, 51, 53, 65, 67, 71, 78, 83, 90, 95, 105, 107, 161, 162, 173, 324, 325, 331], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 32, 36, 37, 41, 42, 43, 45, 46, 48, 59, 62, 65, 66, 68, 70, 73, 78, 79, 81, 83, 90, 91, 92, 96, 97, 98, 100, 101, 102, 160, 165, 169, 171, 173, 230, 240, 242, 250, 311, 317, 318, 320, 323, 324, 325, 344], "therebi": [4, 54, 74], "fledg": [4, 12, 91], "coordin": [4, 15, 27, 29, 35, 37, 38, 41, 68, 87, 101, 173, 223, 318, 324, 331, 332, 335, 336, 338], "while": [4, 6, 12, 19, 20, 29, 34, 44, 45, 51, 54, 55, 62, 65, 69, 71, 73, 74, 76, 77, 78, 82, 91, 93, 94, 95, 97, 98, 160, 165, 171, 207, 208, 268, 271, 273, 305, 311, 320, 323, 324, 332], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 56, 59, 65, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 81, 82, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 99, 102, 112, 128, 129, 146, 159, 161, 163, 165, 168, 170, 172, 173, 176, 212, 223, 230, 233, 235, 238, 242, 245, 247, 248, 249, 265, 273, 274, 275, 298, 301, 303, 311, 317, 318, 320, 322, 323, 324, 325, 342, 343], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 42, 43, 44, 45, 46, 54, 62, 65, 66, 71, 73, 74, 76, 78, 81, 82, 84, 85, 90, 91, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 106, 110, 159, 160, 161, 163, 164, 165, 166, 173, 174, 176, 195, 196, 205, 231, 232, 257, 258, 262, 270, 283, 304, 305, 311, 317, 318, 323, 324, 325, 328], "ship": [4, 331], "6": [4, 10, 17, 18, 22, 31, 48, 62, 68, 76, 77, 78, 92, 99, 102, 160, 165, 171, 176, 195, 214, 243, 244, 245, 262, 276, 278, 284, 285, 288, 291, 295, 296, 304, 306, 311, 324, 326, 334, 337, 338, 342], "graphalyt": [4, 98], "benchmark": [4, 34, 54, 74, 78, 81, 94, 96, 98, 230], "flatten": [4, 13], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 59, 62, 78, 87, 96, 102, 164, 206, 214, 311, 323], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 41, 42, 43, 45, 51, 52, 54, 55, 62, 65, 66, 67, 68, 72, 73, 76, 78, 81, 92, 93, 95, 96, 101, 102, 103, 130, 165, 169, 173, 174, 176, 271, 315, 318, 320, 324, 326, 331, 332, 334, 338, 342], "written": [4, 12, 20, 45, 78, 91, 93, 95, 289, 320, 323, 326, 334], "giraph": [4, 7, 8, 12, 17, 23, 24, 80, 98, 328], "graphx": [4, 7, 8, 12, 17, 24, 80, 98, 328], "app": [4, 15, 16, 17, 18, 33, 103, 104, 106, 111, 114, 137, 143, 146, 160, 173, 316, 317, 323, 334], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 51, 54, 66, 67, 91, 101, 102, 106, 324], "serv": [4, 27, 48, 59, 70, 73, 81, 92, 93, 96, 161, 324, 331], "layer": [4, 6, 65, 66, 82, 85, 93, 96, 98, 159, 160, 163, 167, 171, 343], "cuda": [4, 99], "suit": [4, 36, 62, 67, 82, 96, 331], "gpu": [4, 93, 166], "acceler": [4, 27, 323], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 58, 66, 94, 96, 104, 136, 173, 174, 320, 325, 328, 334], "extend": [4, 9, 17, 23, 54, 73, 74, 76, 77, 78, 98, 103, 160, 168, 169, 257, 323, 334], "loader": [4, 22, 67, 89, 101, 112, 123, 316, 325, 339, 340], "mutabl": [4, 93], "io": [4, 27, 30, 33, 41, 93, 94, 102, 170, 173, 261, 318, 324, 327, 341], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 62, 81, 91, 93, 95, 101, 104, 161, 240, 242, 279, 311, 314, 324, 334], "sub": [4, 12, 14, 18, 78, 81, 90, 103, 163, 165, 323, 328], "helper": [4, 331], "thread": [4, 6, 31, 42, 65, 67, 82, 99, 172], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 48, 51, 56, 59, 66, 78, 85, 96, 101, 104, 172, 323, 334], "buffer": [4, 170], "sync": [4, 104, 170, 323], "serial": [4, 76, 77, 101, 173, 318, 323, 342], "vertex_map": [4, 13, 43, 44, 48, 152, 173, 318], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 43, 48, 51, 65, 66, 68, 71, 74, 76, 77, 82, 90, 91, 94, 96, 102, 159, 160, 161, 167, 169, 171, 172, 173, 174, 221, 230, 240, 242, 245, 264, 305, 310, 311, 323, 324, 325, 331], "map": [4, 6, 13, 43, 51, 56, 71, 74, 76, 78, 94, 101, 160, 169, 173, 303, 318, 324, 325, 339, 342], "intern": [4, 13, 43, 48, 51, 74, 94, 173, 211, 334, 336], "frame": [4, 96], "wrap": [4, 90, 93, 101, 106], "becaus": [4, 37, 66, 70, 74, 78, 96, 159, 162, 176, 306, 323, 324], "reli": [4, 9, 19, 53, 70, 72, 166, 323], "templat": [4, 9, 15, 28, 46, 58, 101, 323], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 39, 59, 62, 66, 70, 76, 78, 82, 85, 86, 87, 96, 165, 169, 172, 239, 262, 305, 311, 323, 325, 326], "multipl": [4, 6, 12, 14, 17, 29, 30, 41, 44, 45, 54, 55, 65, 66, 71, 73, 76, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 160, 161, 165, 176, 273, 311, 317, 322, 323, 326, 332], "label": [4, 6, 7, 13, 15, 20, 33, 50, 58, 65, 70, 71, 73, 74, 84, 88, 89, 91, 92, 94, 96, 101, 102, 103, 104, 112, 159, 162, 165, 171, 173, 176, 211, 215, 222, 226, 227, 229, 239, 240, 242, 243, 244, 245, 246, 288, 289, 311, 313, 314, 317, 318, 322, 324, 325, 338, 339, 342, 343], "cannot": [4, 27, 30, 48, 59, 73, 76, 78, 82, 96, 98, 101, 102, 106, 161, 173, 230, 269, 270, 317, 318, 324, 326, 337], "determin": [4, 37, 42, 66, 76, 78, 82, 85, 90, 94, 95, 101, 102, 161, 165, 256, 259, 260, 261, 318], "reason": [4, 59, 74, 76, 82, 160, 161, 291], "jit": 4, "technologi": [4, 64, 66, 97], "compil": [4, 15, 31, 32, 34, 42, 47, 51, 54, 56, 57, 59, 65, 66, 67, 71, 77, 91, 102, 114, 323, 324, 326, 332], "associ": [4, 6, 9, 29, 42, 43, 45, 55, 71, 76, 96, 245, 257, 303, 305, 311, 318, 323, 324], "runtim": [4, 6, 17, 23, 31, 47, 50, 51, 66, 91, 93, 94, 95, 101, 102, 106, 323, 336, 337], "wrapper": [4, 69, 77, 79, 81, 95, 101, 114, 120, 173, 174, 323], "facilit": [4, 20, 67, 76, 81, 82, 85, 96, 160, 323, 324], "task": [4, 6, 7, 14, 34, 37, 41, 66, 68, 78, 81, 82, 84, 86, 87, 88, 89, 91, 93, 94, 96, 160, 171, 323], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 47, 62, 64, 72, 81, 91, 97, 100, 106, 112, 159, 161, 163, 164, 165, 169, 175, 311, 318, 323, 324, 325, 334, 345], "jar": [4, 8, 22, 23, 35, 39, 102, 324, 334], "read": [4, 8, 20, 24, 37, 44, 54, 62, 69, 71, 75, 86, 90, 91, 92, 93, 159, 160, 165, 170, 171, 173, 209, 210, 309, 311, 312, 316, 318, 320, 322, 324, 342], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 46, 54, 65, 67, 68, 78, 83, 84, 91, 96, 97, 101, 102, 165, 169, 170, 317, 318, 322, 327, 334], "cmake": [4, 31, 32, 36, 59, 166], "script": [4, 32, 37, 98, 99, 130, 159, 160, 171, 174, 335], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 39, 43, 45, 48, 51, 53, 54, 55, 56, 57, 59, 67, 76, 77, 78, 87, 90, 91, 101, 102, 113, 114, 120, 121, 126, 151, 170, 171, 173, 230, 240, 242, 318, 320, 325, 331], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 66, 70, 78, 82, 85, 92, 94, 95, 96, 161, 163, 294, 320], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 43, 55, 62, 65, 68, 74, 76, 78, 80, 84, 90, 94, 95, 159, 160, 161, 165, 169, 214, 230, 250, 273, 307, 317, 324, 326, 328, 332], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 45, 53, 66, 70, 73, 74, 81, 82, 90, 92, 93, 94, 95, 96, 100, 165, 173, 181, 214, 262, 311, 320, 324, 327, 328, 332], "thei": [4, 6, 20, 24, 27, 30, 31, 62, 66, 70, 73, 78, 81, 87, 91, 94, 96, 98, 159, 160, 168, 173, 217, 225, 230, 258, 260, 261, 304, 305, 311, 317, 318, 320, 323, 324], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 41, 45, 48, 62, 65, 66, 68, 73, 76, 81, 85, 90, 91, 92, 93, 94, 95, 96, 101, 103, 163, 165, 173, 310, 311, 317, 326], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 65, 66, 74, 85, 91, 94, 96, 102, 164, 169, 228, 233, 234, 235, 238, 269, 328], "object": [4, 15, 38, 67, 68, 69, 76, 77, 78, 82, 85, 90, 91, 92, 94, 96, 99, 101, 113, 126, 138, 152, 160, 162, 163, 164, 165, 168, 171, 174, 175, 189, 209, 210, 268, 308, 311, 313, 314, 316, 317, 322, 324, 334, 344], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 45, 74, 76, 77, 78, 85, 96, 99, 104, 163, 164, 165, 168, 169, 314, 327, 342], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 47, 59, 66, 70, 91, 101, 169, 172, 318, 320], "state": [4, 6, 9, 10, 12, 24, 27, 34, 66, 81, 94, 95, 97, 99, 170, 173, 230, 233, 234, 235, 236, 238, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 265, 266, 267, 271, 303, 306, 308], "synchron": [4, 6, 10, 12, 14, 15, 91, 323], "explicitli": [4, 13, 101, 161, 230, 318, 324], "implicitli": [4, 112], "main": [4, 6, 30, 34, 37, 43, 54, 66, 73, 74, 77, 78, 98, 159, 168, 171, 176, 318, 324, 343, 344], "logic": [4, 6, 9, 14, 16, 17, 66, 76, 78, 81, 93, 95, 99, 162, 322, 323, 324, 332, 334], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 46, 50, 52, 54, 59, 65, 67, 70, 76, 77, 78, 82, 85, 90, 91, 93, 94, 95, 96, 160, 161, 162, 163, 164, 165, 170, 171, 173, 311, 314, 318, 320, 322, 323, 324, 325, 332, 344], "send": [4, 6, 10, 18, 24, 48, 67, 94, 104, 323, 334], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 48, 90, 91, 94, 96, 104, 165, 169, 320, 323, 334], "messagemanag": [4, 17, 334], "call": [4, 6, 12, 13, 16, 17, 19, 24, 50, 54, 55, 59, 74, 76, 78, 85, 101, 104, 159, 161, 165, 168, 169, 173, 174, 206, 220, 221, 251, 262, 291, 303, 311, 314, 318, 322, 323, 324], "encourag": [4, 6, 15, 24, 37], "fork": 4, "repo": [4, 29, 37, 67, 93, 324, 335, 336], "much": [4, 6, 13, 19, 22, 51, 59, 66, 76, 78, 161, 165, 323], "easier": [4, 32, 36, 37, 76, 93, 94, 95, 165, 318], "begin": [4, 15, 16, 30, 43, 58, 62, 70, 71, 75, 78, 92, 103, 104, 250, 317, 323], "small": [4, 9, 11, 13, 20, 54, 62, 78, 94, 95, 98, 176, 231, 232, 258, 301, 312, 318, 324], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 42, 51, 78, 91, 95, 96, 98, 99, 102, 119, 151, 160, 173, 176, 189, 311, 318, 324], "revis": [4, 14, 17, 99], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 71, 81, 82, 96, 98, 99, 110, 111, 161, 173, 178, 179, 189, 247, 248, 249, 251, 305, 311, 320, 342, 344], "gradual": 4, "avoid": [4, 13, 74, 77, 323, 324], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 45, 54, 59, 62, 65, 66, 68, 72, 77, 78, 79, 81, 82, 85, 86, 87, 91, 92, 93, 97, 98, 102, 146, 160, 161, 163, 165, 167, 171, 172, 185, 209, 210, 230, 265, 323, 334], "singl": [4, 6, 7, 11, 14, 15, 17, 20, 24, 27, 36, 37, 41, 45, 48, 53, 55, 59, 65, 71, 74, 76, 78, 83, 84, 86, 87, 91, 92, 94, 95, 102, 103, 159, 173, 184, 191, 213, 217, 222, 232, 237, 254, 260, 305, 307, 311, 318, 322, 326], "commit": [4, 99, 320], "python3": [4, 7, 23, 27, 28, 30, 31, 32, 35, 36, 41, 59, 67, 68, 83, 84, 92, 334, 335, 336, 337], "gsctl": [4, 32, 36, 41, 64, 67, 83, 335, 336], "py": [4, 15, 32, 36, 41, 67, 83, 159, 166, 171, 318, 324, 331, 334, 335, 336, 343], "cmakelist": 4, "txt": [4, 31, 35, 334], "artifact": [4, 17, 23, 29, 36, 46, 67, 83, 331], "grape_engin": [4, 38, 136, 332], "togeth": [4, 9, 10, 20, 41, 66, 78, 87, 91, 99, 165, 169, 212], "share": [4, 6, 30, 31, 37, 42, 45, 46, 78, 83, 91, 93, 94, 323, 325, 336], "bunch": [4, 41, 98, 101], "binari": [4, 15, 27, 31, 96, 331], "choos": [4, 6, 12, 22, 34, 41, 65, 66, 76, 78, 81, 82, 91, 96, 159, 160, 250, 251, 289], "prefix": [4, 31, 36, 37, 52, 59, 67, 76, 83, 173, 305, 323, 342], "usr": [4, 324], "look": [4, 15, 18, 20, 27, 42, 43, 48, 65, 78, 90, 106, 172, 317, 320, 324, 325], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 39, 42, 43, 45, 46, 48, 50, 51, 53, 54, 55, 56, 57, 59, 64, 65, 67, 70, 90, 101, 102, 110, 133, 159, 160, 166, 171, 173, 209, 210, 261, 311, 313, 318, 320, 324, 325, 331, 332, 334, 344], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 42, 43, 44, 46, 48, 51, 53, 54, 55, 66, 71, 74, 92, 98, 318], "correct": [4, 6, 14, 37, 38, 66, 70, 165, 173, 176, 323], "unit": [4, 66, 78, 95, 169, 259, 260, 261, 324], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 55, 59, 65, 68, 78, 81, 91, 92, 93, 95, 96, 98, 165, 167, 323], "graphscope_hom": [4, 23, 336], "pwd": [4, 30, 53, 171], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 39, 46, 53, 56, 68, 69, 72, 77, 83, 84, 90, 99, 166, 171, 336], "tmp": [4, 18, 19, 28, 38, 46, 65, 67, 133, 138, 171, 318, 324, 332, 334, 337], "gstest": [4, 19, 22, 23, 30, 334, 336], "against": [4, 14, 37, 67, 102, 293], "compar": [4, 19, 66, 71, 73, 74, 76, 78, 94, 99, 101, 102, 162, 230, 317], "ground": [4, 73, 96], "truth": [4, 96], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 54, 59, 64, 65, 66, 68, 72, 74, 76, 79, 81, 82, 85, 86, 87, 89, 91, 93, 94, 96, 97, 98, 102, 106, 159, 162, 164, 168, 170, 171, 175, 230, 233, 240, 242, 251, 258, 259, 260, 261, 262, 270, 324, 325], "broad": [6, 93], "spectrum": [6, 93, 176, 303], "central": [6, 15, 62, 81, 82, 92, 93, 96, 97, 102, 165, 176, 288, 323], "match": [6, 15, 42, 48, 50, 54, 66, 67, 68, 69, 70, 71, 73, 91, 92, 93, 102, 210, 230, 238, 240, 242, 269, 305, 342], "mine": [6, 15, 91, 93, 94], "philosophi": [6, 24, 93], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 51, 52, 54, 57, 65, 66, 67, 68, 69, 74, 77, 79, 81, 82, 89, 90, 91, 92, 93, 95, 104, 159, 160, 161, 163, 165, 168, 171, 230, 238, 250, 303, 324, 332, 344], "stronger": [6, 93], "flexibl": [6, 12, 13, 23, 42, 72, 73, 78, 81, 91, 92, 93, 318, 322], "flow": [6, 52, 93, 94, 159, 301], "oper": [6, 9, 12, 15, 30, 31, 36, 42, 53, 54, 55, 56, 59, 62, 64, 65, 66, 68, 72, 73, 74, 76, 81, 82, 85, 90, 91, 93, 94, 95, 96, 97, 102, 104, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 131, 132, 133, 135, 136, 139, 140, 141, 142, 160, 161, 162, 163, 164, 165, 167, 168, 170, 172, 173, 193, 272, 273, 311, 314, 316, 318, 320, 323, 324, 331], "arbitrari": [6, 76, 78, 93, 163, 238, 242, 258, 259, 260, 261, 311, 314, 324, 342], "beyond": [6, 24, 73, 93, 97, 271], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 41, 43, 50, 51, 54, 55, 64, 65, 66, 67, 69, 70, 71, 73, 76, 77, 78, 81, 83, 90, 93, 94, 95, 96, 99, 165, 166, 169, 171, 173, 189, 241, 305, 311, 318, 323, 324, 331, 335, 336], "divers": [6, 10, 12, 34, 45, 64, 66, 93, 94, 160, 320], "easi": [6, 7, 12, 54, 55, 62, 65, 66, 68, 69, 77, 78, 79, 81, 84, 85, 90, 91, 92, 93, 97, 160, 165, 169, 331], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 54, 59, 62, 71, 74, 76, 78, 81, 90, 91, 92, 93, 94, 95, 100, 104, 106, 159, 165, 169, 173, 174, 313, 314, 320, 323, 328, 334, 338], "few": [6, 29, 54, 59, 65, 93, 323], "satisfactori": [6, 93, 96], "major": [6, 12, 13, 14, 71, 94, 101], "recent": [6, 163, 324], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 59, 66, 73, 79, 82, 85, 90, 91, 93, 94, 95, 96, 97, 98, 102, 103, 152, 163, 165, 167, 169, 173, 174, 315, 318, 320, 322, 334, 339, 344], "focu": [6, 41, 91, 95, 98, 169], "hand": [6, 30, 33, 66, 74, 76, 291], "point": [6, 13, 14, 22, 37, 48, 66, 76, 85, 94, 159, 214, 239, 268, 271, 311, 324, 325, 326, 331], "breadth": [6, 102, 176], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 43, 44, 46, 51, 59, 62, 66, 67, 68, 69, 71, 76, 77, 78, 82, 86, 87, 90, 92, 93, 95, 96, 102, 103, 159, 160, 165, 167, 169, 173, 176, 180, 210, 226, 229, 238, 251, 254, 265, 266, 267, 268, 269, 272, 305, 310, 311, 314, 317, 318, 320, 323, 324, 325, 326], "search": [6, 37, 64, 70, 82, 91, 94, 96, 98, 102, 176, 340], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 62, 91, 94, 97, 99, 102, 103, 176, 314, 317, 334], "shortest": [6, 7, 19, 24, 66, 92, 94, 102, 176, 326], "leav": [6, 78, 173, 211, 221], "varieti": [6, 12, 34, 62, 91, 98], "suffer": [6, 62], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 45, 48, 50, 54, 55, 59, 62, 64, 70, 73, 74, 77, 78, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 106, 163, 165, 167, 244, 265, 322, 323, 325, 327], "limit": [6, 9, 13, 22, 45, 57, 59, 65, 69, 70, 71, 74, 79, 82, 94, 95, 96, 98, 99, 318, 337, 342], "phase": [6, 16, 23, 24, 160, 165], "propag": [6, 7, 9, 14, 36, 91, 92, 94, 96, 102, 165, 183, 273], "short": [6, 93, 98, 99, 191, 323, 324], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 76, 78, 96, 170, 230, 253, 324, 342], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 42, 48, 76, 81, 82, 91, 94, 96, 98, 166, 169, 311, 320, 324, 334, 335], "Such": [6, 13, 52, 95, 98, 133, 138, 270, 279], "abstract": [6, 62, 81, 85, 88, 91, 92, 93, 159, 160, 167, 169, 170, 325], "bring": [6, 41], "product": [6, 12, 32, 59, 85, 91, 95, 98, 104, 160, 161, 165, 331, 342], "sacrific": 6, "almost": [6, 22, 78, 246, 323], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 45, 46, 59, 78, 90, 92, 93, 98, 101, 103, 163, 165, 169, 170, 308, 317, 322, 324, 326, 327, 335, 337, 341], "At": [6, 12, 14, 15, 20, 34, 37, 66, 77, 78, 160, 170, 324, 326], "advanc": [6, 7, 15, 66, 84, 85, 93, 257], "pose": 6, "challeng": [6, 9, 61, 91, 323], "repres": [6, 9, 12, 15, 42, 44, 45, 62, 66, 70, 74, 78, 82, 84, 85, 88, 90, 91, 92, 93, 94, 96, 99, 101, 102, 103, 110, 137, 160, 161, 162, 163, 165, 169, 171, 173, 217, 250, 258, 259, 260, 261, 262, 270, 277, 280, 284, 292, 301, 303, 305, 306, 311, 315, 318, 323, 324], "non": [6, 9, 27, 76, 98, 101, 104, 162, 200, 201, 221, 240, 242, 245, 269, 273, 280, 298, 311, 312], "ones": [6, 9, 97, 102, 167], "distil": 6, "critic": [6, 13, 82, 102], "context": [6, 15, 17, 18, 20, 27, 31, 45, 74, 93, 95, 102, 104, 109, 110, 111, 117, 118, 133, 138, 141, 142, 144, 153, 156, 169, 173, 176, 301, 316, 318, 323, 331, 334], "fall": 6, "meet": [6, 15, 18, 37, 62, 66, 68, 85, 91, 96, 163, 164, 230, 259, 260, 261, 326, 328], "therefor": [6, 12, 15, 62, 66, 68, 70, 71, 74, 76, 78, 82, 92, 159, 160, 165, 257, 323, 332], "fulfil": [6, 15, 18, 54, 93], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 42, 43, 44, 46, 51, 59, 62, 74, 76, 78, 79, 84, 90, 94, 96, 97, 160, 161, 176, 311, 320, 323, 331, 332], "must": [6, 13, 24, 27, 30, 37, 43, 44, 45, 50, 55, 56, 59, 65, 76, 78, 91, 101, 103, 112, 160, 161, 163, 164, 165, 173, 175, 176, 189, 228, 230, 238, 241, 251, 253, 255, 258, 260, 262, 270, 273, 309, 311, 313, 317, 323, 324], "race": 6, "schedul": [6, 23, 36, 91, 93, 318], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 41, 42, 43, 59, 65, 66, 67, 70, 71, 74, 78, 90, 101, 102, 103, 120, 136, 161, 173, 230, 242, 254, 258, 268, 271, 289, 305, 311, 314, 317, 318, 323, 324, 328, 331], "so": [6, 12, 13, 30, 37, 41, 45, 53, 59, 65, 66, 68, 72, 77, 78, 82, 85, 87, 90, 91, 93, 102, 106, 159, 165, 167, 186, 221, 226, 239, 240, 241, 244, 259, 260, 261, 272, 305, 311, 323, 324, 338], "middlewar": 6, "flashwar": 6, "hide": [6, 62], "automat": [6, 9, 12, 14, 34, 42, 44, 54, 55, 65, 66, 69, 74, 77, 81, 90, 91, 94, 95, 96, 98, 103, 171, 173, 311, 324, 326, 327, 344], "adapt": [6, 22, 42, 54, 66, 96, 98, 99, 326, 327], "70": [6, 15, 342], "40": [6, 15, 99, 161, 162, 164, 238, 304], "commonli": [6, 71, 76, 81, 85, 90], "now": [6, 7, 20, 23, 27, 43, 46, 48, 54, 65, 67, 70, 71, 73, 77, 78, 84, 102, 169, 242, 324, 326, 339], "succinct": [6, 74], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 48, 59, 62, 64, 66, 78, 79, 80, 82, 85, 91, 94, 95, 96, 97, 98, 101, 106, 161, 162, 163, 165, 166, 167, 168, 311, 318, 328], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 51, 56, 70, 76, 78, 90, 94, 95, 169, 173, 323, 325, 331, 335], "demonstr": [6, 16, 42, 65, 66, 73, 81, 86, 88, 91, 92, 94, 96, 98, 103, 159, 171, 173, 318, 323], "up": [6, 13, 20, 23, 37, 51, 70, 76, 78, 81, 83, 85, 97, 104, 169, 172, 210, 214, 238, 305, 323, 324, 341], "92": [6, 176], "bulk": [6, 15], "bsp": [6, 15], "paradigm": [6, 15, 81, 85, 91, 159, 165], "primari": [6, 15, 43, 44, 45, 54, 57, 74, 91, 98, 324], "constitut": [6, 88, 90], "superstep": [6, 16, 17, 24, 104], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 44, 45, 48, 50, 54, 55, 65, 78, 90, 93, 94, 95, 99, 110, 160, 162, 165, 173, 217, 220, 230, 233, 234, 235, 236, 238, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 265, 266, 267, 271, 301, 303, 306, 308, 313, 323], "maintain": [6, 10, 14, 35, 36, 44, 73, 74, 76, 91, 94, 95, 324], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 45, 50, 55, 66, 67, 82, 102, 104, 161, 162, 165, 171, 173, 174, 176, 206, 311, 318, 324, 331], "describ": [6, 27, 36, 37, 38, 45, 46, 55, 59, 65, 67, 78, 82, 83, 91, 95, 96, 103, 160, 163, 165, 170, 171, 210, 214, 230, 231, 232, 235, 240, 242, 243, 268, 269, 282, 289, 291, 305, 307, 308, 319, 322, 323, 324, 332, 337], "vsize": [6, 15], "size_t": [6, 13, 58, 101, 104, 170, 320, 323], "vertexmap": [6, 13, 15, 58], "condit": [6, 9, 14, 24, 27, 38, 42, 66, 73, 78, 85, 93, 95, 99, 230, 259, 260, 261, 269, 270, 323], "f": [6, 20, 33, 46, 65, 67, 84, 89, 92, 165, 176, 263, 264, 310, 324, 332, 338], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 62, 65, 67, 70, 73, 74, 76, 78, 82, 84, 85, 88, 91, 92, 96, 99, 101, 130, 138, 146, 159, 165, 167, 171, 173, 174, 258, 260, 262, 303, 315, 317, 324, 334, 335, 338, 343], "form": [6, 20, 66, 72, 74, 76, 78, 82, 85, 95, 96, 102, 159, 161, 162, 165, 212, 232, 262, 277, 279, 282, 285, 289, 311, 317], "special": [6, 20, 54, 57, 73, 78, 91, 160, 279, 295, 305, 328], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 65, 66, 68, 78, 84, 92, 102, 103, 176, 186, 217, 221, 223, 234, 240, 242, 244, 246, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 290, 299, 303, 304, 308, 311, 334], "omit": [6, 55, 90, 103, 184, 325, 344], "filter": [6, 15, 23, 42, 66, 73, 79, 90, 95, 102, 103, 303, 317, 323, 342], "semant": [6, 66, 85, 164, 323], "unchang": 6, "edgemap": [6, 15], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 43, 45, 54, 57, 58, 59, 65, 67, 68, 70, 71, 78, 82, 83, 85, 90, 92, 94, 95, 96, 98, 101, 102, 103, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 158, 161, 162, 163, 164, 165, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 315, 317, 318, 320, 322, 323, 324, 326, 331, 334, 335, 336, 342, 344], "satisfi": [6, 9, 24, 32, 54, 68, 78, 95, 98, 102, 106, 170, 176, 228, 258, 262, 269, 270, 328], "h": [6, 9, 15, 16, 20, 36, 41, 48, 56, 82, 83, 99, 110, 176, 187, 190, 211, 238, 242, 258, 303, 310, 311, 323, 335, 340], "conduct": [6, 15, 78, 99, 165], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 42, 43, 51, 54, 62, 65, 66, 70, 71, 73, 74, 76, 78, 79, 80, 81, 85, 90, 91, 92, 94, 95, 96, 97, 98, 160, 165, 235, 240, 242, 245, 250, 253, 258, 303, 311, 320, 323, 328, 331], "dynam": [6, 12, 34, 51, 52, 54, 66, 81, 91, 93, 94, 96, 102, 113, 126, 231, 232, 314, 320, 324], "even": [6, 8, 20, 66, 70, 78, 93, 94, 167, 173, 176, 240, 250, 268, 270, 271, 311, 323], "virtual": [6, 9, 23, 45, 68, 70, 92, 101, 169, 170], "gener": [6, 9, 13, 14, 17, 27, 34, 41, 45, 51, 55, 62, 64, 66, 72, 74, 76, 78, 82, 85, 90, 91, 92, 93, 94, 96, 102, 111, 159, 160, 161, 165, 171, 173, 175, 176, 311, 312, 316, 318, 320, 322, 323, 324, 325, 326, 332], "index": [6, 12, 13, 31, 43, 44, 48, 58, 64, 82, 85, 90, 96, 101, 102, 103, 161, 162, 170, 173, 175, 176, 185, 209, 210, 240, 242, 243, 244, 246, 323, 340, 344], "pre": [6, 29, 32, 50, 59, 66, 73, 78, 84, 88, 92, 95, 318, 337], "conveni": [6, 29, 59, 65, 70, 78, 82, 93, 165, 309, 311], "revers": [6, 20, 71, 78, 119, 122, 175, 176, 254, 262, 311], "exchang": [6, 14], "chosen": [6, 240, 247, 248, 249, 250, 251, 262, 266, 306], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 91, 209, 210, 246, 323, 328, 334], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 51, 59, 65, 94, 166, 169, 318, 324, 336], "mode": [6, 15, 27, 32, 36, 46, 59, 77, 86, 90, 101, 102, 103, 152, 159, 163, 169, 171, 173, 313, 318, 328, 332, 344], "push": [6, 12, 34, 37, 42, 66, 73, 94, 169], "anoth": [6, 9, 10, 20, 36, 45, 66, 76, 78, 90, 91, 92, 96, 104, 240, 273, 311, 323, 326, 327], "final": [6, 9, 13, 14, 17, 19, 24, 66, 70, 78, 82, 87, 91, 95, 101, 159, 165, 167, 253, 273, 311, 325], "reduc": [6, 9, 13, 14, 15, 17, 54, 66, 70, 73, 77, 85, 160, 163, 259, 260, 261, 311, 324], "commut": 6, "alwai": [6, 53, 78, 87, 103, 207, 208, 247, 249, 268, 271, 305, 323, 331], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 53, 54, 73, 76, 85, 90, 93, 95, 98, 162, 165, 170, 176, 195, 196, 238, 240, 242, 257, 268, 311, 313, 318, 323], "sometim": [6, 27, 78, 90, 221, 281], "similarli": [6, 19, 20, 45, 67, 78, 94, 176, 214, 240, 242, 258, 261, 268, 311, 332], "suppli": [6, 59, 74, 260], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 46, 48, 50, 55, 56, 65, 73, 78, 102, 163, 165, 168, 171, 176, 186, 231, 232, 240, 242, 243, 245, 246, 247, 249, 254, 258, 259, 260, 261, 262, 265, 302, 311, 313, 318], "auxiliari": [6, 15, 16, 78], "union": [6, 173, 239, 339], "minu": [6, 76, 214], "intersect": [6, 95, 312], "add": [6, 15, 19, 20, 23, 29, 33, 37, 59, 73, 78, 90, 92, 101, 104, 111, 112, 121, 160, 171, 173, 178, 179, 180, 230, 237, 250, 268, 271, 273, 289, 311, 314, 318, 323, 324, 335, 338, 339, 344], "getv": [6, 66], "besid": [6, 10, 38, 170, 171], "combin": [6, 14, 18, 34, 64, 66, 78, 81, 91, 92, 95, 159, 160, 161, 165, 311, 318, 327, 334], "primit": [6, 43, 93], "natur": [6, 12, 13, 24, 45, 62, 74, 78], "multi": [6, 31, 64, 74, 78, 81, 82, 85, 91, 93, 95, 96, 97, 98, 102, 163, 165, 167, 320, 324], "tradit": [6, 66, 70, 72, 73, 74, 96, 288], "awkward": 6, "supplement": 6, "perspect": [6, 24, 93], "whole": [6, 9, 12, 24, 34, 54, 65, 66, 78, 82, 91, 93, 95, 96, 167, 324, 327], "pick": [6, 78, 99, 253, 268, 271], "transfer": [6, 62, 64, 81, 95, 97, 342], "intuit": [6, 54, 66, 74, 81, 95, 318], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 54, 64, 66, 71, 78, 81, 82, 85, 90, 91, 94, 96, 97, 99, 103, 159, 165, 167, 169, 170, 176, 217, 311, 317, 318, 323, 324], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 50, 66, 68, 78, 84, 85, 94, 96, 99, 160, 161, 162, 165, 171], "input": [6, 9, 12, 13, 15, 17, 22, 24, 43, 44, 48, 55, 56, 62, 82, 84, 85, 88, 90, 91, 92, 95, 96, 102, 121, 125, 146, 159, 160, 161, 162, 163, 165, 168, 171, 174, 176, 244, 258, 260, 262, 268, 269, 303, 311, 314, 315, 318, 323, 324, 338, 343], "second": [6, 13, 27, 44, 46, 54, 62, 71, 78, 82, 90, 95, 98, 99, 103, 167, 256, 257, 265, 266, 267, 268, 272, 310, 311, 318, 324, 325], "fundament": [6, 9, 45, 66, 93], "modul": [6, 8, 9, 15, 19, 20, 23, 64, 66, 70, 76, 81, 91, 92, 93, 95, 96, 172, 310, 340], "produc": [6, 38, 41, 43, 66, 99, 102, 111, 159, 171, 173, 174, 176, 230, 244, 246, 254, 315, 324], "abil": [6, 12, 34, 50, 70, 74, 78, 85, 91, 324], "activ": [6, 9, 23, 24, 30, 50, 55, 68, 87, 92, 96, 171, 318], "dens": [6, 82, 94, 96, 162, 171], "spars": [6, 13, 82, 96, 159, 162, 238, 311, 314], "dispatch": [6, 34, 91, 101], "kernel": [6, 247], "auto": [6, 14, 16, 34, 58, 78, 104, 320, 323, 325], "switch": [6, 12, 23, 34, 48, 77, 94, 268, 271, 323, 331], "prove": [6, 24, 303], "world": [6, 9, 13, 62, 76, 78, 91, 92, 94, 101, 176, 231, 232, 258], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 45, 70, 73, 76, 78, 90, 93, 161, 162, 163, 169, 170, 173, 237, 244, 249, 257, 258, 262, 268, 311, 317, 320, 323], "co": [6, 23, 62, 92, 160, 338], "lead": [6, 17, 24, 59, 78, 96, 240, 242], "master": [6, 19, 22, 23, 24, 31, 54, 334], "broadcast": [6, 101, 323], "mirror": [6, 7, 10, 24, 27, 32, 68, 83, 84], "On": [6, 27, 30, 37, 54, 66, 74, 76, 102, 245, 308, 323], "contrari": 6, "total": [6, 8, 12, 34, 62, 66, 67, 77, 78, 104, 186, 230, 253, 270, 276, 311, 325, 338], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 46, 59, 66, 67, 69, 72, 73, 74, 76, 77, 78, 89, 92, 99, 110, 159, 161, 162, 164, 165, 166, 176, 182, 187, 189, 190, 195, 196, 214, 216, 217, 226, 234, 237, 239, 246, 255, 257, 262, 271, 278, 281, 282, 288, 289, 295, 297, 304, 305, 306, 311, 313, 314, 318, 323, 324, 325, 326, 327, 334, 337, 338, 342], "redund": [6, 55, 73], "programm": [6, 17, 91, 106], "scope": [6, 23, 37, 48, 93, 173], "disabl": [6, 31, 42, 48, 51, 54, 56, 57, 67, 70, 99, 318], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 54, 57, 62, 66, 67, 72, 73, 74, 78, 79, 80, 81, 82, 83, 91, 94, 95, 96, 98, 106, 163, 165, 166, 167, 169, 230, 323, 331], "katz": [6, 102, 176], "eigenvector": [6, 102, 176, 303], "harmon": 6, "coeffici": [6, 19, 102, 176], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 42, 43, 45, 51, 59, 68, 70, 74, 76, 77, 84, 91, 93, 98, 99, 102, 166, 173, 231, 232, 247, 249, 262, 268, 289, 311, 320, 322, 323, 324, 331, 334, 337], "color": [6, 19, 20, 78, 311], "biconnect": 6, "bridg": [6, 64, 93], "seven": [6, 171, 210], "strongli": [6, 36, 68, 70, 78, 165, 250], "cut": [6, 12, 24, 296], "k": [6, 20, 37, 58, 67, 78, 82, 91, 92, 93, 95, 102, 103, 163, 176, 213, 221, 231, 232, 233, 234, 236, 238, 239, 240, 247, 250, 259, 260, 261, 263, 266, 267, 268, 269, 270, 271, 276, 311, 317, 323, 338, 342], "decomposit": [6, 92, 176], "degeneraci": 6, "onion": 6, "minim": [6, 11, 94, 171, 262, 263, 284, 310], "domin": [6, 176, 323], "cycl": [6, 93, 95, 98, 101, 178, 214, 215, 218, 229, 251, 255, 276, 278, 294, 298], "triangl": [6, 33, 78, 92, 95, 102, 176, 273, 277, 281, 285, 297, 312, 334, 338], "acycl": [6, 93, 305], "cyclic": [6, 91, 93, 95, 218], "diamond": [6, 281], "rectangl": 6, "tail": [6, 65, 70, 76, 78, 93, 332], "approxim": [6, 230, 303], "densest": 6, "articlerank": 6, "hyperlink": [6, 102, 176], "induc": [6, 74, 76, 102, 124, 187, 190, 206, 254, 311], "topic": [6, 7, 68, 84, 92, 102, 324], "person": [6, 7, 30, 33, 43, 44, 45, 48, 50, 65, 68, 70, 73, 74, 76, 78, 90, 92, 173, 291, 300, 311, 314, 317, 323, 324, 325, 339, 344], "standard": [6, 35, 51, 64, 66, 73, 78, 79, 90, 93, 174, 244, 259, 260, 261, 323], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 78, 226, 229, 254], "four": [6, 9, 12, 20, 88, 92, 93, 101, 159, 162, 171, 258, 262, 323], "random": [6, 28, 31, 85, 87, 91, 99, 163, 164, 165, 168, 171, 212, 223, 230, 233, 234, 235, 236, 238, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 271, 303, 306, 308, 310, 318], "give": [7, 12, 13, 31, 34, 44, 68, 78, 84, 90, 99, 165, 173, 238, 258, 278, 310, 311], "quick": [7, 68, 84, 324, 341], "ll": [7, 13, 20, 29, 43, 44, 84], "pip": [7, 27, 30, 31, 32, 59, 65, 68, 84, 92, 169, 324, 337, 341], "upgrad": [7, 23, 32, 68, 84, 341], "occur": [7, 9, 14, 32, 59, 76, 84, 324], "veri": [7, 13, 32, 62, 66, 68, 78, 81, 84, 90, 92, 96, 161, 163, 334], "speed": [7, 32, 54, 57, 78, 83, 84, 93, 172, 238, 311], "try": [7, 17, 23, 32, 36, 41, 57, 59, 62, 68, 77, 83, 84, 87, 88, 92, 100, 102, 189, 230, 314, 318, 338], "site": [7, 32, 68, 84], "aliyun": [7, 27, 32, 68, 83, 84, 99, 318, 335], "pypi": [7, 27, 32, 59, 68, 69, 84, 337], "trust": [7, 27, 32, 68, 84], "host": [7, 15, 17, 22, 23, 27, 28, 32, 44, 48, 51, 62, 67, 68, 70, 77, 84, 90, 99, 101, 102, 103, 314, 318, 334, 342, 344], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 53, 59, 65, 68, 84, 92, 169, 258, 260, 311, 314, 324, 331, 336], "everyth": [7, 84, 92, 323], "job": [7, 13, 23, 62, 66, 84, 91, 92, 93, 97, 101, 136, 160, 318, 324], "modern_graph": [7, 30, 33, 44, 46, 48, 65, 68, 92, 325, 331], "gremlin": [7, 29, 33, 42, 46, 57, 59, 62, 65, 66, 67, 68, 73, 75, 79, 82, 85, 91, 92, 93, 97, 98, 100, 130, 165, 174, 318, 324, 332, 337, 338, 340, 345], "apach": [7, 17, 22, 23, 31, 51, 52, 54, 64, 73, 74, 77, 80, 81, 91, 92, 95, 322, 324, 328, 334, 336, 340], "tinkerpop": [7, 51, 52, 54, 62, 64, 65, 67, 68, 77, 81, 92, 93, 174, 324, 340], "org": [7, 17, 23, 59, 69, 77, 84, 87, 88, 92, 94, 102, 176, 234, 235, 236, 250, 253, 260, 273, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 295, 296, 297, 298, 303, 324, 334, 337, 338, 342], "doc": [7, 16, 17, 30, 37, 92, 93, 101, 105, 107, 173, 260, 341], "tutori": [7, 8, 12, 14, 24, 65, 67, 68, 75, 81, 86, 90, 92, 94, 96, 171, 260, 328], "trigger": [7, 14, 15, 18, 37, 85, 92, 112, 326, 331], "ret": [7, 18, 77, 92, 334, 339], "selector": [7, 15, 33, 38, 92, 101, 103, 111, 117, 118, 128, 129, 133, 141, 142, 173, 316, 318, 334, 339], "homogen": [7, 82, 90, 92, 96, 161], "pg": [7, 92, 102, 318, 323], "none": [7, 9, 20, 27, 31, 71, 87, 89, 90, 92, 102, 103, 110, 117, 118, 121, 124, 128, 129, 130, 131, 133, 136, 138, 141, 142, 146, 152, 154, 158, 159, 160, 165, 173, 174, 175, 176, 184, 188, 190, 191, 195, 196, 205, 206, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 303, 305, 306, 308, 311, 313, 314, 315, 318, 323, 324, 339, 343, 344], "know": [7, 8, 30, 33, 38, 44, 45, 48, 65, 73, 75, 76, 78, 86, 90, 92, 95, 160, 161, 169, 173, 324, 325, 339, 342, 344], "src": [7, 13, 15, 16, 17, 18, 30, 34, 58, 62, 74, 77, 84, 85, 88, 90, 92, 102, 103, 110, 159, 161, 173, 317, 320, 323, 324, 326, 334, 338, 343, 344], "our": [7, 12, 13, 17, 32, 34, 36, 37, 41, 42, 44, 45, 51, 62, 66, 71, 73, 74, 83, 92, 94, 95, 96, 98, 99, 100, 166, 167, 176, 324, 326, 334], "learn": [7, 27, 32, 36, 37, 38, 41, 54, 62, 66, 68, 81, 85, 86, 87, 93, 94, 97, 100, 154, 160, 163, 164, 165, 166, 169, 171, 316, 318, 338, 340], "technic": [7, 84, 167, 305, 311], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 57, 59, 62, 67, 78, 91, 97, 161, 171, 318, 324], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 54, 62, 65, 67, 72, 77, 78, 79, 81, 82, 91, 92, 93, 94, 96, 97, 98, 161, 163, 165, 167, 172, 240, 251, 258, 310, 323], "usag": [7, 17, 31, 32, 36, 37, 48, 53, 76, 78, 79, 83, 84, 85, 103, 162, 163, 164, 168, 173, 230, 311, 318, 324, 325], "section": [8, 13, 27, 29, 42, 44, 45, 55, 56, 75, 78, 82, 86, 91, 165, 166, 173, 210, 323, 324], "assum": [8, 23, 27, 30, 53, 65, 75, 78, 86, 92, 160, 173, 209, 270, 309, 311, 318, 323, 338], "getting_start": [8, 42, 53, 75, 86], "most": [8, 9, 13, 15, 22, 33, 38, 45, 54, 59, 66, 70, 71, 73, 76, 78, 82, 90, 92, 94, 96, 98, 99, 103, 159, 161, 165, 167, 169, 173, 231, 232, 256, 259, 260, 261, 324], "suffici": [8, 17, 59, 91, 160], "louvain": [8, 94, 102, 334], "social": [8, 45, 62, 67, 78, 91, 94, 96, 99, 238, 288, 303, 312], "scientist": [8, 81, 98], "familiar": [8, 14, 16, 29, 66], "manipul": [8, 11, 19, 20, 54, 78, 81, 95, 98, 100, 101, 311], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 47, 54, 55, 90, 101, 163, 164, 168, 318, 334], "pydata": [8, 97], "eco": 8, "still": [8, 24, 27, 34, 38, 62, 78, 94, 189, 318, 323, 324], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 54, 62, 70, 73, 74, 76, 78, 80, 82, 85, 90, 96, 101, 160, 163, 165, 166, 167, 168, 303, 311, 314, 318, 324, 328], "migrat": [8, 66, 84, 87, 88, 92, 93, 98, 320, 338], "transpar": [8, 91], "don": [8, 17, 23, 30, 33, 36, 37, 59, 65, 78, 112, 205, 311, 324], "autom": [9, 29, 93], "abl": [9, 24, 27, 51, 65, 93, 164, 268, 323, 324], "batch": [9, 12, 19, 44, 67, 77, 82, 85, 89, 93, 96, 159, 162, 164, 165, 167, 169, 171, 175, 324, 343], "counterpart": [9, 73, 81, 93], "redesign": [9, 93], "underli": [9, 62, 66, 78, 93, 167, 323], "equip": [9, 80, 81, 93, 99, 328], "polici": [9, 59, 93, 101, 318], "memori": [9, 12, 23, 24, 27, 34, 45, 48, 54, 59, 62, 64, 74, 77, 81, 83, 86, 87, 91, 93, 94, 96, 97, 98, 99, 159, 160, 161, 167, 171, 173, 311, 318, 324, 327, 336, 337], "todai": 9, "static": [9, 16, 31, 77, 101, 324, 326], "recomput": 9, "costli": 9, "consum": [9, 59, 96, 167, 170], "especi": [9, 90], "trillion": 9, "commerc": [9, 91, 94], "constantli": 9, "issu": [9, 17, 32, 37, 59, 62, 65, 68, 77, 93, 94, 98, 234, 235, 236, 300, 337], "involv": [9, 13, 37, 41, 42, 54, 62, 66, 78, 82, 85, 91, 94, 95, 96, 97, 98], "adjust": [9, 12, 42, 43, 59], "old": [9, 12, 14, 32, 34, 70, 318], "typic": [9, 24, 42, 51, 54, 62, 74, 76, 78, 91, 94, 95, 98, 160, 165, 240, 311, 317, 323], "often": [9, 37, 45, 54, 62, 65, 77, 91, 94, 95, 96, 98, 161, 162, 165, 311, 324, 332], "overlap": [9, 318], "intervent": 9, "burden": [9, 15, 161], "expert": 9, "light": 9, "overal": [9, 96], "verifi": [9, 27, 38, 62, 65, 67, 71, 99, 165], "characterist": [9, 74, 85, 91, 96, 159, 164], "deduc": [9, 173, 344], "appropri": [9, 27, 41, 44, 66, 82, 91, 96, 159], "record": [9, 13, 54, 65, 68, 69, 70, 78, 92, 170, 320, 324], "part": [9, 13, 37, 62, 66, 76, 82, 85, 93, 165, 166, 169, 171, 294, 311, 323, 324], "intermedi": [9, 12, 17, 54, 66, 73, 78, 81, 91, 93], "deliv": [9, 342], "There": [9, 10, 12, 34, 37, 38, 43, 59, 65, 66, 73, 78, 92, 94, 95, 96, 102, 161, 164, 165, 167, 311, 317, 318, 323, 324], "reshap": [9, 171], "eas": [9, 12, 34, 68, 96, 98, 99], "achiev": [9, 12, 20, 24, 27, 34, 54, 78, 91, 94, 99, 320], "decid": [9, 161, 258], "due": [9, 59, 91, 98, 165], "among": [9, 66, 78, 91, 98, 101, 170, 176, 305, 324], "fetch": [9, 15, 17, 318, 324, 334], "suffic": 9, "replai": [9, 85, 93, 320, 324], "affect": [9, 13, 30, 36, 37, 73, 311], "area": [9, 15, 54, 70, 262, 308], "readili": 9, "obtain": [9, 14, 17, 29, 30, 66, 67, 69, 73, 77, 81, 82, 85, 88, 92, 96, 160, 164, 165, 167, 286, 289, 305, 311, 318, 324], "simpli": [9, 17, 20, 42, 55, 65, 70, 78, 90, 92, 165, 233, 237, 311], "coincid": 9, "idea": [9, 37, 82, 96, 106, 167], "invalid": [9, 73, 173, 318], "miss": [9, 37, 163, 173, 221, 318], "comparison": [9, 19, 71, 76, 78, 81, 98, 99], "those": [9, 29, 45, 48, 54, 65, 67, 70, 71, 74, 78, 90, 100, 163, 173, 176, 187, 216, 218, 220, 311, 313, 317], "although": [9, 12, 14, 22, 34, 50, 54, 62, 92, 106, 210, 323, 324], "solut": [9, 31, 46, 54, 59, 95, 96, 98, 176, 337], "enough": [9, 85, 160, 163, 230, 318, 322], "caus": [9, 14, 22, 32, 37, 59, 77, 84, 96, 161, 167, 173, 210], "overwhelm": 9, "overhead": [9, 13, 98, 160, 161], "mf": 9, "delta": [9, 12, 13, 33, 37, 102, 173], "php": 9, "mp": 9, "cc": [9, 323, 339], "sswp": 9, "mv": [9, 70], "track": 9, "gcn": [9, 81, 85, 96, 100, 159, 163, 167, 171, 338, 340, 343, 345], "commnet": 9, "me": 9, "keep": [9, 78, 85, 104, 165, 173, 268, 271, 324], "graphsag": [9, 81, 85, 92, 96, 100, 159, 163, 165, 167, 171, 340, 343, 345], "gin": [9, 96], "vldb": [9, 334, 340], "paper": [9, 14, 24, 82, 84, 87, 88, 89, 91, 92, 93, 99, 171, 176, 308, 318, 334, 338], "publish": [9, 14, 24, 29, 73, 91, 92], "2021": [9, 93], "denot": [9, 50, 52, 54, 76, 78, 164, 239, 324], "w": [9, 48, 77, 102, 176, 238, 244, 258, 261, 263, 268, 271, 273, 301, 311, 313, 324, 342], "respect": [9, 16, 38, 55, 64, 66, 71, 76, 90, 91, 92, 95, 96, 102, 121, 138, 146, 162, 165, 176, 217, 230, 277, 311, 317, 323, 324], "initi": [9, 16, 18, 19, 42, 43, 44, 56, 67, 78, 89, 94, 96, 101, 160, 161, 171, 173, 175, 176, 250, 252, 253, 311, 314, 324, 328, 334], "init_v": 9, "init_m": 9, "aggreg": [9, 66, 71, 79, 96, 104, 159, 165, 167, 171, 323, 342], "vector": [9, 58, 82, 88, 92, 96, 101, 104, 159, 167, 169, 176, 258, 262], "element": [9, 13, 45, 71, 76, 78, 94, 101, 160, 163, 165, 173, 176, 206, 238, 283, 305, 317, 318, 323], "specifi": [9, 16, 17, 20, 23, 24, 30, 36, 42, 43, 44, 45, 48, 50, 51, 54, 55, 56, 65, 71, 74, 76, 81, 85, 92, 94, 102, 104, 110, 117, 118, 128, 129, 133, 137, 141, 142, 158, 159, 160, 162, 165, 168, 173, 175, 176, 187, 195, 196, 217, 230, 240, 242, 243, 246, 247, 254, 258, 259, 260, 261, 262, 268, 271, 273, 276, 289, 308, 311, 313, 317, 318, 324, 325, 331], "addition": [9, 12, 14, 36, 45, 70, 82, 88, 91, 93, 95, 98, 167, 176, 323, 332], "correspond": [9, 10, 13, 15, 17, 18, 37, 41, 48, 66, 70, 74, 76, 78, 81, 85, 90, 95, 98, 102, 136, 159, 160, 161, 162, 164, 165, 169, 173, 176, 209, 210, 240, 242, 243, 244, 245, 246, 258, 304, 305, 307, 311, 313, 314, 320, 324, 332], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 58, 101, 320, 323, 324, 325, 334], "m1": [9, 59, 68, 212, 337, 341], "m2": [9, 212], "below": [9, 10, 12, 20, 34, 35, 36, 37, 44, 48, 50, 51, 76, 85, 91, 92, 94, 95, 96, 99, 160, 163, 165, 168, 171, 210, 240, 242, 276, 311, 318, 324], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 92, 99, 101, 169, 324, 334, 338], "dbl_max": 9, "backend": [9, 27, 29, 81, 84, 91, 92, 96, 173, 311, 318, 325, 338], "seamless": [9, 50, 62, 97, 324], "block": [9, 59, 66, 162, 238, 324], "spawn": 9, "adopt": [9, 42, 54, 55, 98, 163, 324], "csc": [9, 322], "csr": [9, 13, 58, 173, 322, 325], "sent": [9, 10, 14, 16, 24, 48, 77], "mainten": [9, 323], "preserv": [9, 13, 55, 73, 103, 173, 273, 303], "effect": [9, 36, 37, 42, 54, 55, 62, 73, 76, 77, 85, 91, 96, 163, 242, 311, 324], "readi": [9, 30, 32, 37, 48, 54, 59, 62, 67, 77, 91, 161, 163, 318, 324, 332], "accept": [9, 42, 51, 176, 258, 262, 324, 325], "insert": [9, 14, 45, 66, 131, 324], "newli": [9, 41, 42], "particular": [9, 37, 71, 76, 102, 162, 165, 240], "incid": [9, 20, 74, 76, 78, 187, 188, 230, 252, 301, 311], "encod": [9, 13, 71, 74, 102, 160, 165, 171, 173, 175, 313, 324, 343], "dummi": 9, "furthermor": [9, 77, 78, 81, 91, 98], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 85, 93, 94, 165], "cancel": [9, 48], "compens": 9, "whose": [9, 24, 70, 78, 163, 165, 176, 181, 201, 283, 287, 303, 305, 306, 322, 323], "proce": [9, 51, 230, 324], "inner": [10, 13, 16, 58, 78, 79, 104, 173, 323], "outer": [10, 14, 58, 71, 104, 226, 323], "cross": [10, 74, 106, 286], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 45, 46, 50, 51, 54, 55, 59, 65, 74, 78, 87, 91, 92, 94, 95, 99, 101, 102, 103, 110, 112, 114, 130, 137, 154, 162, 173, 211, 213, 214, 216, 218, 220, 221, 223, 225, 226, 229, 240, 242, 243, 245, 247, 248, 249, 251, 255, 256, 257, 263, 264, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 306, 313, 318, 323, 332], "5": [10, 13, 19, 20, 31, 59, 67, 72, 76, 78, 84, 85, 87, 88, 89, 92, 95, 99, 159, 162, 164, 165, 166, 168, 171, 176, 182, 187, 189, 195, 214, 217, 230, 234, 235, 236, 238, 239, 247, 249, 256, 257, 258, 259, 261, 262, 276, 277, 279, 280, 281, 282, 284, 285, 288, 290, 292, 294, 295, 301, 306, 311, 317, 318, 324, 326, 332, 337, 338, 342], "9": [10, 31, 65, 68, 76, 78, 92, 160, 176, 214, 216, 262, 280, 288, 301, 306, 341], "12": [10, 20, 32, 59, 68, 78, 99, 102, 160, 161, 162, 164, 166, 178, 179, 180, 216, 278, 279, 283, 287, 291, 297, 335, 337, 341, 342], "split": [10, 44, 73, 76, 78, 87, 88, 89, 160, 161, 318, 324], "roughli": 10, "across": [10, 14, 34, 35, 36, 46, 51, 54, 73, 74, 91, 93, 94, 98, 323, 325], "divid": [10, 71, 78, 82, 91, 102, 160, 163, 167, 168, 176, 322], "place": [10, 18, 19, 36, 43, 44, 65, 78, 169, 170, 173, 238, 258, 259, 260, 261, 262, 291, 309], "itself": [10, 20, 22, 37, 76, 78, 82, 90, 91, 104, 159, 161, 317, 318, 323], "replic": [10, 67, 252], "resid": [10, 14, 38], "j": [10, 31, 58, 102, 171, 176, 209, 210, 231, 232, 240, 242, 243, 245, 251, 262, 265, 266, 267, 289, 323], "outcom": 10, "outgo": [10, 13, 16, 24, 45, 73, 76, 78, 95, 104, 165, 176, 311, 323], "incom": [10, 13, 14, 16, 34, 45, 76, 78, 101, 104, 176], "consid": [10, 15, 18, 27, 37, 73, 78, 85, 94, 102, 103, 160, 161, 176, 240, 303, 320, 323], "vice": [10, 258], "versa": [10, 258], "compani": [10, 323], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 62, 76, 90, 98, 160, 161, 165, 168, 323, 324], "regardless": [10, 55, 71, 93, 160, 256, 323], "friendli": [11, 12, 37, 64, 81, 94, 96, 97, 98], "research": [11, 73, 85, 96, 301, 318], "particularli": [11, 96, 303], "field": [11, 27, 30, 33, 38, 43, 45, 65, 85, 87, 88, 90, 92, 163, 167, 171, 173, 257, 318, 324, 335, 338], "scienc": [11, 265, 288], "solv": [11, 24, 37, 59, 61, 78, 94], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 91], "minor": [12, 14, 34, 81, 91, 96, 99, 326], "cope": [12, 34], "life": [12, 32, 34, 65, 91], "extrem": [12, 27, 91, 167, 212, 223, 323], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 42, 45, 66, 73, 74, 76, 78, 81, 82, 85, 93, 94, 96, 98, 99, 101, 102, 104, 162, 163, 165, 167, 213, 214, 215, 226, 229, 237, 283, 305, 318, 320, 322, 323, 324, 325], "format": [12, 13, 20, 22, 34, 35, 43, 44, 48, 62, 64, 78, 82, 90, 96, 97, 99, 102, 130, 137, 159, 162, 165, 167, 170, 171, 173, 174, 311, 313, 318, 320, 336], "unifi": [12, 34, 54, 62, 64, 66, 160, 320], "care": [12, 34, 78, 169, 170, 323], "foreign": [12, 323], "ecosystem": [12, 51, 64, 68, 80, 81, 95, 98, 328], "freedom": 12, "accord": [12, 19, 36, 42, 48, 59, 65, 66, 70, 76, 78, 82, 90, 91, 95, 96, 101, 163, 165, 169, 230, 238, 250, 251, 320, 324], "demand": [12, 54, 66, 94, 323, 324, 328], "sdk": [12, 18, 59, 65, 69, 79, 80, 81, 94, 95, 98, 106, 316, 324, 328, 334], "domain": [12, 70, 91, 96, 258, 259, 260, 261, 262], "dedic": 12, "treat": [12, 14, 20, 34, 78, 173, 311, 313, 318, 331], "immut": [12, 34, 64, 74, 93], "persist": [12, 15, 30, 34, 46, 59, 64, 65, 91, 93, 98, 322], "fortun": [12, 20, 43, 62], "grin": [12, 64], "awar": [12, 37, 42, 51, 59, 65, 93], "introduct": [12, 34, 47, 73, 79, 94, 164, 165, 168, 176, 221, 303, 323], "foundat": [12, 57, 73, 91], "visit": [12, 29, 51, 70, 78, 95, 160], "meanwhil": [12, 62, 81, 96, 323], "compress": [12, 13, 53, 92, 102, 160, 276], "pipelin": [12, 34, 81, 91, 94, 98, 327], "balanc": [12, 161, 211], "link": [12, 31, 37, 38, 45, 50, 51, 59, 61, 66, 74, 82, 96, 99, 102, 173, 176, 213, 234, 236, 237, 247, 248, 249, 308, 311, 318], "popular": [12, 22, 29, 52, 62, 90, 92, 95, 96, 159, 171, 324], "freeli": [12, 24], "background": [12, 61], "interoper": [12, 323], "panda": [12, 62, 70, 101, 103, 117, 128, 173, 311, 340], "mar": [12, 27, 62, 76, 93, 318], "fastffi": [12, 106], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 43, 46, 54, 55, 59, 65, 71, 72, 74, 76, 79, 80, 81, 91, 93, 95, 98, 101, 212, 223, 230, 306, 309, 311, 328, 334], "emploi": [12, 24, 34, 50, 88, 93, 94], "captur": [12, 96], "20": [12, 13, 27, 29, 32, 34, 65, 68, 76, 78, 81, 99, 102, 103, 161, 162, 164, 173, 230, 258, 259, 280, 282, 311, 334, 335, 341, 342], "100": [12, 34, 70, 78, 84, 87, 88, 92, 102, 171, 176, 233, 240, 244, 251, 260, 311, 318, 324, 338, 342], "build": [12, 15, 31, 34, 35, 37, 59, 66, 70, 77, 81, 82, 90, 93, 101, 102, 112, 114, 161, 165, 167, 169, 170, 173, 259, 260, 261, 303, 318, 320, 331, 336, 343], "been": [12, 17, 23, 24, 28, 29, 33, 37, 42, 48, 59, 66, 67, 68, 70, 73, 76, 78, 80, 82, 91, 93, 94, 95, 96, 98, 102, 151, 163, 165, 173, 174, 176, 230, 253, 303, 315, 328], "go": [13, 83, 171, 238, 291, 324], "impact": [13, 95], "dive": 13, "arrowfrag": [13, 16, 101, 325], "vineyard": [13, 15, 16, 23, 28, 31, 33, 58, 59, 64, 65, 74, 81, 86, 87, 91, 97, 98, 101, 103, 133, 138, 141, 142, 173, 174, 318, 323, 324, 332, 334, 337, 338, 339, 342, 344], "basic": [13, 16, 20, 43, 44, 73, 95, 159, 162, 167, 169, 170, 171, 230, 240, 245, 317], "member": [13, 16, 76, 78, 101, 301], "string": [13, 17, 23, 33, 65, 70, 71, 73, 74, 76, 90, 101, 102, 104, 109, 146, 160, 161, 162, 163, 164, 165, 168, 170, 171, 172, 173, 175, 176, 191, 195, 196, 205, 303, 305, 307, 311, 313, 320, 323, 324, 325, 334, 342, 344], "consecut": 13, "hashmap": [13, 58, 173], "arrai": [13, 17, 58, 71, 82, 90, 96, 101, 102, 103, 162, 163, 165, 168, 171, 311, 314, 326, 334], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 69, 76, 90, 102, 173, 176, 311, 314, 334, 337, 339, 344], "vertex_label": [13, 101, 104], "perfect": [13, 173], "int64_t": [13, 58, 65, 90, 101, 102, 173, 326, 344], "std": [13, 14, 15, 58, 101, 320, 325], "string_view": 13, "uint64_t": [13, 16, 173, 320], "oid_arrays_": [13, 58], "topologi": [13, 82, 85, 93, 162, 167, 308, 320, 322, 323], "row": [13, 44, 65, 73, 82, 96, 160, 173, 304, 324], "matrix": [13, 90, 96, 102, 167, 176, 238, 256, 271, 274, 303, 311, 314], "src_type": [13, 162], "edge_typ": [13, 43, 45, 48, 84, 87, 88, 92, 159, 161, 162, 163, 164, 165, 168, 171, 175, 323, 338, 343], "pair": [13, 20, 68, 71, 74, 78, 101, 102, 104, 158, 171, 210, 215, 216, 222, 238, 256, 262, 311, 314, 317, 323, 325], "indptr": 13, "ie_lists_": [13, 58], "edge_label": [13, 70, 101, 104, 318], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 42, 48, 57, 73, 74, 78, 82, 90, 99, 159, 161, 173, 318, 320, 322, 323, 325], "uint32_t": [13, 101, 173], "num_edg": 13, "ie_offsets_lists_": [13, 58], "offset": [13, 58, 101, 162, 170, 214, 324], "slice": [13, 66, 103, 173, 317], "ie_list": 13, "ie_offset": 13, "num_vertic": 13, "oe_lists_": [13, 58], "oe_offsets_lists_": [13, 58], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 58], "vertex_tables_": [13, 58], "oid_t": [13, 15, 16, 58, 101], "vid_t": [13, 15, 16, 58, 101], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 59], "practic": [13, 16, 28, 53, 66, 74, 82, 85, 91, 96, 160, 161, 163, 324], "load_factori": 13, "15": [13, 59, 78, 87, 88, 89, 99, 161, 162, 164, 165, 271, 293, 304, 311, 318], "extra": [13, 37, 59, 65, 67, 176, 272, 337], "column": [13, 18, 33, 43, 44, 45, 48, 58, 62, 66, 74, 82, 90, 92, 96, 101, 103, 104, 111, 160, 170, 173, 304, 320, 324, 325, 334, 338, 344], "edge_id": 13, "uniqu": [13, 43, 44, 45, 56, 66, 70, 74, 90, 91, 92, 93, 102, 150, 151, 160, 164, 169, 170, 173, 176, 278, 284, 317, 324, 325], "kept": [13, 76, 78, 101], "summari": [13, 98, 191], "argument": [13, 23, 30, 48, 76, 78, 85, 90, 176, 178, 179, 180, 209, 217, 247, 254, 258, 259, 260, 261, 262, 289, 311, 314, 317, 318, 324, 325, 334], "use_perfect_hash": [13, 101, 152, 173, 318], "load_from": [13, 22, 30, 173, 318], "realli": 13, "margin": 13, "former": [13, 94], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 68, 70, 78, 95, 173, 318, 323, 324, 341], "localvertexmap": 13, "suitabl": [13, 53, 91, 98, 161, 165, 171, 230, 324, 327], "dozen": 13, "hundr": [13, 240, 251], "repeatedli": [13, 66, 94], "add_vertic": [13, 62, 70, 90, 173, 311, 314, 315, 338, 339, 344], "sure": [13, 23, 27, 30, 41, 43, 51, 67, 70, 78, 165, 169, 171, 318, 324], "fairli": [13, 68], "8": [13, 20, 31, 32, 33, 35, 37, 59, 65, 68, 70, 76, 78, 81, 84, 99, 102, 160, 214, 237, 256, 279, 288, 290, 296, 300, 306, 308, 311, 313, 324, 326, 337, 342], "absolut": 13, "int32_t": [13, 90, 173, 344], "vid_typ": [13, 33, 101, 152, 173, 318], "compact_edg": [13, 101, 152, 173, 318], "compact": [13, 101, 173], "varint": [13, 173], "half": [13, 173], "generated_eid": 13, "save": [13, 18, 28, 29, 50, 65, 161, 176, 324], "interact": [13, 27, 29, 33, 36, 37, 38, 41, 42, 43, 45, 52, 54, 55, 56, 62, 65, 66, 67, 69, 70, 72, 73, 75, 77, 78, 79, 81, 90, 91, 93, 94, 97, 98, 100, 130, 173, 252, 301, 316, 318, 331, 338, 342], "vertex_id": [13, 24, 55, 62, 90, 344], "retain_oid": [13, 65, 90, 101, 152, 173, 318, 325, 344], "gain": [13, 37], "signific": [13, 93, 98], "arrowprojectedfrag": [13, 15, 16, 101, 110], "implicit": [13, 314], "arrowflattenfrag": 13, "thought": [13, 239], "view": [13, 20, 24, 57, 90, 91, 122, 184, 188, 207, 208, 311, 314, 320, 332], "mainli": [13, 44, 66, 71, 78, 98, 167], "purpos": [13, 73, 78, 91, 323], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 103, 326, 327], "r2": [13, 103, 326, 327], "r3": [13, 103, 326], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 78, 94, 102, 160, 164, 165, 166, 176, 193, 230, 250, 260, 309, 311, 318, 323, 324], "express": [14, 15, 24, 52, 66, 71, 72, 74, 85, 93, 95, 103, 160, 162, 165, 262, 311, 342], "modifi": [14, 20, 24, 28, 48, 54, 65, 71, 77, 115, 116, 131, 132, 166, 189, 242, 309, 322, 323], "adher": [14, 35, 45, 73, 323], "think": [14, 24], "principl": [14, 169], "privileg": 14, "experienc": [14, 95], "inform": [14, 15, 16, 19, 27, 29, 38, 48, 51, 59, 66, 67, 70, 71, 74, 88, 92, 94, 96, 97, 106, 120, 159, 160, 161, 162, 165, 167, 169, 173, 176, 191, 209, 250, 272, 273, 301, 311, 318, 320, 324, 331], "hop": [14, 66, 74, 76, 78, 81, 82, 85, 91, 95, 96, 159, 163, 165, 167, 168, 169, 171], "slow": [14, 68], "consequ": [14, 91, 94], "piec": [14, 52, 64, 170, 318], "destin": [14, 33, 43, 44, 45, 65, 70, 71, 78, 82, 90, 92, 101, 103, 119, 160, 161, 162, 164, 165, 171, 173, 175, 317, 322, 323, 324, 344], "abovement": 14, "peval": [14, 16, 17, 18, 34, 94, 101, 109, 328, 334], "incev": [14, 16, 17, 18, 34, 94, 101, 109, 328, 334], "assembl": [14, 34, 66, 93, 94, 101, 173], "unlik": [14, 17, 72, 82, 85, 91, 311], "modif": [14, 22, 81, 91, 96, 173, 314], "convent": [14, 37, 59, 73, 244, 270, 332], "taught": [14, 78], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 59, 70, 91, 324], "collect": [14, 34, 71, 76, 77, 78, 95, 96, 97, 171, 311], "partial": [14, 16, 18, 34, 76, 101, 103, 160, 253, 328], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 65, 85, 98, 160, 168, 176, 246, 311], "accur": [14, 70, 73], "long": [14, 17, 30, 33, 38, 55, 70, 74, 76, 78, 93, 98, 102, 165, 323, 324, 334, 342], "const": [14, 15, 16, 58, 101, 104, 169, 170, 323, 324, 325], "fragment_t": [14, 15, 16, 101], "frag": [14, 17, 18, 58, 109, 320, 325, 334], "context_t": [14, 15, 16, 101], "ctx": [14, 17, 22, 101, 334], "message_manager_t": [14, 16, 101], "vertex_t": [14, 16, 58, 101], "native_sourc": [14, 18, 334], "getinnervertex": [14, 101], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 58, 101, 320, 334], "get_neighbor": 14, "min": [14, 18, 24, 68, 71, 104, 334, 342], "static_cast": [14, 16, 58, 320], "get_data": [14, 58], "isoutervertex": [14, 101], "put": [14, 16, 17, 22, 45, 46, 48, 169], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 58, 78, 161, 171, 173, 269, 323, 324, 334], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 58, 101, 320, 334], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 78, 104, 323], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 334], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 58, 101], "dijkstra": [14, 18, 94, 176, 334], "checkout": [14, 37, 166], "seri": [15, 78, 96, 101, 165, 323], "strong": [15, 53, 66, 94], "typenam": [15, 16, 58, 101], "frag_t": [15, 16, 101], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 42, 43, 65, 77, 78, 95, 162, 165, 169, 171, 317, 326], "shared_ptr": [15, 58, 101, 320, 325], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 41, 55, 70, 78, 90, 318, 334, 344], "global": [15, 24, 66, 74, 76, 78, 96, 152, 173, 303, 318, 325, 331, 342], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 41, 44, 65, 66, 78, 90, 96, 273, 317], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 43, 44, 48, 51, 56, 58, 87, 90, 101, 102, 104, 109, 159, 161, 162, 166, 169, 171, 311, 314, 320, 328, 334, 343, 344], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 219], "len": [15, 76, 78, 87, 161, 176, 185, 216, 233, 235, 238, 240, 241, 245, 311], "ed": [15, 23, 244, 258, 265, 288, 294], "ctruee": 15, "rather": [15, 18, 54, 78, 90, 95, 97, 98, 176, 230, 272, 323], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 113, 314], "dynamic_properti": [15, 126, 314], "def": [15, 18, 23, 69, 84, 87, 88, 89, 90, 92, 109, 159, 161, 162, 163, 164, 165, 168, 171, 217, 324, 334, 338, 339, 343, 344], "arg": [15, 87, 101, 102, 103, 104, 137, 155, 162, 163, 164, 165, 168, 171, 175, 318, 324], "appasset": [15, 18, 109, 110, 114, 316, 334], "algo": [15, 16, 17, 22, 23, 102, 110], "flash_bf": 15, "vertex_data": [15, 16, 102, 110], "gscoordin": [15, 28, 36], "builtin": [15, 19, 20, 46, 55, 312, 314, 316], "gs_conf": [15, 16, 110], "yaml": [15, 16, 28, 29, 38, 42, 43, 44, 45, 51, 55, 56, 65, 77, 102, 110, 318, 322, 324, 342], "cpp_flash": 15, "class_nam": [15, 16, 110], "compatible_graph": [15, 16, 110], "immutableedgecutfrag": 15, "log": [15, 17, 42, 59, 64, 87, 88, 91, 93, 323, 325, 337], "p2p": [15, 17, 22, 23], "network": [15, 27, 45, 59, 62, 64, 67, 78, 82, 86, 88, 91, 92, 94, 97, 98, 99, 100, 102, 159, 160, 161, 163, 165, 167, 171, 176, 231, 232, 238, 240, 244, 247, 248, 249, 252, 264, 288, 299, 300, 302, 303, 308, 312, 326, 337], "load_p2p_network": [15, 16, 17, 18, 62, 102, 103, 334], "attribut": [15, 19, 74, 85, 88, 92, 94, 96, 101, 102, 135, 146, 161, 162, 164, 167, 171, 172, 175, 176, 178, 179, 180, 195, 196, 205, 217, 230, 235, 254, 258, 259, 260, 261, 262, 265, 266, 267, 301, 303, 305, 308, 309, 311, 312, 314, 320], "convert": [15, 20, 23, 50, 73, 82, 102, 117, 118, 128, 129, 141, 142, 159, 160, 167, 171, 231, 232, 289, 306, 311, 313, 314, 320], "simple_graph": [15, 16], "dist": [15, 17, 69, 102, 103, 166, 169, 258, 260, 262, 318, 334, 342], "codegen": [15, 66], "bit": [15, 68, 71, 76, 78], "longer": [15, 87, 104, 318], "retriev": [15, 47, 50, 64, 70, 74, 76, 92, 93, 103, 117, 118, 128, 129, 133, 137, 141, 142, 162, 163, 165, 171, 176, 317, 324, 325], "displai": [15, 56, 77, 160], "vertex_rang": [15, 103, 117, 118, 128, 129, 133, 141, 142, 173, 317], "end": [15, 16, 58, 62, 71, 76, 78, 85, 86, 87, 88, 89, 90, 91, 92, 95, 98, 103, 104, 165, 170, 176, 190, 199, 204, 205, 218, 230, 313, 317, 323, 328], "sort_valu": 15, "pip3": [16, 19, 23, 35, 37, 59, 69, 77, 331, 335, 337, 341], "degre": [16, 19, 20, 58, 62, 73, 78, 85, 102, 104, 162, 163, 168, 176, 185, 210, 211, 230, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 256, 268, 269, 270, 271, 305, 311, 312, 324], "vertexdatacontext": [16, 17, 101, 176, 334], "myappcontext": 16, "explicit": [16, 101, 255, 311, 318], "parallelmessagemanag": [16, 17, 334], "param1": 16, "setvalu": [16, 17, 334], "vertex_array_t": [16, 101], "variabl": [16, 29, 33, 39, 41, 59, 67, 76, 109, 230, 318, 324, 325, 337], "And": [16, 18, 23, 29, 31, 36, 38, 62, 66, 68, 78, 90, 99, 102, 103, 164, 169, 314, 317, 318, 324], "zero": [16, 45, 93, 102, 160, 165, 176, 193, 211, 220, 253, 305, 306, 325], "myapp": 16, "parallelappbas": [16, 17, 334], "parallelengin": [16, 17, 334], "install_parallel_work": 16, "constexpr": [16, 101], "messagestrategi": [16, 18, 101, 104, 334], "message_strategi": [16, 101], "ksynconoutervertex": [16, 18, 101, 104, 334], "loadstrategi": [16, 101], "load_strategi": [16, 101], "kbothoutin": [16, 101], "initchannel": 16, "noth": [16, 104, 120, 173, 175, 311], "forc": [16, 37, 90], "forcecontinu": [16, 17, 334], "getincomingadjlist": [16, 58, 101], "counter": [16, 78], "runnabl": [16, 17, 23], "content": [16, 48, 53, 62, 78, 88, 90, 92, 176, 308, 322, 344], "my_app": [16, 18, 334], "cpp_pie": [16, 102, 110], "context_typ": [16, 101, 102, 110], "dynamicprojectedfrag": 16, "codebas": [16, 35], "my_app_context": 16, "zip": [16, 53, 69, 70, 77, 110, 258, 262, 311, 342], "jr": 16, "load_app": [16, 17, 18, 22, 334], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 102, 103, 173, 317, 334], "demo": [17, 22, 23, 68, 106, 318, 322, 324, 332, 334], "turn": [17, 47, 54, 57, 59, 70, 99, 106, 305, 332], "verbos": [17, 23, 38, 59, 332], "cluster_typ": [17, 22, 70, 90, 102, 103, 318, 334, 344], "add_lib": [17, 22, 318], "home": [17, 22, 23, 28, 38, 43, 44, 59, 62, 90, 101, 166, 167, 169, 170, 172, 173, 176, 220, 331, 332, 334, 336, 344], "19": [17, 22, 23, 32, 59, 69, 78, 99, 161, 162, 164, 332, 337, 341], "shade": [17, 22, 23, 334], "java_pi": [17, 102], "threadnum": [17, 334], "info": [17, 38, 42, 51, 59, 68, 78, 104, 173, 311, 314, 318, 322, 323, 324, 325, 332], "avail": [17, 23, 29, 30, 41, 44, 48, 52, 57, 62, 70, 71, 74, 77, 85, 90, 93, 99, 102, 158, 171, 259, 260, 261, 311, 318, 320, 323, 324, 331, 334], "mvn": [17, 22, 106, 324], "clean": [17, 32, 62, 68, 70, 92, 106, 169, 323], "dskiptest": [17, 106], "pom": [17, 23, 324], "xml": [17, 23, 101, 324], "groupid": [17, 23, 324, 334], "artifactid": [17, 23, 324, 334], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 324, 334], "spark": [17, 322], "drastic": 17, "great": [17, 23, 37, 324], "suppos": [17, 78, 173, 305, 323], "traversecontext": [17, 334], "overrid": [17, 90, 101, 159, 169, 331, 334], "ifrag": [17, 334], "parallelcontextbas": [17, 334], "adjlist": [17, 101, 104, 322, 334], "nbr": [17, 20, 58, 101, 104, 311, 334], "dst": [17, 18, 30, 62, 74, 85, 90, 103, 159, 162, 173, 175, 317, 320, 323, 334, 343, 344], "largest": [17, 78, 176, 256, 334], "vertexarrai": [17, 101, 104, 334], "math": [17, 84, 88, 92, 176, 260, 261, 338, 340], "max": [17, 71, 104, 172, 176, 334, 342], "pars": [17, 66, 90, 102, 160, 320, 324], "maxiter": [17, 334], "jsonobject": [17, 334], "gsvertexarrai": [17, 334], "createfficontext": [17, 334], "containskei": [17, 334], "getinteg": [17, 334], "javadoc": [17, 35], "proper": [17, 37], "javaapp": [17, 316, 334], "But": [17, 65, 78, 90, 98, 106, 311, 317], "rememb": [17, 22, 23, 30, 33, 42, 55, 324, 331], "pack": [17, 23, 334], "param": [17, 23, 29, 48, 59, 68, 70, 102, 122, 123, 137, 152, 154, 158, 165, 171, 173, 318, 324, 334], "b": [17, 18, 22, 37, 71, 73, 76, 78, 165, 220, 238, 251, 257, 258, 262, 267, 268, 269, 271, 299, 307, 311, 334, 342], "bother": 17, "click": [17, 36, 37, 85, 161, 162, 165, 335], "pure": [18, 101, 328], "just": [18, 19, 23, 27, 43, 46, 51, 53, 55, 59, 62, 65, 76, 78, 98, 106, 169, 173, 311, 314, 318, 324, 326], "udf": [18, 109, 317, 334], "decor": [18, 334], "vd_type": [18, 104, 109, 334], "md_type": [18, 104, 109, 334], "youralgorithm": [18, 334], "staticmethod": [18, 109, 334], "statu": [18, 27, 29, 30, 38, 47, 55, 56, 59, 87, 169, 170, 176, 324, 328, 332], "cython": [18, 34, 59, 137, 316, 334], "sssp_pie": [18, 334], "v_label_num": [18, 325, 334], "vertex_label_num": [18, 104, 320, 325, 334], "v_label_id": [18, 104, 334], "init_valu": [18, 104, 334], "1000000000": [18, 102, 334], "pieaggregatetyp": [18, 104, 334], "kminaggreg": [18, 104, 334], "register_sync_buff": [18, 104, 334], "get_config": [18, 104, 318, 334], "declar": [18, 66, 76, 78, 81, 95, 98, 161, 334], "get_inner_nod": [18, 104, 334], "break": [18, 37, 50, 54, 77, 171, 334], "set_node_valu": [18, 104, 334], "e_label_num": [18, 58, 325, 334], "edge_label_num": [18, 104, 320, 325, 334], "e_label_id": [18, 334], "get_outgoing_edg": [18, 104, 334], "third": [18, 90, 91, 95, 173, 296, 297], "get_int": [18, 104, 334], "get_node_valu": [18, 104, 334], "iv": [18, 334], "inner_nod": [18, 104, 334], "v_dist": [18, 334], "u_dist": [18, 58, 334], "classic": [18, 85, 164, 312], "yourpregelalgorithm": [18, 334], "sssp_pregel": [18, 334], "set_valu": [18, 104, 334], "src_id": [18, 58, 85, 160, 161, 162, 164, 165, 168, 171, 175, 334], "cur_dist": [18, 334], "new_dist": [18, 334], "outgoing_edg": [18, 104, 334], "vote_to_halt": [18, 104, 334], "sin": [18, 334], "m_pi": [18, 334], "translat": [18, 37, 70, 91], "generate_eid": [18, 65, 90, 101, 152, 173, 318, 325, 334, 344], "test": [18, 23, 29, 33, 50, 53, 59, 64, 65, 68, 78, 81, 84, 87, 88, 92, 96, 159, 169, 171, 175, 195, 196, 230, 311, 313, 318, 323, 324, 331, 335, 336, 338, 343], "futur": [18, 45, 54, 71, 76, 78, 90], "to_gar": [18, 334], "my_sssp_pregel": [18, 334], "gar": [18, 102, 110, 173, 318, 322, 334], "construct": [19, 54, 57, 78, 82, 85, 90, 91, 92, 93, 101, 152, 159, 160, 161, 162, 163, 173, 174, 178, 179, 219, 240, 242, 243, 245, 251, 255, 256, 257, 265, 268, 269, 270, 271, 273, 289, 293, 297, 303, 305, 318, 322, 325], "expand": [19, 54, 66, 78, 79, 163, 165, 312], "add_edges_from": [19, 20, 195, 311], "add_nod": [19, 20, 311, 314], "number_of_nod": [19, 20, 176, 220, 304, 311], "number_of_edg": [19, 20, 185, 220, 304, 311], "sort": [19, 20, 58, 66, 78, 176, 182, 210, 214, 217, 220, 245, 246, 304, 305, 311, 323], "connected_compon": [19, 176], "nx": [19, 20, 62, 113, 115, 116, 119, 122, 124, 126, 131, 132, 136, 139, 140, 173, 176, 311, 313, 314], "add_nodes_from": [19, 20, 311], "red": [19, 20, 37, 70, 160, 311], "green": [19, 20, 36, 37], "add_edg": [19, 20, 62, 70, 90, 173, 189, 195, 196, 199, 204, 205, 311, 314, 338, 339, 344], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": [19, 52], "dict": [19, 20, 27, 102, 103, 130, 138, 158, 161, 162, 165, 173, 174, 258, 259, 260, 261, 268, 269, 289, 311, 317, 318, 324], "draw": [19, 50, 54, 78, 258, 261], "matplotlib": [19, 78], "with_label": 19, "font_weight": 19, "bold": [19, 99], "twitter": [19, 99], "wget": [19, 22, 23, 29, 35, 69, 166, 342], "raw": [19, 22, 23, 43, 44, 46, 51, 56, 65, 66, 82, 128, 129, 161, 167, 169, 170, 175], "githubusercont": [19, 22, 23], "p": [19, 20, 31, 36, 46, 50, 70, 76, 78, 92, 93, 102, 161, 171, 176, 234, 235, 236, 238, 247, 248, 249, 252, 253, 255, 257, 259, 260, 261, 262, 265, 267, 342], "o": [19, 22, 23, 27, 30, 33, 38, 101, 171, 176, 193, 244, 246, 251, 259, 260, 261, 263, 264, 265, 311, 324, 335, 338], "gs_nx": 19, "g1": [19, 173, 315, 326, 327], "read_edgelist": [19, 313], "expandvar": [19, 22], "nodetyp": [19, 313], "create_us": [19, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 240, 241, 242, 243, 245, 247, 248, 249, 251, 255, 256, 257, 263, 264, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 306, 313], "g2": [19, 173, 311, 315, 326, 327], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 70, 97, 176], "hashabl": [20, 191, 206, 268, 311, 313], "float": [20, 71, 74, 76, 87, 90, 99, 102, 159, 160, 161, 162, 170, 171, 172, 176, 230, 233, 234, 235, 236, 238, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 265, 266, 267, 303, 311, 313, 318, 326, 342, 343, 344], "tupl": [20, 78, 90, 160, 161, 162, 171, 173, 176, 195, 196, 205, 217, 258, 262, 268, 307, 311, 313, 318], "though": [20, 230, 311, 324], "yield": [20, 50, 55, 165, 171, 258, 262, 311], "node_attribute_dict": 20, "discuss": [20, 59, 78, 176, 323, 337], "incorpor": [20, 50, 73], "path_graph": [20, 176, 187, 189, 190, 196, 311, 313], "grown": [20, 220, 253, 311], "unpack": [20, 77, 101, 311], "ebunch": [20, 311], "dictionari": [20, 52, 102, 146, 176, 258, 259, 260, 261, 268, 269, 270, 271, 311, 313], "11": [20, 27, 30, 31, 32, 65, 68, 78, 84, 99, 102, 160, 161, 162, 164, 178, 179, 180, 216, 311, 324, 332], "complaint": 20, "clear": [20, 37, 76, 78, 115, 116, 211, 213, 214, 216, 218, 220, 221, 223, 225, 226, 229, 240, 242, 243, 245, 247, 248, 249, 251, 255, 256, 257, 263, 264, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 306, 311, 313, 324], "quietli": [20, 206, 311], "ignor": [20, 46, 176, 187, 206, 311, 318], "spam": 20, "stage": [20, 59, 64, 82, 97, 98, 165, 323], "seen": [20, 66, 91, 323], "report": [20, 59, 73, 99, 136, 234, 235, 236, 311, 314], "adj": [20, 104, 176, 311], "item": [20, 29, 44, 51, 91, 160, 161, 162, 165, 171, 176, 311, 324], "One": [20, 66, 71, 91, 95, 96, 97, 98, 102, 163, 165, 242, 251, 305, 324], "nbunch": [20, 184, 188, 190, 206, 311], "remove_nod": [20, 311], "remove_nodes_from": [20, 311], "remove_edg": [20, 311], "remove_edges_from": [20, 240, 242, 311], "instanti": [20, 102, 171, 326], "digraph": [20, 173, 178, 188, 190, 195, 196, 199, 204, 205, 216, 233, 234, 235, 238, 242, 243, 245, 247, 248, 249, 250, 254, 305, 306, 307, 309, 312, 313, 314], "edgelist": [20, 289, 313], "subscript": [20, 311], "notat": [20, 42, 44, 276, 278, 280, 282, 284, 290, 292, 311], "yellow": [20, 160], "blue": [20, 160, 311], "undirect": [20, 45, 90, 96, 102, 122, 161, 165, 173, 176, 182, 186, 208, 231, 232, 238, 240, 247, 249, 252, 254, 255, 256, 258, 259, 260, 261, 262, 268, 273, 277, 278, 281, 284, 285, 287, 293, 306, 308, 311, 325], "twice": [20, 289, 311], "fg": [20, 325], "add_weighted_edges_from": [20, 195, 311], "125": [20, 160, 244, 255], "75": [20, 78, 84, 87, 88, 92, 99, 176, 234, 235, 236, 238, 318, 338], "375": 20, "eattr": [20, 311], "wt": 20, "attach": [20, 101, 160, 247, 250], "fridai": [20, 311, 314], "mondai": 20, "5pm": [20, 311], "2pm": [20, 311], "room": [20, 311], "714": [20, 311], "to_direct": [20, 173, 231, 232, 247, 249, 311], "represent": [20, 54, 66, 91, 93, 96, 173, 309, 311, 322], "dg": [20, 81, 96], "dgv": 20, "as_view": [20, 207, 208, 311], "shallow": 20, "out_edg": [20, 188, 311], "in_degre": [20, 85, 87, 163, 165, 168, 171, 242, 268, 269, 311], "predecessor": [20, 181, 254, 305, 311], "successor": [20, 148, 181, 248, 249, 254, 311], "out_degre": [20, 242, 268, 269, 311], "feel": [20, 37, 59], "inconsist": [20, 99], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 76, 85, 96, 102, 163, 168, 233, 234, 235, 236, 238, 240, 244, 247, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 265, 267], "to_undirect": [20, 173, 247, 249, 311], "theoret": 20, "load_ldbc": [20, 78, 342], "foo": [20, 311], "famou": [22, 23, 310], "hadoop": [22, 324], "stop": [22, 27, 30, 43, 56, 93, 97, 101, 176], "open": [22, 36, 37, 48, 67, 77, 79, 85, 95, 98, 171, 313, 323, 324], "actual": [22, 23, 28, 43, 45, 67, 74, 76, 78, 85, 105, 107, 164, 262, 311, 314, 322, 332], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 173], "p2pvertexinputformat": 22, "eformat": [22, 173], "p2pedgeinputformat": 22, "gs_test_dir": [22, 33], "graphscope_sess": [22, 173], "31": [22, 23, 62, 90, 161, 162, 164, 344], "v_prop": [22, 101, 135], "vdata": 22, "e_prop": [22, 101, 135], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 51, 176], "toward": [22, 324], "offici": [22, 65, 67, 68, 77, 95], "pl": 22, "snapshot": [22, 74, 98, 320, 324], "writabl": 22, "degrad": [22, 98], "procedur": [22, 29, 42, 43, 47, 48, 51, 54, 57, 65, 66, 78, 112, 253], "except": [22, 54, 59, 77, 84, 87, 88, 90, 92, 97, 164, 171, 189, 206, 210, 221, 230, 240, 242, 291, 311, 318, 323, 338], "right": [22, 71, 73, 76, 90, 169, 212, 221, 223, 244, 309], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 48, 50, 62, 66, 81, 94, 96, 98, 99, 233], "proceed": [23, 27, 51, 233, 251], "side": [23, 37, 66, 76, 77, 102, 121, 161, 214, 323], "venv": [23, 68, 92], "virtualenv": 23, "pyspark_venv": 23, "bin": [23, 31, 42, 43, 48, 50, 51, 55, 67, 68, 77, 78, 91, 92, 185, 324, 332, 336, 342], "pyspark_venv_g": 23, "tar": [23, 29, 31, 324], "gz": [23, 31, 313, 324], "upload": [23, 65], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 91, 173, 342], "oss": [23, 29, 31, 90, 101, 166, 173, 324, 334, 335, 344], "beij": [23, 29, 31, 82, 96, 160, 324, 335], "fixm": 23, "yuansi": 23, "env": [23, 59, 68, 92, 166], "var": [23, 33, 38, 59, 90, 171, 324, 332, 344], "gs_jar": 23, "l": [23, 29, 35, 55, 85, 96, 163, 231, 232, 234, 235, 236, 243, 244, 245, 247, 248, 249, 252, 259, 260, 261, 262, 264, 268, 269, 270, 271, 300, 303, 311, 331, 332], "lib": [23, 31, 52, 67, 110, 324], "7077": 23, "master_url": 23, "conf": [23, 42, 43, 51, 67, 77, 101, 324, 342], "executor": [23, 35, 38, 46, 65, 67, 91, 174, 332], "driver": [23, 27, 54, 72, 77, 90, 138, 173, 324, 342], "2g": 23, "10g": [23, 336], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 71], "url": [23, 48, 67, 173, 174, 324, 342], "rdd": 23, "classifi": [23, 82, 84, 88, 92, 96, 171, 334], "maven": [23, 106, 324, 334], "conflict": [23, 68, 78, 84, 173, 301, 324], "correctli": [23, 37, 59, 81, 176, 324], "resolv": [23, 28, 59, 90, 173, 325], "goal": [23, 54, 57, 66, 71, 82, 93, 96, 323], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 58, 66, 217, 324], "config": [23, 27, 28, 31, 46, 56, 65, 67, 77, 136, 146, 158, 159, 172, 175, 315, 318, 320, 324, 325, 331, 342, 343], "socket": [23, 28, 30, 67, 101, 325], "bound": [23, 48, 76, 78, 95, 137, 230, 318, 323, 326], "vineyardsock": 23, "filepath": 23, "sock": [23, 28, 67], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 50, 51, 55, 65, 67, 72, 95, 102], "grow": [24, 54, 62, 81, 91, 230, 240, 247, 248, 249, 310, 323], "capac": [24, 33, 67, 311, 318], "indivis": 24, "succinctli": [24, 52], "oppos": [24, 85], "orient": [24, 85, 98, 168, 324], "googl": [24, 35, 94, 336], "powergraph": [24, 98, 99], "wa": [24, 29, 30, 37, 55, 73, 76, 78, 93, 99, 165, 176, 230, 245, 258, 259, 260, 261, 310, 324], "2010": [24, 99, 102, 176, 236, 303, 308], "sequenc": [24, 52, 71, 76, 78, 102, 173, 210, 230, 240, 241, 242, 243, 244, 245, 246, 262, 268, 269, 272, 305, 306, 311, 312, 325], "conceptu": [24, 73], "behavior": [24, 42, 48, 76, 78, 90, 104, 318], "becom": [24, 55, 62, 73, 78, 85, 311, 323, 324], "inact": 24, "again": [24, 59, 90, 326, 331], "termin": [24, 36, 51, 70, 331], "halt": [24, 95, 104, 250], "individu": [24, 65, 67, 73, 88, 92], "messageiter": [24, 104], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 82, 85, 160, 171, 176, 273, 325], "getvalu": [24, 58], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 59, 324], "dramat": 24, "face": [24, 31, 66, 78, 94, 296, 297], "power": [24, 55, 71, 72, 76, 78, 81, 95, 102, 176, 230, 240, 288, 311], "law": [24, 230, 240], "gather": [24, 318], "scatter": [24, 161], "accumul": [24, 85, 305], "workload": [27, 36, 54, 62, 64, 66, 67, 75, 78, 81, 91, 93, 99, 324, 326, 327], "grpc": [27, 28, 31, 59, 101, 335, 337], "linux": [27, 30, 31, 36, 53, 65, 84, 99, 106, 341], "maco": [27, 30, 36, 53, 59, 68, 335, 337, 338, 341], "skip": [27, 31, 35, 95, 106, 324], "minikub": [27, 30, 324], "instruct": [27, 29, 30, 33, 37, 51, 54, 55, 65, 67, 68, 69, 70, 77, 92, 95, 101, 114, 165], "platform": [27, 32, 37, 64, 65, 66, 84, 97, 98, 99, 106, 160, 302, 318], "desktop": [27, 324, 338], "server": [27, 29, 46, 48, 66, 67, 70, 74, 77, 79, 81, 85, 89, 91, 93, 95, 100, 164, 169, 170, 171, 324, 336, 342], "kubectl": [27, 29, 30, 33, 38, 46, 59, 65, 324, 332, 337], "kube": [27, 318], "apivers": [27, 33], "v1": [27, 33, 35, 48, 59, 76, 78, 84, 87, 88, 92, 95, 159, 276, 289, 314, 337, 338, 343], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 78, 165, 170, 173, 233, 305, 332], "16": [27, 31, 65, 67, 78, 99, 159, 161, 162, 164, 166, 267, 290, 304, 343], "2023": [27, 73, 332], "44": [27, 46, 99, 161, 162, 164, 304], "05": [27, 238, 251], "cst": 27, "sig": [27, 334, 341], "28": [27, 76, 78, 82, 96, 99, 161, 162, 164, 308], "cluster_info": 27, "172": [27, 99], "21": [27, 31, 62, 78, 99, 102, 161, 162, 164, 284, 324], "67": [27, 99, 102], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 318], "profil": [27, 342], "encapsul": [27, 50, 51, 55, 81, 82, 159, 165, 318], "entranc": [27, 165], "tag": [27, 41, 46, 76, 78, 99, 238, 318, 324, 336], "intranet": 27, "internet": [27, 29, 31, 70, 78, 94, 308, 310], "might": [27, 42, 45, 51, 59, 176, 268, 311, 327], "k8s_image_registri": [27, 33, 318], "k8s_image_repositori": [27, 318], "k8s_image_tag": [27, 33, 318], "fit": [27, 54, 62, 65, 86, 87, 106], "increas": [27, 38, 42, 59, 62, 161, 209, 210, 218, 240, 242, 250, 268, 271, 273, 323], "cpu": [27, 48, 59, 65, 89, 166, 318, 327, 337], "num_work": [27, 28, 33, 89, 158, 318, 342], "k8s_engine_cpu": [27, 158, 318], "32": [27, 76, 99, 161, 162, 164, 172, 176], "k8s_engine_mem": [27, 59, 158, 318, 337], "256gi": 27, "vineyard_shared_mem": [27, 59, 158, 318, 337], "preexist": [27, 73], "k8s_client_config": [27, 318], "disk": [27, 54, 59, 65, 91, 324], "test_data": [27, 84, 88, 92, 335, 338], "testingdata": [27, 30, 33, 335, 338], "k8s_volum": [27, 30, 33, 158, 318, 335, 338], "constructor": [27, 90, 211, 213, 214, 216, 218, 220, 221, 223, 225, 226, 229, 240, 242, 243, 245, 247, 248, 249, 251, 255, 256, 257, 263, 264, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 306, 313], "vm": [27, 30, 101], "copi": [27, 29, 30, 65, 91, 93, 98, 119, 176, 183, 187, 189, 190, 248, 254, 309, 311, 314, 322, 323, 324, 325, 326], "hostpath": [27, 30, 33, 46, 65, 318, 335, 338], "expandus": [27, 335, 338], "mountpath": [27, 30, 33, 318, 335, 338], "expect": [27, 34, 37, 47, 59, 90, 106, 240, 242, 244, 314, 318], "monitor": [27, 29, 81], "wait": [27, 59, 318], "finish": [27, 58, 77, 87, 104, 161, 164, 324], "remov": [27, 29, 56, 73, 76, 78, 102, 106, 166, 183, 189, 191, 237, 240, 242, 244, 286, 289, 305, 311, 324], "remain": [27, 54, 55, 71, 76, 90, 94, 160, 165, 245, 272], "statefulset": [27, 324], "svc": [27, 46, 65], "left": [27, 36, 42, 71, 73, 76, 102, 173, 176, 212, 244], "service_port": 28, "63800": 28, "launcher_typ": 28, "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 325], "0000": [28, 62, 78], "rpc_port": 28, "9600": 28, "sai": [28, 41], "configmap": 28, "mount": [28, 30, 33, 43, 59, 66, 90, 170, 318, 335, 337, 338], "ideal": [29, 37, 54, 98], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 46, 59, 65, 67, 78, 324, 335, 337], "minut": [29, 59, 66], "succe": 29, "past": [29, 66, 326], "noteport": 29, "node_ip": [29, 324], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 101, 171], "nodeport": [29, 318, 324, 338], "echo": [29, 31], "listen": [29, 42, 46, 54, 67, 101], "statement": [29, 165, 324], "ident": [29, 103, 119, 173, 207, 208, 212, 283, 303, 305, 311], "reconnect": [29, 318], "disconnect": [29, 176, 252, 253, 268, 271, 318, 331], "sess2": 29, "comment": [29, 37, 62, 70, 71, 78, 90, 160, 311, 313, 314, 339, 344], "homepag": 29, "remot": [29, 36, 77, 89, 106, 174, 318, 342], "cater": [29, 91], "tgz": 29, "unzip": [29, 53, 69, 70, 77, 342], "zxvf": 29, "bundl": [30, 318], "aliv": 30, "reserv": 30, "simplifi": [30, 50, 65, 91, 92, 93, 95, 97, 160, 165, 323], "etcd": [30, 59, 65, 318, 320, 335], "replica": [30, 65], "etcd_replica": 30, "greater": [30, 33, 71, 76, 102, 161, 176, 230, 261, 318, 323], "ag": [30, 33, 44, 45, 48, 66, 73, 74, 76, 78, 82, 96, 159, 160, 173, 317, 332, 342, 343], "33": [30, 54, 76, 161, 162, 164, 301, 304], "vineyardd": [30, 33, 67], "vineyardctl": [30, 318], "v6d": [30, 31, 65, 90, 318], "blob": [30, 59, 334], "cmd": [30, 101, 318], "readm": [30, 106], "md": [30, 171], "notic": [30, 33, 65, 74, 78, 91, 165, 173, 304, 311, 318, 326], "charact": [30, 44, 302, 307, 313], "vineyard_deploy": 30, "restart": [30, 42, 48, 50, 55, 56, 332], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": 30, "k8s_namespac": [30, 33, 158, 318], "k8s_vineyard_deploy": [30, 33, 158, 318], "reload": [30, 324], "vineyard_id": [30, 33, 173, 332], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 101, 173, 318, 323, 325], "softwar": [30, 33, 44, 48, 65, 68, 73, 76, 81, 91, 173, 325], "successfulli": [30, 53, 67, 70, 82, 87, 230, 324], "folder": [31, 38, 43, 53, 56, 90, 323], "cento": [31, 32, 59, 68, 99, 337, 341], "82": [31, 99], "boost": [31, 81, 91, 101], "perl": 31, "v3": [31, 95, 99], "24": [31, 65, 78, 99, 161, 162, 164, 278, 296, 304], "openmpi": [31, 99], "gflag": 31, "glog": [31, 73], "arrow": [31, 44, 58, 101, 113, 126, 173, 314], "74": [31, 99, 302], "openssl": [31, 59, 337], "zlib": 31, "protobuf": 31, "49": [31, 78, 99, 161, 162, 164], "13": [31, 35, 78, 99, 160, 161, 162, 164, 216, 257], "libclang": 31, "curl": [31, 47, 77], "lo": [31, 77], "czf": 31, "mkdir": [31, 59, 171, 337], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 58], "y": [31, 32, 78, 89, 102, 257, 258, 262], "devtoolset": 31, "python38": 31, "opt": [31, 36, 42, 55, 66, 67, 83, 171], "bash": [31, 76, 332, 336], "euxo": 31, "pipefail": 31, "dir": [31, 324], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 336], "manylinux2010_x86_64": 31, "whl": [31, 166, 169], "x86_64": [31, 53], "sh": [31, 35, 77, 166, 324, 342], "licens": [31, 336], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 160], "program_opt": 31, "regex": [31, 76], "chrono": 31, "atom": [31, 324], "date_tim": 31, "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": [31, 48], "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 66, 91, 296, 324], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 101], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 53, 59, 65, 68, 166, 335, 337, 341], "04": [32, 59, 65, 68, 78, 99, 166, 335, 337, 341], "intel": [32, 68, 335, 337, 341], "appl": [32, 59, 68, 311, 335, 337, 341], "silicon": [32, 68, 335, 337], "jdk": [32, 65, 68, 80, 328, 334], "wheel": [32, 59, 229, 295, 337, 340], "manylinux2014": [32, 336], "abi": 32, "wish": [32, 37, 42, 51, 55], "nightli": [32, 59, 337], "tidi": 32, "quickli": [32, 36, 54, 81, 92, 95, 96, 98, 171, 318], "insid": [32, 38, 44, 59, 76, 78, 102, 110, 160, 172, 173, 286, 317, 318, 342], "apt": [32, 166], "ipython": 32, "tensorflow": [32, 81, 82, 84, 87, 88, 91, 92, 96, 97, 159, 160, 161, 164, 165, 167, 171, 338], "tool": [32, 35, 36, 43, 51, 54, 62, 65, 72, 79, 81, 83, 91, 258, 260, 320, 323, 324, 325, 341], "dep": [32, 35, 331, 335, 336], "fly": [32, 54, 92], "clang": [32, 35, 68, 336], "essenti": [32, 44, 45, 59, 71, 76, 81, 95, 97], "arm": 32, "preliminari": 32, "yet": [32, 53, 69, 76, 103, 268, 271, 311, 317, 324], "calcul": [33, 66, 73, 76, 78, 102, 104, 162, 176, 230, 262], "period": [33, 324], "restor": [33, 173, 318, 324], "persistentvolum": [33, 324], "dump": [33, 102, 138, 173], "cat": [33, 89, 324, 332], "eof": 33, "metadata": [33, 43, 44, 48, 55, 56, 59, 101, 173, 311, 320, 324], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 318], "persistentvolumeclaim": [33, 318, 324], "matchlabel": 33, "request": [33, 47, 59, 90, 101, 130, 161, 169, 172, 174, 205, 311, 318, 324, 337], "extern": [33, 37, 43, 85, 91, 318, 324], "ccc": 33, "sub_graph": [33, 74, 92, 338, 339], "haslabel": [33, 62, 68, 74, 78, 92, 342], "simple_g": [33, 92, 334, 338], "pr_result": 33, "tc_result": 33, "add_column": [33, 92, 101, 173, 334, 338, 339], "tc": [33, 92, 338], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 318], "pvc_name": [33, 318], "schema": [33, 43, 44, 48, 54, 56, 58, 66, 67, 70, 72, 73, 74, 78, 87, 88, 90, 102, 160, 161, 170, 173, 311, 320, 322, 323, 324, 325, 339, 342, 344], "oid_typ": [33, 90, 101, 102, 130, 152, 173, 318, 344], "ulong": 33, "lang": [33, 35, 44, 48, 68, 70, 73, 92, 174], "eid": [33, 58, 70, 173, 324], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 42, 66, 72, 91, 95, 97, 98], "behind": [34, 87, 323, 326, 331, 332], "scene": [34, 66, 87, 168], "lower": [34, 66, 76, 78, 95, 230, 237, 250], "cost": [34, 66, 78, 91, 95, 176, 324], "ownership": 34, "cach": [34, 51, 82, 94, 98, 311], "layout": [34, 94, 324], "were": [34, 37, 78, 99, 262, 324], "outperform": [34, 81, 94, 96, 97, 98], "art": [34, 81, 94, 97, 99], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37, 54, 55], "promot": 35, "readabl": [35, 50, 76, 311], "qualiti": [35, 37, 96], "black": [35, 336], "enforc": 35, "rule": [35, 42, 55, 66, 78, 85, 94, 163, 169, 173, 210, 320], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 64, 335, 336], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 67, 77], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 83], "devcontain": 36, "json": [36, 48, 65, 67, 318, 320, 324, 325], "setup": [36, 37, 59, 173, 318, 336], "visual": [36, 37, 54, 91], "studio": 36, "collabor": [36, 91, 323], "stabl": [36, 102, 173, 320, 324, 341], "haven": [36, 53, 78], "navig": [36, 323, 331], "icon": 36, "bottom": [36, 221], "corner": 36, "window": [36, 78, 341], "reopen": 36, "marketplac": 36, "prompt": [36, 50, 70, 77], "shift": [36, 71, 76, 78, 176, 276], "ctrl": 36, "made": [36, 37, 42, 51, 65, 85, 99, 160, 163, 169, 176, 271, 323], "rebuild": 36, "subcommand": [36, 83], "assembli": [36, 67], "learning_engin": 36, "graphlearn": [36, 38, 82, 84, 87, 88, 92, 159, 160, 161, 165, 166, 171, 172, 175, 318, 332, 338, 343], "compos": [36, 38, 52, 73, 82, 85, 92, 94, 98], "alon": [36, 66, 74, 331], "circul": [36, 214], "edit": [36, 37, 70, 257, 294, 331], "entrypoint": [36, 331, 338], "plai": [36, 66, 80, 100, 170, 175, 328], "thank": [37, 54, 62, 70, 91], "interest": [37, 78, 81, 94, 324], "focus": [37, 73, 78, 91, 97, 99, 165, 303, 324], "eager": [37, 102, 103, 152, 154, 173, 318], "contributor": [37, 304], "welcom": [37, 48, 51], "engag": [37, 91, 92], "good": [37, 54], "particip": [37, 42], "join": [37, 42, 71, 73, 78, 161, 171, 212, 215, 223, 230, 239, 240, 253, 255, 258, 259, 260, 261, 262, 270, 271, 311, 323], "ask": [37, 64], "question": [37, 64, 72, 78, 337], "ve": [37, 43, 51, 55, 65, 69, 77, 91], "hasn": [37, 78], "confirm": 37, "concis": [37, 73, 74, 95, 174], "descript": [37, 44, 47, 55, 56, 65, 66, 71, 73, 76, 85, 90, 160, 163, 168, 169, 268, 276, 324], "relev": [37, 42, 43, 166, 205, 311, 322], "reproduc": [37, 311], "yourself": 37, "why": [37, 59, 78, 102], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 62, 70, 82, 96, 167], "submiss": 37, "fact": [37, 66, 70, 73, 268, 271], "page": [37, 43, 51, 64, 93, 102, 105, 107, 221, 236, 300, 340], "button": [37, 70], "tbf": [37, 63, 99, 319, 330, 333], "isn": [37, 56, 74, 164], "someon": 37, "approach": [37, 54, 70, 74, 81, 82, 91, 93, 95, 96, 164, 240, 253, 308, 323], "spend": 37, "secret": [37, 90, 318, 335, 344], "accident": 37, "hook": 37, "titl": [37, 43, 78, 88, 92], "grammar": 37, "spell": 37, "500": [37, 48, 230], "word": [37, 55, 78, 88, 92, 95, 96, 171, 173, 311], "42": [37, 78, 99, 161, 162, 164, 234, 236, 246, 304], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 95], "patch": 37, "rest": [37, 46, 48, 311, 324], "attain": 37, "brief": [37, 61], "valid": [37, 66, 87, 88, 96, 109, 159, 206, 230, 252, 258, 307, 318, 320], "typo": 37, "feat": 37, "inv": [37, 165, 171, 342], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 324], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 176, 311], "insight": [37, 62, 94, 96, 331], "feedback": [37, 62], "discourag": 37, "rebas": 37, "workflow": [37, 62, 91, 96, 97, 101], "upstream": [37, 165], "leas": 37, "ping": [37, 334], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 57, 64, 304], "approv": 37, "date": [37, 71, 78, 323, 324], "todo": [37, 46, 71, 73, 89, 169], "dongz": 37, "potenti": [37, 52, 54, 82, 91, 323], "concern": [37, 91, 98, 323], "reach": [37, 59, 74, 78, 95, 165, 170, 173, 176, 253, 268, 271, 323], "action": [37, 51, 56], "realiti": [37, 165], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 90, 318, 324], "failur": [37, 98], "stream": [38, 59, 65, 76, 77, 78, 82, 165, 170, 173], "stdout": 38, "log_level": [38, 42, 158], "permiss": [38, 45, 59, 110, 337], "consol": [38, 54, 65, 67, 70, 79, 81, 90, 95, 174, 324, 340], "frontend": [38, 39, 46, 65, 67, 68, 69, 77, 324, 332], "event": [38, 230], "involvedobject": 38, "warn": [38, 311], "pinpoint": 38, "exec": [38, 324, 332], "diagnost": 38, "forward": [38, 54, 82, 84, 85, 87, 88, 92, 96, 165, 324, 338], "browser": [38, 78], "explain": [38, 78, 160, 318, 323, 342], "leverag": [39, 72, 74, 80, 81, 93, 95, 106, 303, 320, 324, 328], "opentelemetri": 39, "javaag": 39, "agent": 39, "protocol": [39, 69, 72, 90, 98, 318], "java_tool_opt": 39, "TO": 39, "otel_service_nam": 39, "compris": [41, 43, 71, 74, 88, 91, 164], "busi": [41, 66, 78, 82, 90, 91, 92, 98], "e2": [41, 290], "coupl": [41, 93, 98, 291, 320], "straightforward": [42, 68, 92], "gs_interact": [42, 43, 50, 51, 55, 56], "tailor": [42, 48], "align": [42, 43, 44, 45, 51, 55, 66, 76, 85, 95, 159, 162, 163, 262, 323], "engine_config": [42, 48, 318], "unconfigur": 42, "glimps": 42, "what": [42, 51, 55, 59, 65, 78, 79, 95, 170, 257, 311, 317, 323], "compute_engin": 42, "thread_num_per_work": 42, "planner": [42, 55], "is_on": 42, "rbo": [42, 66], "filtermatchrul": 42, "filterintojoinrul": 42, "notexisttoantijoinrul": 42, "query_timeout": 42, "20000": 42, "timeout": [42, 59, 67, 68], "millisecond": [42, 99], "default_listen_address": 42, "localhost": [42, 67, 69, 77, 90, 318, 344], "bolt_connector": [42, 54], "cypher": [42, 43, 46, 47, 48, 55, 57, 65, 66, 67, 68, 70, 72, 73, 91, 92, 93, 97, 98, 174, 318], "7687": [42, 46, 51, 54, 65, 67, 69, 70], "gremlin_connector": [42, 54], "8182": [42, 46, 65, 67, 77, 324], "http_servic": 42, "admin_port": 42, "7777": [42, 46], "query_port": [42, 48], "10000": [42, 46, 308], "hierarchi": [42, 44], "propertynam": [42, 324], "databas": [42, 43, 52, 54, 59, 66, 72, 73, 78, 91, 93, 95, 97, 99, 324, 334], "debug": [42, 59, 160, 165, 318, 324, 332], "default_graph": 42, "benefit": [42, 73, 77, 90, 94, 323], "throughput": [42, 46, 54, 57, 66, 91, 97, 98, 324], "claus": [42, 54, 72, 73], "calcit": [42, 65, 73], "notmatchtoantijoinrul": 42, "transform": [42, 50, 66, 73, 78, 101, 113, 126, 303, 311, 312, 316, 322], "anti": [42, 71, 73, 91, 95, 98], "bind": [42, 102, 323], "admin": [42, 46, 47, 54, 57, 173, 324], "submit": [42, 51, 54, 66, 69, 70, 76, 77, 78, 92, 95, 160, 161, 174, 320, 324, 338], "movi": [43, 55, 93, 161], "interactive_hom": [43, 53], "destroi": [43, 56], "csv": [43, 46, 57, 62, 65, 70, 90, 173, 311, 314, 322, 324, 325, 338, 339, 344], "volum": [43, 46, 51, 56, 59, 65, 73, 77, 234, 235, 236, 246, 255, 300, 318, 323], "crucial": [43, 45, 48, 50, 91], "conclud": [43, 159], "reflect": [43, 76, 323, 331], "v0": [43, 46, 99, 166, 314], "vertex_typ": [43, 45, 48], "type_nam": [43, 44, 45, 48], "property_nam": [43, 45, 48, 78, 103, 104, 317], "property_typ": [43, 45, 48], "primitive_typ": [43, 45, 48], "dt_signed_int64": [43, 45, 48], "dt_signed_int32": [43, 45, 48], "taglin": 43, "dt_string": [43, 45, 48], "primary_kei": [43, 45, 48, 324], "born": 43, "acted_in": 43, "vertex_type_pair_rel": [43, 45, 48], "source_vertex": [43, 44, 45, 48], "destination_vertex": [43, 44, 45, 48], "many_to_mani": [43, 45, 48], "review": [43, 91, 102, 176, 240, 258], "wrote": 43, "dt_unsigned_int32": [43, 45], "dt_unsigned_int64": [43, 45], "dt_bool": [43, 45], "dt_float": [43, 45], "dt_doubl": [43, 45, 48], "dt_date32": [43, 45], "comprehens": [43, 48, 54, 55, 56, 91, 97, 99, 100], "administr": [43, 48, 51, 288], "loading_config": [43, 44, 48], "data_sourc": [43, 44, 48], "odp": [43, 57, 160], "import_opt": [43, 44, 48], "append": [43, 58, 78, 87, 88, 89, 92, 104, 159, 170, 171, 242, 305, 338, 343], "overwrit": [43, 44, 56, 318, 324], "delimit": [43, 44, 65, 173, 313, 325, 339], "edge_map": [43, 44, 48], "type_triplet": [43, 44, 48], "column_map": [43, 44, 48], "understand": [43, 44, 78, 85, 95, 159, 165, 173, 323], "consult": [43, 54], "graph_algo": 43, "flex": [43, 54, 57, 331], "delv": [44, 48], "deeper": 44, "thorough": 44, "examin": [44, 73, 92], "modern_import_ful": 44, "showcas": 44, "dissect": 44, "header_row": [44, 65, 173, 325], "quot": 44, "quote_char": 44, "double_quot": 44, "escape_char": 44, "block_siz": 44, "4mb": 44, "person_knows_person": [44, 324], "source_vertex_map": [44, 48], "destination_vertex_map": [44, 48], "person_created_softwar": 44, "dd_graph": 44, "your_proj_nam": 44, "table_nam": 44, "partition_col_nam": 44, "partition_nam": 44, "src_user_id": 44, "dst_user_id": 44, "mandatori": [44, 45, 92, 160], "ye": [44, 62, 311], "No": [44, 59, 76, 311], "header": [44, 65, 173, 323, 324], "escap": 44, "batch_siz": [44, 85, 87, 89, 159, 163, 164, 165, 168, 171, 327, 343], "triplet": [44, 45, 74], "outlin": [44, 67, 71], "seamlessli": [44, 51, 62, 65, 72, 79, 81, 91, 97, 98], "encompass": [45, 69, 73, 77, 88], "friendship": 45, "peopl": [45, 66, 70, 78, 311, 324], "since_d": 45, "explan": [45, 48, 54, 102, 163], "terminologi": [45, 71], "delin": 45, "plan": [45, 54, 66, 71, 91, 93, 94, 95, 106, 324, 332], "character": [45, 163], "exclus": [45, 50, 71], "symbol": 45, "skill": 45, "profici": [45, 78], "one_to_on": 45, "one_to_mani": [45, 48], "many_to_on": 45, "x_csr_param": 45, "max_vertex_num": 45, "mmap": 45, "48": [45, 62, 99, 161, 162, 164, 263, 264, 310], "edge_storage_strategi": 45, "only_in": 45, "only_out": 45, "both_out_in": 45, "pertain": [45, 65], "albeit": 45, "previous": [45, 55, 78, 110, 247, 248, 249, 322, 323], "mention": [45, 76, 78, 322, 323, 332], "component_typ": 45, "max_length": 45, "overflow": 45, "truncat": [45, 296, 297, 298, 303], "bolt": [46, 51, 54, 67, 69, 70, 95], "grep": [46, 65], "awk": [46, 65], "192": 46, "168": [46, 99], "pvc": [46, 65, 318, 324], "higher": [46, 66, 97, 176, 186, 250, 324], "nf": [46, 59, 170, 337], "dataload": [46, 48, 89], "pv": [46, 59, 65, 318, 324, 337], "vim": 46, "someth": [46, 68, 311], "claim": [46, 65, 293, 323, 324], "emptydir": 46, "existingclaim": 46, "replicacount": [46, 65, 324], "num": [46, 58, 67, 77, 78, 172, 323], "gremlinport": [46, 65], "hiactor": [46, 91], "hiactorworkernum": 46, "hiactortimeout": 46, "240000": [46, 67], "craft": [47, 54, 55], "listgraph": 47, "graphmanag": 47, "categori": [47, 71, 76, 82, 84, 85, 92, 96, 171], "creategraph": 47, "deletegraph": 47, "getgraphschema": 47, "importgraph": 47, "createprocedur": 47, "proceduremanag": 47, "listallprocedur": 47, "getprocedur": 47, "updateprocedur": 47, "deleteprocedur": 47, "startservic": 47, "servicemanag": 47, "servicestatu": 47, "systemmetr": 47, "nodemetr": 47, "adminservic": 47, "seek": [48, 170], "intric": [48, 50, 78], "toolkit": 48, "post": [48, 59, 78, 90, 165, 230, 344], "showprocedur": 48, "proc_nam": [48, 56], "bodi": [48, 165, 169, 277], "metric": [48, 96, 258, 259, 260, 261, 262], "x": [48, 77, 78, 89, 99, 102, 159, 165, 171, 176, 214, 247, 255, 257, 258, 262, 286, 343], "type_id": 48, "property_id": [48, 104], "200": [48, 78, 159, 317, 327, 343], "ok": [48, 101], "yourfil": 48, "404": 48, "Not": [48, 54, 73, 311, 324], "graph_nam": [48, 55, 56, 67], "path_to_fil": 48, "bound_graph": 48, "procedure_nam": [48, 55], "query_servic": 48, "reject": [48, 318], "unabl": 48, "cpu_usag": 48, "memory_usag": 48, "workspac": 48, "maintan": 48, "interactive_serv": 48, "subprocess": 48, "inspir": [50, 106, 311], "neo4j": [50, 51, 52, 54, 55, 64, 65, 67, 68, 69, 70, 71, 93, 98, 99, 174, 322], "empow": [50, 72, 79, 95], "skeleton": [50, 279, 282, 296, 297], "param_nam": [50, 54], "clariti": [50, 71], "mandat": 50, "hous": [50, 91, 285, 286], "personid": 50, "draft": 50, "query1": 50, "firstnam": [50, 78, 90, 339, 344], "lastnam": [50, 78, 90, 339, 344], "intrins": 50, "absenc": 50, "imper": [50, 76, 95], "subsequ": [50, 51, 55, 65, 66, 67, 73, 77, 102, 160, 161], "1l": [50, 55, 76], "conclus": [50, 78], "effortlessli": [50, 92], "streamlin": [50, 73, 76], "depth": [51, 67, 71, 92, 159, 171, 176, 343], "graph_data": 51, "gs_interactive_conf": 51, "breakdown": [51, 57], "regist": [51, 52, 54, 66, 73, 90, 101, 104, 133, 318], "meta": [51, 67, 82, 90, 101, 162, 163, 173, 322, 324], "tell": [51, 323], "eras": [51, 56], "irrevers": [51, 56], "caution": 51, "establish": [51, 62, 324], "connector": [51, 54, 69, 78], "opencyph": [51, 93], "supported_cyph": [51, 54], "term": [52, 82], "proc": [52, 263, 264, 268, 269, 310], "storp": 52, "sproc": 52, "stopro": 52, "storedproc": 52, "storeproc": 52, "subroutin": 52, "rdbm": [52, 70], "wikipedia": [52, 94, 102, 273, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 295, 296, 297, 298, 304], "nest": [52, 76], "sole": [53, 70, 71], "theori": [53, 85, 163, 171], "arm64": 53, "mac": [53, 106, 336, 338], "gs_interactive_hom": 53, "concurr": [54, 57, 91, 161], "impress": [54, 57], "Its": [54, 57, 59, 93, 290, 323], "timefram": [54, 57], "emphas": [54, 57, 98], "stand": [54, 98, 163, 164, 323], "shoulder": 54, "pivot": 54, "pillar": 54, "qp": [54, 65, 78, 97, 324], "snb": [54, 78, 90, 339, 344], "180": 54, "87": [54, 99, 302], "op": [54, 103, 113, 115, 116, 117, 118, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 145, 146, 169, 311, 315, 318], "boast": 54, "highlight": [54, 71, 91, 95], "laid": 54, "triumph": 54, "ten": [54, 94, 98, 163], "thousand": 54, "swiftli": 54, "versatil": [54, 73, 97, 323], "expans": [54, 95, 96, 168, 342], "prowess": 54, "prime": [54, 255, 257], "gql": [54, 66, 91, 98], "scalabl": [54, 65, 77, 94, 95, 96, 97, 98, 308], "possess": 54, "larger": [54, 74, 78, 88, 258], "massiv": [54, 66, 95], "too": [54, 65, 78, 98, 161, 230, 311], "offload": [54, 324], "excess": 54, "slave": 54, "constraint": [54, 71, 78, 79, 95], "portion": [54, 78, 94, 95, 103, 173], "occurr": [54, 70, 95], "categor": [54, 85], "gettingstart": 54, "syntax": [54, 71, 76, 85, 95, 103, 165, 311, 317], "definit": [54, 76, 91, 176, 257, 258, 260], "ir": [54, 65, 66, 67, 91, 93], "unif": 54, "physic": [54, 65, 66, 91, 102, 176, 234, 235, 236, 258, 322], "ddl": 54, "supported_gremlin_step": 54, "acid": [54, 97], "stored_procedure_1": 55, "flag": [55, 160, 161], "taken": [55, 311], "account": [55, 66, 95, 309, 342], "compile_onli": [55, 56], "stored_procedur": [55, 56], "comma": [55, 160], "proc1": 55, "proc2": 55, "appear": [55, 59, 66, 78, 102, 216, 218, 220, 223, 225, 252, 253, 311, 337], "capit": [55, 71, 73], "aspect": [56, 66, 73, 78, 98], "entri": [56, 66, 76, 78, 85, 87, 175, 176, 223, 240, 242, 243, 268, 270, 271, 289, 331], "desc": [56, 76, 78], "input_fil": 56, "solid": [57, 279, 296, 297], "prerequisit": 57, "entiti": [57, 73, 74, 78, 88, 92, 96, 160], "helm": [57, 59, 64, 65, 324, 335, 337], "\u6807\u7b7e": 58, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 58, "\u5c5e\u6027": [58, 342, 344], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 58, "\u539f\u59cbid": 58, "oid": [58, 101, 103, 104], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 58, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 58, "\u5b50\u56feid": 58, "fid": [58, 101, 104, 136, 320], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 58, "\u5206\u533a\u5668": 58, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 58, "\u7684\u6620\u5c04": 58, "\u5b50\u56fe": 58, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 58, "\u5b58\u50a8\u4e86\u9876\u70b9": 58, "\u8fb9": [58, 334], "\u9876\u70b9\u6570\u636e": 58, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 58, "\u5185\u90e8\u70b9": 58, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 58, "\u5916\u90e8\u70b9": 58, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 58, "\u672c\u5730id": 58, "lid": [58, 101, 136], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 58, "\u5168\u5c40id": 58, "gid": [58, 101, 136], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 58, "\u88abfragment\u5171\u8bc6": 58, "\u7528\u4e8e\u5b58\u50a8gid": 58, "oid\u7684\u6620\u5c04\u5173\u7cfb": 58, "\u7684\u8282\u70b9": 58, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 58, "gid\u7f16\u7801": 58, "\u5176\u4e2d": [58, 334, 339], "\u548c": [58, 165, 334, 336, 337, 338, 339, 341, 342, 343, 344], "\u5171\u540c\u7ec4\u6210": 58, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 58, "\u7684\u9876\u70b9": 58, "\u5e8f\u53f7": 58, "lid\u7f16\u7801": 58, "\u586b\u5145": 58, "\u603b\u662f": 58, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 58, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 58, "\u5206\u4e3ahashpartitioner\u548csegmentedpartition": 58, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 58, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 58, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 58, "\u8fb9\u6587\u4ef6": 58, "\u5f97\u5230\u591a\u4e2avertex": 58, "\u548cedg": 58, "etabl": 58, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 58, "\u5206\u7ec4": 58, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 58, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 58, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 58, "\u8fb9\u8868": 58, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 58, "partial_v_t": 58, "partial_e_t": 58, "table\u5305\u542boid": 58, "table\u5305\u62ecsrc\u548cdst\u7684oid": 58, "\u8bbf\u95eevtable\u7684oid\u5217": 58, "\u6839\u636eoid\u67e5\u8be2partit": 58, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 58, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 58, "gather\u64cd\u4f5c": 58, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 58, "\u6839\u636efrag\u6570\u91cf": 58, "label\u6570\u91cf\u548c\u5168\u90e8oid": 58, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 58, "fid_t": [58, 101], "fnum_": 58, "label_id_t": [58, 101], "label_num_": 58, "hashmapbuild": 58, "cur_gid": 58, "id_parser_": 58, "generateid": 58, "\u8d77\u59cbgid": 58, "vnum": 58, "length": [58, 62, 71, 76, 78, 90, 95, 102, 163, 176, 215, 217, 222, 244, 265, 269, 275, 297, 306, 311, 344], "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 58, "\u751f\u6210gid": 58, "emplac": 58, "getview": 58, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 58, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 58, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 58, "\u6839\u636epartitioner\u83b7\u53d6fid": 58, "\u6839\u636efid": 58, "id\u548coid\u67e5\u8be2gid": 58, "\u751f\u6210gid\u6570\u7ec4": 58, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 58, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 58, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 58, "\u5bf9etable\u6267\u884cshuffl": 58, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 58, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 58, "\u5904\u7406\u9876\u70b9": 58, "\u521d\u59cb\u5316id": 58, "parser": [58, 66], "\u521d\u59cb\u5316ivnum": 58, "ovnum\u548ctvnum\u6570\u7ec4": 58, "\u6309\u7167vertex": 58, "label\u5206\u7ec4": 58, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 58, "\u5411vertex": 58, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 58, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 58, "\u5c06vertex": 58, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 58, "vid_parser_": 58, "vertex_label_num_": 58, "resiz": 58, "ivnums_": 58, "ovnums_": 58, "tvnums_": 58, "combinechunk": 58, "default_memory_pool": 58, "vm_ptr_": 58, "getinnervertexs": [58, 101], "fid_": 58, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 58, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 58, "\u901a\u8fc7src": 58, "gid\u5217\u548cdst": 58, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 58, "\u5e76\u6309\u7167vertex": 58, "edge_t": [58, 160, 171], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 58, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 58, "collect_outer_vertic": 58, "dynamic_pointer_cast": [58, 325], "converttoarrowtyp": [58, 101], "arraytyp": [58, 101], "chunk": [58, 146], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 58, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 58, "\u5916\u90e8\u70b9\u7684lid\u7531label": 58, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 58, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 58, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 58, "ovg2l_maps_": 58, "ovgid_lists_": 58, "cur_list": 58, "collected_ovgids_": 58, "\u6392\u5e8fgid": 58, "cur_map": 58, "buildertyp": 58, "vec_build": 58, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 58, "\u5176\u4e2dfid\u4e3a0": 58, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 58, "cur_id": 58, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 58, "cur_list_length": 58, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 58, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 58, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 58, "\u5220\u9664edg": 58, "table\u7684src\u5217\u548cdst\u5217": 58, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 58, "generate_local_id_list": 58, "gid_list": 58, "lid_list": 58, "vec": 58, "getfid": 58, "\u751f\u6210\u5185\u90e8\u70b9lid": 58, "getlabelid": 58, "getoffset": 58, "\u67e5\u8be2g2l": 58, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 58, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 58, "edge_src_": 58, "edge_dst_": 58, "table\u7684src\u5217\u548cgid\u5217": 58, "\u53ea\u4fdd\u7559\u5c5e\u6027": 58, "tmp_table0": 58, "removecolumn": 58, "\u6784\u5efacsr": 58, "\u5bf9\u4e8e\u6709\u5411\u56fe": 58, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 58, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 58, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 58, "\u6784\u5efarow": 58, "offset\u6570\u7ec4": 58, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 58, "\u4f7f\u7528row": 58, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 58, "\u586b\u5145dst": 58, "lid\u548ceid\u5230nbr": 58, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 58, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 58, "generate_directed_csr": 58, "vid_array_t": [58, 101], "src_list": 58, "dst_list": 58, "fixedsizebinaryarrai": 58, "int64arrai": 58, "edge_offset": 58, "actual_edge_num": 58, "v_label": [58, 101, 320], "edge_num": [58, 136, 338, 342], "src_list_ptr": 58, "raw_valu": 58, "dst_list_ptr": 58, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 58, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 58, "tvnum": 58, "offset_vec": 58, "degree_vec": 58, "int64build": 58, "podarraybuild": 58, "nbr_unit_t": [58, 101], "edge_build": 58, "v_offset": 58, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 58, "ptr": 58, "mutablepoint": 58, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 58, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 58, "vid": [58, 101, 173], "eid_t": [58, 101], "\u66f4\u65b0offset": 58, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 58, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 58, "offsets_ptr": 58, "lh": 58, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 58, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 58, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 58, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 58, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 58, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 58, "lid\u548ceid": 58, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 58, "\u5c01\u88c5": 58, "seal": [58, 81, 96], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 58, "ovgid\u548cg2l_map\u540e": 58, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 58, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 58, "\u4e5f\u5c31\u662f\u8bf4": [58, 335], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 58, "\u5f53\u524dfragment": 58, "fragment\u603b\u6570": 58, "directed_": 58, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 58, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 58, "edge_label_num_": 58, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 58, "propertygraphschema": 58, "schema_": 58, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 58, "\u9876\u70b9\u5c5e\u6027\u8868": 58, "\u4e0d\u5305\u542bid\u5217": 58, "\u5916\u90e8\u70b9gid": 58, "gid\u5230lid\u6620\u5c04": 58, "\u8fb9\u5c5e\u6027": 58, "csr\u7ed3\u6784\u7684column": 58, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 58, "csr\u7ed3\u6784\u7684row": 58, "vertex_map_t": [58, 101], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 58, "edge_tables_columns_": 58, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 58, "flatten_edge_tables_columns_": 58, "\u540c\u4e0a": 58, "vertex_tables_columns_": 58, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 58, "ie_ptr_lists_": 58, "oe_ptr_lists_": 58, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 58, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 58, "\u4e5f\u5c31\u662fcolumn": 58, "index\u7684\u8d77\u59cb\u5730\u5740": 58, "ie_offsets_ptr_lists_": 58, "oe_offsets_ptr_lists_": 58, "\u51fa\u8fb9\u7684row": 58, "offset\u8d77\u59cb\u5730\u5740": 58, "offset\u7684\u8d77\u59cb\u5730\u5740": 58, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 58, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 58, "\u76ee\u7684\u9876\u70b9fid": 58, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 58, "idst_": 58, "odst_": 58, "iodst_": 58, "idoffset_": 58, "odoffset_": 58, "iodoffset_": 58, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 58, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 58, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 58, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 58, "id\u548c\u9876\u70b9\u5e8f\u53f7": 58, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 58, "ivnum": 58, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 58, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 58, "vertex_range_t": [58, 101], "label_id": [58, 101, 103, 104, 136], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 58, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 58, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 58, "\u5c5e\u6027id": 58, "\u5217\u53f7": 58, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 58, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 58, "\u884c\u53f7": 58, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 58, "getdata": [58, 101], "prop_id_t": [58, 101], "prop_id": 58, "property_graph_util": [58, 101], "valuegett": 58, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 58, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 58, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 58, "adj_list_t": [58, 101], "e_label": [58, 101], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 58, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 58, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 58, "offset_arrai": 58, "\u8bbf\u95eerow": 58, "oe": 58, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 58, "\u751f\u6210adjlist\u5bf9\u8c61": 58, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 58, "\u7ed3\u675f\u5730\u5740": 58, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 58, "\u548c\u51fa\u8fb9\u540c\u7406": 58, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 58, "ie": 58, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 58, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 58, "\u5bf9\u5e94\u5230\u884c\u53f7": 58, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 58, "\u4f8b\u5982": [58, 334, 338, 342, 344], "\u83b7\u53d6edg": 58, "struct": [58, 101, 234, 267], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 58, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 58, "edata_arrays_": 58, "nbr_": 58, "8g": 59, "18": [59, 68, 78, 99, 161, 162, 164, 176, 234, 283, 288, 292, 294, 297, 303, 334, 337, 341], "silent": [59, 311, 332], "did": [59, 171], "role": [59, 66, 80, 93, 161, 170, 176, 262, 300, 308, 324, 328, 332, 337], "rolebind": [59, 337], "uninstal": [59, 65, 337], "recycl": 59, "alloc": [59, 83, 87], "seem": [59, 78], "stuck": 59, "consumpt": 59, "poor": [59, 167], "acquir": [59, 69, 77], "mostli": [59, 67, 137], "visibl": [59, 104], "cloud": [59, 97, 98, 324], "k8s_vineyard_mem": [59, 158, 318, 337], "shape": [59, 84, 85, 88, 92, 101, 103, 162, 163, 164, 165, 168, 171, 175, 233, 338], "forth": 59, "smaller": [59, 78, 99, 174, 176, 232, 233, 237], "shared_mem": [59, 337], "grpcio": [59, 337], "grpc_python_build_system_openssl": [59, 337], "scipi": [59, 258, 259, 260, 261, 311, 314, 337], "anaconda": [59, 337], "workaround": 59, "openbla": 59, "tri": [59, 62, 87, 95, 240, 246], "pkgconfig": 59, "cmake_prefix_path": 59, "brew": 59, "deni": [59, 110, 337], "kafka": [59, 320, 324, 337], "zookeep": [59, 337], "crashloopbackoff": [59, 337], "bitnami": [59, 337], "755": 59, "1001": [59, 324], "brutal": 59, "chmod": [59, 77, 337], "777": [59, 99, 337], "eleg": [59, 62], "grant": [59, 308], "rais": [59, 66, 102, 110, 112, 146, 158, 165, 173, 174, 176, 182, 191, 195, 196, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 250, 252, 255, 256, 257, 268, 271, 303, 306, 307, 311, 314, 318], "timeout_second": [59, 158, 318, 337], "600": [59, 99, 318, 337], "enterpris": 59, "proxi": [59, 337], "properli": [59, 74], "wrong": 59, "resolut": [59, 324], "occup": 59, "hostnam": [59, 337], "no_proxi": [59, 337], "suffix": [59, 76], "flush": 59, "forcibli": 59, "contact": 59, "slack": [59, 337], "dingtalk": [59, 337], "happi": 59, "90": [61, 99], "traffic": 62, "web": [62, 102, 176, 244, 258, 263, 304], "ever": [62, 85], "amount": [62, 77, 83, 96, 163, 165, 167], "hidden": [62, 93, 94, 96, 159, 343], "attract": 62, "attent": [62, 96, 165], "difficult": [62, 160, 170, 324], "obstacl": 62, "attempt": [62, 65, 94, 95, 98, 311], "curv": [62, 94], "hard": [62, 76, 86, 87, 272, 323], "complic": [62, 66, 78, 103], "sql": [62, 66, 73, 76, 78, 79], "deep": [62, 85, 91, 159, 164, 165, 167, 187, 190, 299, 311], "gnn": [62, 64, 82, 84, 85, 88, 91, 92, 97, 98, 159, 163, 164, 165, 167, 168, 318, 340, 343], "train": [62, 70, 82, 84, 85, 86, 91, 92, 97, 98, 100, 161, 164, 165, 167, 168, 171, 175, 318, 338, 343], "fist": 62, "interpret": [62, 91, 176], "mount_dataset": [62, 90], "ran": [62, 87], "p2p_network": 62, "embed": [62, 82, 88, 92, 96, 160, 167], "inter": [62, 172, 230, 233], "wherea": [62, 230, 323], "numpi": [62, 78, 82, 101, 103, 118, 129, 138, 162, 163, 165, 166, 167, 168, 171, 173, 175, 176, 303, 311, 314, 340], "datafram": [62, 90, 103, 117, 128, 138, 141, 173, 311, 334, 344], "head": [62, 65, 70, 76, 78], "creationd": [62, 78, 90, 339, 344], "locationip": [62, 90, 344], "browserus": [62, 78, 90, 344], "618475290625": 62, "2011": [62, 78, 244], "08": [62, 99, 176], "17t14": 62, "26": [62, 76, 78, 99, 161, 162, 164, 260], "59": [62, 99], "961": 62, "210": [62, 99, 307], "17": [62, 78, 99, 161, 162, 164, 334], "chrome": [62, 78], "618475290626": 62, "17t11": 62, "570": 62, "comment_replyof_com": 62, "274877907301": 62, "274877907299": 62, "274877907302": 62, "pd": [62, 70, 90, 344], "df_v": [62, 90, 334, 344], "read_csv": [62, 70, 90, 344], "sep": [62, 70, 90, 173, 344], "df_e": [62, 90, 344], "graphcomput": [64, 342], "gl": [64, 85, 97, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172], "neural": [64, 82, 91, 92, 97, 98, 100, 159, 160, 163, 165, 167, 171], "posit": [64, 78, 96, 97, 159, 165, 176, 221, 240, 242, 243, 245, 246, 250, 258, 259, 260, 261, 262, 306, 309, 323, 326], "frequent": [64, 91, 94, 324], "groot": [64, 74, 91, 98], "graphar": 64, "gart": 64, "gap": 64, "oltp": [64, 91, 93], "style": [64, 81, 91, 316], "wonder": 65, "throughout": [65, 66, 76], "smoothli": 65, "easiest": 65, "websit": [65, 94, 230], "untar": 65, "cp": [65, 67, 308, 323], "tree": [65, 93, 211, 213, 221, 241, 247, 249, 259, 260, 261, 274, 275, 312, 318, 344], "your_release_nam": 65, "cypherport": 65, "littl": [65, 76, 78], "v6d_modern_load": [65, 67], "data_path": [65, 325], "store_data_path": [65, 67], "src_label": [65, 90, 173, 314, 318, 324, 325, 338, 339], "dst_label": [65, 90, 173, 314, 318, 324, 325, 338, 339], "thing": [65, 165, 331], "key1": 65, "value1": [65, 90, 344], "key2": 65, "value2": 65, "token": [65, 76], "column_typ": 65, "infer": [65, 90, 96, 97], "filed1": 65, "filed2": 65, "unexpect": 65, "troubl": 65, "correspondingli": [65, 85, 268, 271], "v6d_ldbc_loader": 65, "hdf": [65, 90, 138, 170, 173, 324, 334, 344], "pegasusworkernum": 65, "pegasustimeout": 65, "durat": [65, 76], "000": [65, 78, 99], "pegasusbatchs": 65, "1024": [65, 67, 76], "pegasusoutputcapac": 65, "frontendquerypersecondlimit": 65, "2147483647": [65, 324], "gremlinscriptlanguagenam": 65, "antlr_gremlin_travers": 65, "antlr_gremlin_calcit": 65, "inher": 66, "manufactur": 66, "upcom": 66, "sticki": 66, "shelv": 66, "intellig": [66, 78, 91, 98, 268, 271], "hybrid": [66, 323, 324], "dedupl": 66, "latenc": [66, 77, 91, 97, 98], "hope": [66, 78, 324], "trade": [66, 91, 324], "inevit": 66, "realist": [66, 303], "lengthi": 66, "verif": [66, 91], "80": [66, 99, 290], "decoupl": [66, 91, 98], "upper": [66, 76, 78, 82, 95, 230, 323], "briefli": [66, 96], "algebra": [66, 300], "edgeexpans": 66, "pathexpans": 66, "legal": 66, "predic": [66, 78], "arithmet": [66, 76, 78], "firstli": [66, 74, 78, 90, 98], "down": [66, 73, 89, 228], "cbo": 66, "statist": [66, 73, 78, 162], "glogu": 66, "shuffl": [66, 76, 89, 165, 171, 175], "plu": [66, 76, 78, 214, 286], "unaccept": 66, "come": [66, 70, 78, 81, 90, 92, 93, 96, 97, 99, 162, 277, 314], "end2end": 67, "sf": [67, 78], "v6d_object_id": 67, "unsur": [67, 70], "assist": [67, 72, 94], "vineyard_ipc_socket": [67, 325], "gie_test_hom": 67, "rpc": [67, 101, 172, 318, 324], "1234": 67, "127": [67, 99, 324], "11234": 67, "pegasu": [67, 91], "gaia_executor": 67, "log4r": [67, 324], "yml": [67, 322, 324], "authent": [67, 69, 97, 324], "usernam": [67, 324], "password": [67, 324], "auth": [67, 69, 176, 324], "djna": 67, "kill": [67, 318], "pkill": 67, "gcc": [68, 99, 341], "64": [68, 77, 85, 164, 165, 242, 342], "chip": [68, 341], "hereaft": [68, 78, 92], "q1": [68, 70, 78, 92], "q2": [68, 78, 92], "q3": [68, 78, 92], "453": 68, "xxx": [68, 70, 169, 318, 334], "pppp": 68, "startup": 68, "600000": 68, "entr": 68, "ee": 68, "syntact": [68, 74, 79, 95], "sugar": [68, 74, 79, 95], "graphdatabas": 69, "routingcontrol": [69, 92], "uri": [69, 90, 344], "print_top_10": 69, "execute_queri": 69, "routing_": [69, 92], "simpler": [69, 77, 78, 311], "nowadai": 70, "shortcom": [70, 74, 78], "gpt": 70, "materi": 70, "year": [70, 78, 92, 94, 338], "mislead": 70, "hot": 70, "cold": 70, "workabl": 70, "significantli": [70, 73, 74, 94, 97], "openai": 70, "novic": 70, "dream": 70, "chamber": 70, "25": [70, 78, 84, 88, 92, 99, 161, 162, 164, 233, 235, 238, 257, 304, 338], "langchain": 70, "316": 70, "suchun": 70, "sv": 70, "nodes_set": 70, "stone_story_nodes_rel": 70, "vid_field": [70, 90, 173, 339], "edges_set": 70, "stone_story_edg": 70, "edges_sets_": 70, "src_field": [70, 90, 173, 339], "dst_field": [70, 90, 173, 339], "daughter_in_law_of_grandson_of": 70, "wife_of": 70, "api_kei": 70, "query_to_cyph": 70, "langchain_prompt": 70, "son": 70, "baoyu": 70, "jia": 70, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 70, "cypher_sent": 70, "son_of": 70, "q": [70, 77, 163, 165, 171, 253, 257], "\u8d3e\u5b9d\u7389": 70, "lastli": 70, "\u8d3e\u653f": 70, "stori": 70, "compli": [71, 165], "unaddress": 71, "regard": [71, 78, 88, 323], "keyword": [71, 178, 179, 180, 247, 254, 258, 259, 260, 261, 262, 311, 314, 317, 318], "insensit": [71, 76], "lowercas": 71, "letter": [71, 305], "slightli": [71, 166, 230, 317], "elabor": [71, 98], "boolean": [71, 73, 76, 90, 102, 104, 161, 165, 176, 195, 196, 233, 235, 238, 269, 309], "integ": [71, 76, 176, 211, 214, 215, 216, 217, 218, 220, 222, 223, 225, 226, 229, 230, 233, 234, 235, 236, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 276, 289, 303, 304, 305, 306, 308, 311, 324], "byte": [71, 102, 110, 170], "tempor": 71, "int32": [71, 84, 88, 92, 160, 162, 170, 171, 338], "uint32": 71, "int64": [71, 90, 104, 130, 152, 160, 162, 163, 168, 170, 171, 173, 318, 344], "uint64": [71, 152, 173, 318], "byte_arrai": 71, "null": [71, 76, 176, 193, 209, 210, 217, 224, 276, 306, 311], "datetim": 71, "zone": 71, "citizen": 71, "unsupport": [71, 74, 76], "conceiv": [71, 258], "inner_typ": 71, "mathemat": [71, 243, 245, 253, 255, 257, 266], "moment": [71, 106, 324], "averag": [71, 76, 88, 92, 102, 176, 230], "avg": [71, 76, 176], "summar": [71, 78, 82], "subtract": [71, 76], "divis": [71, 76], "modulo": [71, 76, 255], "exponenti": [71, 76, 78, 96, 258, 260, 261], "inequ": 71, "NOT": [71, 76, 323], "sensit": [71, 303], "WITH": [71, 76], "conjunct": 71, "AND": [71, 76, 92, 104], "disjunct": 71, "OR": [71, 74, 76, 104, 311], "xor": [71, 76], "negat": [71, 76], "bitopr": 71, "scalar": [71, 169, 176], "listliter": 71, "fold": [71, 323, 342], "mapliter": 71, "interv": [71, 230, 262, 318], "notabl": 71, "AS": [71, 74, 308, 312], "BY": [71, 74], "interconnect": [72, 94, 161], "tcp": 72, "llm": 72, "sentenc": [72, 73, 76, 78], "tradition": 73, "accommod": [73, 98], "heurist": [73, 95, 238], "coexist": 73, "sophist": [73, 93], "cardin": 73, "primarili": [73, 78, 95, 323], "stem": 73, "atc": 73, "instrument": 73, "efficaci": 73, "alias": [73, 76], "p1": [73, 78], "p2": [73, 78], "id1": [73, 342], "id2": [73, 342], "expedit": 73, "intent": 73, "k1": [73, 76], "k2": [73, 76], "p3": 73, "retain": [73, 76, 252, 325], "constrain": 73, "simultan": [73, 92, 98, 320], "necessit": [73, 91], "lai": 73, "groundwork": 73, "conform": 73, "nonexist": 73, "kno": 73, "mismatch": 73, "websocket": [74, 342], "worth": [74, 88, 165, 173, 311], "mutat": 74, "lambda": [74, 78, 159, 165, 171, 176, 247, 258, 260, 261, 262, 343], "groovi": 74, "currenttimemilli": [74, 324, 342], "expr": [74, 76, 78, 342], "transact": [74, 91, 97, 98, 99, 320, 324, 334], "secondari": 74, "rocksdb": [74, 324], "isol": [74, 176, 272, 324], "therein": 74, "council": [74, 99], "birthdai": [74, 90, 344], "differenti": 74, "123456": [74, 82, 96, 324], "hasid": 74, "expos": [74, 80, 163, 174, 318, 328], "secondli": [74, 98], "path_expand": 74, "desir": [74, 173, 230, 252, 272, 274, 275], "concret": [74, 102, 103, 173], "endv": [74, 78, 95, 342], "repeat": [74, 95, 96, 165, 171, 245, 250, 253, 273, 276, 342], "path_opt": [74, 76, 78, 95, 342], "pathexpand": 74, "marko": [74, 76, 78], "27": [74, 76, 78, 99, 161, 162, 164, 292], "hasstep": 74, "groupcount": [74, 342], "age_cnt": 74, "age_sum": 74, "scan": [74, 323], "propertyidvalu": 74, "moreov": [74, 76, 91, 95, 97, 323], "propertyidvalue1": 74, "propertyidvalue2": 74, "inE": [74, 165, 342], "conquer": 75, "situat": [76, 78, 81, 160, 161, 324], "meant": [76, 78], "vertexid": 76, "inject": 76, "edgeid": 76, "edgelabel": [76, 123], "histori": [76, 78, 95], "elementid": 76, "propertykei": 76, "accessor": 76, "eq": [76, 78, 95, 102, 342], "neq": [76, 342], "gt": [76, 78, 342], "lt": [76, 78, 342], "gte": [76, 78, 92, 338, 342], "lte": [76, 92, 338, 342], "outsid": [76, 342], "textp": [76, 342], "startingwith": [76, 342], "endingwith": [76, 342], "rko": 76, "ark": 76, "notstartingwith": [76, 342], "notendingwith": [76, 342], "notcontain": [76, 342], "unequ": 76, "wheretravers": 76, "act": [76, 159, 308, 311, 331, 343], "startkei": 76, "alter": [76, 311], "opposit": [76, 165, 239, 286], "nottravers": 76, "duplic": [76, 78, 238, 240, 242, 311, 312], "deduplabel": 76, "composit": [76, 78], "de": [76, 87], "impli": 76, "flat": 76, "br": 76, "selectkei": 76, "roll": [76, 78, 81], "accompani": 76, "aggregatefunc": 76, "emit": [76, 78, 159, 162, 165, 171, 343], "ascend": [76, 78], "asc": [76, 78], "bias": 76, "toss": 76, "merg": [76, 165], "uniontravers": 76, "matchsent": 76, "binder": 76, "__": [76, 77, 78, 92, 165, 338, 342], "graphnam": 76, "unrol": 76, "linear": [76, 245, 247, 303, 323], "result_opt": [76, 78, 342], "all_v": [76, 78, 342], "lengthrang": 76, "keyvaluepair": 76, "end_v": [76, 78, 342], "all_v_": 76, "vada": 76, "josh": 76, "ongo": 76, "liter": 76, "0f": 76, "0d": 76, "2l": 76, "IN": [76, 93], "isnul": 76, "bitwis": 76, "startswith": 76, "ma": 76, "endswith": 76, "ko": 76, "substr": [76, 342], "preced": [76, 311, 324], "parenthes": 76, "unari": 76, "modulu": 76, "membership": [76, 311], "lop": 76, "rippl": 76, "peter": 76, "34": [76, 78, 99, 161, 162, 164, 304], "729": 76, "1225": 76, "841": 76, "v2": [76, 78, 84, 95, 159, 289, 343], "35": [76, 78, 99, 161, 162, 164, 171, 238, 288, 304], "29": [76, 78, 161, 162, 164], "simplepath": [76, 342], "latter": [76, 78, 94], "mix": [76, 102, 323], "sack": [76, 342], "guidanc": 77, "gremlinpython": [77, 324], "sy": [77, 171], "gremlin_python": [77, 324], "graph_travers": 77, "driver_remote_connect": 77, "driverremoteconnect": [77, 324], "gremlin_endpoint": [77, 324], "remoteconn": [77, 324], "withremot": [77, 324], "assert": [77, 102, 323], "oom": 77, "vast": 77, "mitig": 77, "risk": [77, 91], "queue": [77, 104], "graph_url": [77, 174, 324, 342], "stopiter": 77, "resultiterationbatchs": 77, "addcontactpoint": [77, 324], "resultset": [77, 324], "hasnext": 77, "dlcdn": 77, "your_endpoint_address": 77, "your_endpoint_port": 77, "classnam": [77, 342], "ser": [77, 342], "gryomessageserializerv1d0": [77, 342], "serializeresulttostr": [77, 342], "exit": [77, 102, 342], "realm": 78, "audit": 78, "toolsuit": 78, "simul": [78, 136, 171], "confid": 78, "permit": [78, 311], "3k": 78, "gremlin_queri": 78, "190376": 78, "787074": 78, "sf1": 78, "432345564227583365": 78, "504403158265495622": 78, "576460752303435306": 78, "432345564227579434": 78, "hastyp": 78, "504403158265495612": 78, "144115188075855941": 78, "issubclassof": 78, "504403158265495553": 78, "confus": [78, 259, 260, 261], "mechan": [78, 93, 96, 98, 320, 328], "belong": [78, 96, 102, 103, 104, 173, 301, 304, 311, 317, 324], "distinguish": [78, 91, 159, 160, 161, 323], "worri": 78, "havelabel": 78, "216172782113783808": 78, "216172782113784710": 78, "label1": 78, "label2": 78, "forum": 78, "72057594037936036": 78, "360287970189718653": 78, "360287970189718655": 78, "joseph": 78, "yacin": 78, "01": [78, 84, 88, 89, 92, 102, 160, 176, 235, 338], "01t00": 78, "00": 78, "curiou": 78, "38416": 78, "mayb": 78, "pyplot": 78, "plt": 78, "comment_cont": 78, "comment_length": 78, "histogram": 78, "hist": [78, 185], "50": [78, 99, 258, 260, 261], "607c8e": 78, "grid": [78, 304], "axi": [78, 101, 102, 103, 118, 142, 171, 317], "xlabel": 78, "ylabel": 78, "gender": [78, 90, 344], "person_gend": 78, "male": 78, "femal": 78, "male_count": 78, "female_count": 78, "216172782113784483": 78, "around": [78, 174], "432345564227569033": 78, "288230376151712472": 78, "144115188075856168": 78, "144115188075860911": 78, "72057594037934114": 78, "hasmoder": 78, "studyat": 78, "workat": 78, "islocatedin": 78, "432345564227582847": 78, "hasinterest": 78, "504403158265496227": 78, "864691128455136658": 78, "1008806316530991636": 78, "360287970189645858": 78, "en": [78, 94, 102, 273, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 295, 296, 297, 298], "e1": 78, "citi": [78, 82, 94, 96], "ispartof": 78, "countri": 78, "288230376151711797": 78, "216172782113784555": 78, "14": [78, 99, 161, 162, 164, 216, 276, 284, 296, 311], "exactli": [78, 82, 95, 102, 176, 221, 230, 244, 289, 317, 324], "432345564227569357": 78, "432345564227570524": 78, "288230376151712984": 78, "144115188075861043": 78, "replyof": [78, 339], "54336": 78, "33411": 78, "360287970189700805": 78, "59465": 78, "33403": 78, "awai": 78, "ineffect": 78, "illeg": 78, "simple_path": 78, "unfold": [78, 102], "hascreat": 78, "nation": 78, "china": 78, "np": [78, 162, 165, 171, 175, 326], "market": 78, "japan": 78, "browsers_us": 78, "browser_list": 78, "firefox": 78, "safari": 78, "browser_count": 78, "autopct": 78, "1f": 78, "univers": [78, 91, 176, 209, 210, 257, 267, 299, 303], "person1": 78, "person2": 78, "university1": 78, "university2": 78, "studi": [78, 88, 92, 98, 257, 259], "216172782113784481": 78, "216172782113784279": 78, "144115188075858884": 78, "216172782113784361": 78, "216172782113784291": 78, "144115188075858879": 78, "216172782113784642": 78, "216172782113784473": 78, "216172782113784328": 78, "144115188075858700": 78, "216172782113784700": 78, "216172782113784331": 78, "144115188075860619": 78, "216172782113784375": 78, "216172782113784333": 78, "144115188075858813": 78, "216172782113784593": 78, "216172782113784688": 78, "144115188075860870": 78, "216172782113784047": 78, "216172782113784692": 78, "144115188075862429": 78, "isomorph": [78, 96, 161, 165, 290, 312], "22": [78, 99, 161, 162, 164, 304], "23": [78, 161, 162, 164], "216172782113784192": 78, "216172782113784107": 78, "216172782113784171": 78, "regular": [78, 250, 255, 256, 257, 279, 284, 287, 292, 295, 296, 297, 298], "squar": [78, 238, 257, 285, 286, 289, 304], "butterfli": 78, "notion": 78, "matchanalyticsalgorithm": 78, "matchoptimizationalgorithm": 78, "216172782113784587": 78, "216172782113784363": 78, "144115188075860919": 78, "216172782113784532": 78, "216172782113784400": 78, "144115188075861858": 78, "216172782113784491": 78, "216172782113784401": 78, "144115188075858086": 78, "216172782113784598": 78, "216172782113784629": 78, "144115188075858881": 78, "216172782113783931": 78, "216172782113784657": 78, "144115188075858708": 78, "repli": 78, "pa": 78, "pb": 78, "216172782113783809": 78, "216172782113784011": 78, "360287970189640007": 78, "360287970189640008": 78, "360287970189640009": 78, "2012": [78, 270], "216172782113783812": 78, "216172782113783882": 78, "36": [78, 99, 161, 162, 164, 216, 296, 304, 336], "360287970189640010": 78, "37": [78, 99, 161, 162, 164, 176, 304, 336], "216172782113784105": 78, "38": [78, 99, 161, 162, 164, 304, 336], "41": [78, 99, 161, 162, 164, 251, 304], "43": [78, 161, 162, 164, 176, 278, 304, 334], "216172782113783814": 78, "216172782113783962": 78, "360287970189640135": 78, "52": [78, 304], "216172782113784199": 78, "54": [78, 99, 251, 304], "216172782113784038": 78, "56": [78, 99, 210, 304], "216172782113783816": 78, "216172782113784144": 78, "175": 78, "360287970189640462": 78, "72057594037927936": 78, "144115188075855872": 78, "288230376151711744": 78, "432345564227567616": 78, "504403158265495555": 78, "india": 78, "hasmemb": 78, "8248": 78, "8101": 78, "imposs": 78, "back": [78, 81, 87, 169, 323, 331], "2822": 78, "tag1": 78, "tag2": 78, "37164": 78, "432": 78, "property1": 78, "property2": 78, "donati": 78, "luigi": 78, "hall": 78, "costa": 78, "carlo": 78, "khan": 78, "meera": 78, "mahinda": 78, "eli": 78, "94": 78, "228": [78, 99], "emb": [78, 159, 343], "th": [78, 163, 176, 289], "dom": 78, "pedro": 78, "ii": 78, "condariuc": 78, "bonomi": 78, "anyth": 78, "david": [78, 212, 223, 288], "silva": 78, "guliyev": 78, "tagclass": 78, "504403158265495552": 78, "504403158265495554": 78, "504403158265495556": 78, "504403158265495557": 78, "504403158265495558": 78, "504403158265495559": 78, "504403158265495560": 78, "504403158265495561": 78, "504403158265495562": 78, "504403158265495563": 78, "504403158265495564": 78, "504403158265495565": 78, "504403158265495566": 78, "504403158265495567": 78, "504403158265495568": 78, "504403158265495569": 78, "504403158265495570": 78, "504403158265495571": 78, "504403158265495572": 78, "504403158265495573": 78, "504403158265495574": 78, "504403158265495575": 78, "504403158265495576": 78, "504403158265495577": 78, "504403158265495578": 78, "504403158265495579": 78, "504403158265495580": 78, "504403158265495581": 78, "504403158265495582": 78, "504403158265495583": 78, "504403158265495584": 78, "504403158265495585": 78, "504403158265495586": 78, "504403158265495587": 78, "504403158265495588": 78, "504403158265495589": 78, "504403158265495590": 78, "504403158265495591": 78, "504403158265495592": 78, "504403158265495593": 78, "504403158265495594": 78, "504403158265495595": 78, "504403158265495596": 78, "504403158265495597": 78, "504403158265495598": 78, "504403158265495599": 78, "504403158265495600": 78, "504403158265495601": 78, "504403158265495602": 78, "504403158265495603": 78, "504403158265495604": 78, "504403158265495605": 78, "504403158265495606": 78, "504403158265495607": 78, "504403158265495608": 78, "504403158265495609": 78, "504403158265495610": 78, "504403158265495611": 78, "504403158265495613": 78, "504403158265495614": 78, "504403158265495615": 78, "504403158265495616": 78, "504403158265495617": 78, "504403158265495618": 78, "504403158265495619": 78, "504403158265495620": 78, "504403158265495621": 78, "q4": 78, "690": 78, "134313148716225": 78, "216172782113783811": 78, "216172782113783813": 78, "216172782113784707": 78, "216172782113784708": 78, "216172782113784709": 78, "216172782113783910": 78, "216172782113784104": 78, "216172782113784207": 78, "216172782113784318": 78, "216172782113784305": 78, "216172782113784597": 78, "216172782113784693": 78, "216172782113784018": 78, "216172782113784092": 78, "216172782113784108": 78, "216172782113784161": 78, "216172782113784162": 78, "73": [78, 99, 257], "216172782113783875": 78, "216172782113783932": 78, "216172782113784057": 78, "216172782113784068": 78, "216172782113784065": 78, "216172782113784235": 78, "216172782113784247": 78, "meaning": [78, 90, 103, 173], "449": 78, "454": [78, 99], "216172782113783810": 78, "descend": [78, 305], "216172782113784082": 78, "216172782113784169": 78, "216172782113784267": 78, "216172782113784368": 78, "216172782113784376": 78, "216172782113783938": 78, "216172782113784405": 78, "216172782113783980": 78, "216172782113783844": 78, "216172782113783901": 78, "216172782113783935": 78, "216172782113784439": 78, "216172782113784315": 78, "216172782113784374": 78, "216172782113784601": 78, "216172782113784431": 78, "216172782113783815": 78, "216172782113783817": 78, "216172782113783971": 78, "216172782113784154": 78, "216172782113784381": 78, "216172782113783933": 78, "earlier": [78, 262, 324], "216172782113783819": 78, "216172782113783826": 78, "216172782113783836": 78, "bi": [78, 94, 97], "query2": 78, "09": [78, 99], "07": [78, 87, 99, 230, 238], "hastag": 78, "count1": 78, "count2": 78, "jet_li": 78, "zhang_yim": 78, "faye_wong": 78, "tsui_hark": 78, "bruce_le": 78, "johnny_depp": 78, "tom_cruis": 78, "jackie_chan": 78, "query3": 78, "moder": 78, "infinit": [78, 272], "seriou": 78, "song": 78, "containerof": 78, "message_count": 78, "824633725780": 78, "08t02": 78, "334": [78, 99], "album": 78, "hao": 78, "wang": [78, 243, 245], "19791209300479": 78, "755914248304": 78, "02t20": 78, "03": [78, 99, 332], "344": 78, "wall": 78, "lin": 78, "lei": 78, "24189255811275": 78, "824633725045": 78, "02": [78, 238], "03t18": 78, "633": 78, "893353201782": 78, "28t23": 78, "53": [78, 99, 304], "251": 78, "1030792152809": 78, "03t09": 78, "47": [78, 89, 99, 161, 162, 164], "414": 78, "chen": 78, "32985348833887": 78, "07t07": 78, "30": [78, 99, 161, 162, 164, 235, 280, 282, 287, 324, 342], "038": 78, "zhang": [78, 334], "yang": [78, 334], "15393162789707": 78, "query4": 78, "membercount": 78, "country_count": 78, "personcount": 78, "72057594037932503": 78, "72057594037932473": 78, "72057594037932489": 78, "72057594037932494": 78, "72057594037932501": 78, "72057594037934803": 78, "72057594037934804": 78, "72057594037935005": 78, "72057594037928132": 78, "72057594037935879": 78, "288230376151711799": 78, "country_top100_forums_dict": 78, "personcountforum": 78, "72057594037935702": 78, "72057594037930685": 78, "72057594037932114": 78, "72057594037934231": 78, "72057594037935703": 78, "72057594037935730": 78, "72057594037935734": 78, "72057594037932509": 78, "72057594037935707": 78, "72057594037935708": 78, "72057594037935711": 78, "72057594037935714": 78, "72057594037935719": 78, "72057594037935729": 78, "72057594037935731": 78, "72057594037935724": 78, "72057594037929560": 78, "72057594037931546": 78, "72057594037931545": 78, "72057594037932479": 78, "72057594037932485": 78, "72057594037932505": 78, "72057594037932511": 78, "72057594037935710": 78, "72057594037935722": 78, "72057594037929246": 78, "72057594037928266": 78, "72057594037935713": 78, "72057594037934308": 78, "72057594037934313": 78, "72057594037934302": 78, "72057594037930430": 78, "72057594037934303": 78, "72057594037932482": 78, "72057594037935147": 78, "72057594037935148": 78, "72057594037935157": 78, "72057594037927973": 78, "72057594037929386": 78, "72057594037934315": 78, "72057594037935720": 78, "72057594037935015": 78, "72057594037934300": 78, "72057594037930861": 78, "72057594037934319": 78, "72057594037931542": 78, "72057594037929583": 78, "72057594037933324": 78, "72057594037929182": 78, "72057594037929739": 78, "72057594037934829": 78, "72057594037935658": 78, "72057594037935660": 78, "72057594037935674": 78, "72057594037935682": 78, "72057594037935683": 78, "72057594037935672": 78, "72057594037927978": 78, "72057594037935163": 78, "72057594037935014": 78, "72057594037931544": 78, "72057594037934297": 78, "72057594037927979": 78, "72057594037932474": 78, "72057594037934384": 78, "72057594037932639": 78, "72057594037934380": 78, "72057594037935146": 78, "72057594037935152": 78, "72057594037928134": 78, "72057594037928674": 78, "72057594037929248": 78, "72057594037931240": 78, "72057594037931247": 78, "72057594037931256": 78, "72057594037930958": 78, "72057594037930963": 78, "72057594037931259": 78, "72057594037931260": 78, "72057594037931262": 78, "72057594037929365": 78, "72057594037929419": 78, "72057594037929421": 78, "72057594037929431": 78, "72057594037929434": 78, "72057594037929437": 78, "72057594037929446": 78, "72057594037929447": 78, "72057594037929449": 78, "72057594037929450": 78, "72057594037935166": 78, "72057594037929519": 78, "72057594037929451": 78, "72057594037929452": 78, "72057594037935046": 78, "72057594037932339": 78, "72057594037932481": 78, "72057594037934294": 78, "72057594037932389": 78, "72057594037932976": 78, "72057594037930870": 78, "72057594037931266": 78, "72057594037928092": 78, "72057594037928495": 78, "72057594037929510": 78, "72057594037929517": 78, "72057594037929961": 78, "72057594037929965": 78, "72057594037930242": 78, "72057594037930248": 78, "72057594037930250": 78, "72057594037930313": 78, "72057594037931547": 78, "72057594037935686": 78, "72057594037929052": 78, "72057594037929053": 78, "72057594037929055": 78, "72057594037929057": 78, "72057594037929060": 78, "72057594037934811": 78, "72057594037934813": 78, "72057594037934816": 78, "72057594037934821": 78, "72057594037934822": 78, "72057594037934823": 78, "72057594037934828": 78, "72057594037934835": 78, "72057594037934837": 78, "72057594037934975": 78, "72057594037934976": 78, "72057594037935032": 78, "72057594037935038": 78, "72057594037935045": 78, "72057594037935664": 78, "72057594037935673": 78, "72057594037935678": 78, "72057594037935685": 78, "72057594037931549": 78, "72057594037931550": 78, "72057594037931552": 78, "72057594037931554": 78, "72057594037931557": 78, "72057594037931560": 78, "72057594037931566": 78, "72057594037935671": 78, "72057594037935670": 78, "72057594037934977": 78, "72057594037931543": 78, "72057594037929518": 78, "72057594037935679": 78, "72057594037931575": 78, "72057594037932438": 78, "72057594037932878": 78, "72057594037932886": 78, "72057594037932888": 78, "72057594037927982": 78, "72057594037930526": 78, "72057594037930535": 78, "72057594037930546": 78, "72057594037930976": 78, "72057594037930536": 78, "72057594037931358": 78, "72057594037930366": 78, "72057594037931574": 78, "72057594037932435": 78, "72057594037935020": 78, "72057594037935864": 78, "72057594037933861": 78, "72057594037932440": 78, "72057594037927981": 78, "72057594037931349": 78, "72057594037931366": 78, "72057594037932885": 78, "72057594037927980": 78, "72057594037930529": 78, "72057594037930532": 78, "72057594037931304": 78, "72057594037932433": 78, "72057594037932441": 78, "72057594037934547": 78, "query11": 78, "live": 78, "startdat": 78, "enddat": 78, "216172782113784091": 78, "216172782113784250": 78, "216172782113784403": 78, "216172782113784537": 78, "216172782113784122": 78, "query14": 78, "country1": 78, "country2": 78, "subscor": 78, "award": [78, 334], "chile": 78, "case1": 78, "case2": 78, "case3": 78, "case4": 78, "216172782113784153": 78, "216172782113784100": 78, "216172782113783956": 78, "216172782113784673": 78, "216172782113784252": 78, "216172782113784263": 78, "216172782113784193": 78, "216172782113784242": 78, "216172782113784623": 78, "216172782113784498": 78, "216172782113784251": 78, "216172782113784538": 78, "216172782113784167": 78, "216172782113783864": 78, "216172782113784613": 78, "216172782113784116": 78, "faq": 79, "javasdk": [80, 328], "creation": [81, 161, 235], "transit": [81, 280, 308], "magnitud": [81, 93], "superior": [81, 92, 94, 98], "rich": [81, 91, 94, 96, 161, 163], "neg": [81, 82, 159, 163, 165, 167, 171, 176, 195, 273], "gsl": [81, 82, 91, 161, 162, 163, 164, 168, 175], "gat": [81, 96, 159, 167, 343], "deepwalk": [81, 159, 343], "trans": [81, 159, 343], "pyg": [81, 82, 85, 86, 96, 97, 98], "flexibli": [81, 91, 96, 98], "pytorch": [81, 82, 91, 96, 165, 167], "onlin": [81, 93, 96, 97, 320, 324], "fed": [81, 92, 96], "dockerfil": [81, 166], "ek": 81, "aw": [81, 99, 335], "ack": 81, "failov": [81, 98], "concentr": [81, 98, 215], "secur": [82, 96, 97], "industri": [82, 91, 96, 98, 99], "feasibl": [82, 96], "preprocess": [82, 171], "uniformli": [82, 248, 249, 250, 258, 259, 260, 261, 262, 306], "lookup": [82, 96, 171, 311], "topolog": [82, 161], "nn": [82, 84, 87, 88, 89, 92, 96, 102, 159, 171, 338, 343], "ego": [82, 96, 167, 312, 343], "dimension": [82, 88, 92, 96, 160, 162, 163], "conv": [82, 85, 96], "edge_index": [82, 85, 89], "carri": 82, "predict": [82, 88, 91, 92, 96], "asynchron": 82, "tensor": [82, 85, 101, 102, 103, 142, 159, 163, 167, 169, 315, 317], "plaintext": 82, "clearli": [82, 96], "space": [82, 96, 160, 161, 165, 176, 210, 258, 259, 260, 261, 262], "dimens": [82, 84, 87, 88, 92, 96, 160, 258, 259, 260, 261, 303, 338], "batchgraph": 82, "mini": [82, 96], "loss": [82, 84, 87, 88, 89, 92, 96, 171, 338, 343], "mind": 82, "classif": [82, 86, 92, 96, 100, 159, 160, 171], "trainer": [82, 84, 87, 88, 92, 159, 338, 343], "hk": 83, "rm": [83, 171], "4g": 83, "aarch64": 84, "processor": 84, "egographsag": [84, 87, 92, 338], "349": [84, 88, 92, 338], "venu": [84, 92], "confer": [84, 92, 163, 334], "www": [84, 87, 88, 92, 176, 230, 284, 293, 296, 324, 338], "tf": [84, 85, 87, 88, 92, 159, 160, 165, 166, 171, 338, 343], "disable_v2_behavior": [84, 87, 88, 92, 338], "importerror": [84, 87, 88, 92, 338], "load_ogbn_mag": [84, 87, 88, 90, 92, 338, 344], "egosagesuperviseddataload": [84, 88, 92, 338], "localtrain": [84, 87, 88, 92, 338], "node_typ": [84, 87, 88, 92, 159, 161, 162, 165, 168, 171, 175, 338, 343], "class_num": [84, 88, 92, 159, 338, 343], "features_num": [84, 87, 88, 92, 159, 338, 343], "hops_num": [84, 88, 92, 159, 338, 343], "nbrs_num": [84, 87, 88, 92, 338], "epoch": [84, 85, 87, 88, 89, 92, 159, 164, 338, 343], "hidden_dim": [84, 87, 88, 92, 159, 171, 338, 343], "256": [84, 88, 89, 92, 99, 240, 300, 324, 338], "in_drop_r": [84, 88, 92, 338], "learning_r": [84, 87, 88, 92, 171, 338], "reset_default_tf_graph": [84, 88, 92, 338], "act_func": [84, 88, 92, 338], "relu": [84, 88, 92, 338], "dropout": [84, 87, 88, 92, 171, 338], "train_data": [84, 87, 88, 92, 338], "mask": [84, 88, 92, 175, 338], "train_embed": [84, 88, 92, 338], "src_ego": [84, 87, 88, 92, 338], "train_label": [84, 88, 92, 338], "reduce_mean": [84, 88, 92, 159, 171, 338, 343], "sparse_softmax_cross_entropy_with_logit": [84, 88, 92, 159, 171, 338, 343], "logit": [84, 88, 92, 171, 338], "adamoptim": [84, 87, 88, 92, 171, 338], "test_embed": [84, 88, 92, 338], "test_label": [84, 88, 92, 338], "test_indic": [84, 88, 92, 338], "argmax": [84, 88, 89, 92, 338], "output_typ": [84, 88, 92, 146, 315, 338], "test_acc": [84, 88, 89, 92, 338], "div": [84, 88, 92, 338], "reduce_sum": [84, 88, 92, 338], "cast": [84, 88, 90, 92, 171, 323, 338], "float32": [84, 88, 89, 92, 162, 171, 338], "obgn": [84, 88], "mag": [84, 88, 92, 338], "paper_featur": [84, 92, 338], "feat_": [84, 87, 88, 89, 92, 338], "128": [84, 87, 88, 89, 92, 171, 338], "lg": [84, 87, 88, 92, 154, 318, 332, 338], "cite": [84, 87, 88, 92, 338], "gen_label": [84, 87, 88, 92, 154, 318, 338], "val": [84, 87, 88, 92, 159, 175, 318, 338, 343], "85": [84, 87, 88, 92, 99, 102, 318, 338], "seed": [85, 159, 167, 171, 230, 233, 234, 235, 236, 238, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 265, 266, 267, 268, 271, 303, 306, 308], "sampler": [85, 87, 164, 167, 169], "perceptu": 85, "unsupervis": [85, 87, 100, 159, 165, 167, 168, 318], "mainstream": [85, 163, 164], "putback": 85, "outofrangeerror": [85, 164, 165, 171], "evolv": [85, 91, 324], "neighborsampl": [85, 163], "edge_weight": [85, 163, 165], "random_with_replac": 85, "topk": [85, 163, 165], "pad": [85, 163], "expand_factor": [85, 163, 168], "sparsenod": [85, 162, 163, 165], "sparseedg": [85, 162, 163, 165], "layer1": [85, 163], "layer2": [85, 163], "neighbor_sampl": [85, 163], "bui": [85, 91, 162, 163, 164, 165, 168, 171], "i2i": [85, 163, 165], "layer_nod": [85, 163], "int_attr": [85, 162, 163, 164, 168, 171], "layer_edg": [85, 163], "float_attr": [85, 162, 163, 164, 168, 171], "egograph": [85, 96, 159, 167, 343], "negativesampl": [85, 168], "node_weight": [85, 165, 168], "edge_sampl": [85, 164, 168], "negative_sampl": [85, 159, 168, 343], "neg_nod": [85, 168], "heterogen": [85, 88, 92, 94, 96, 160, 161, 162, 163, 165], "randomli": [85, 165, 230, 236, 240, 242, 251, 253, 258, 261, 266, 308], "outv": [85, 159, 163, 165, 171, 342, 343], "overs": 85, "citat": [86, 88, 89, 92, 100, 171, 338], "revisit": [86, 87, 100], "ho2": 86, "with_dataset": [87, 158, 318, 344], "k8s_service_typ": [87, 158, 318, 338], "loadbalanc": [87, 318, 338], "k8s_image_pull_polici": [87, 158, 318], "cell": [87, 304], "metainfo": 87, "obgn_mag": 87, "ogbn_mag_smal": [87, 90, 338, 344], "chose": [87, 88], "i_featur": [87, 88], "argpars": 87, "tfg": 87, "egosageunsuperviseddataload": 87, "parse_arg": 87, "argumentpars": 87, "egosag": 87, "add_argu": 87, "output_dim": [87, 159, 343], "neg_num": 87, "0001": 87, "agg_typ": 87, "drop_out": 87, "neg_sampl": 87, "temperatur": 87, "dim": [87, 89, 258, 259, 260, 261], "src_emb": [87, 159, 343], "dst_emb": 87, "dst_ego": 87, "neg_dst_emb": 87, "neg_dst_ego": 87, "unsupervised_softmax_cross_entropy_loss": 87, "ogbn": [88, 89, 92, 338], "academ": [88, 92, 338], "microsoft": [88, 92, 338], "institut": [88, 92, 338], "accomplish": [88, 92, 230], "word2vec": [88, 92, 338], "torch": 89, "ogb": 89, "nodeproppr": 89, "torch_geometr": 89, "graphlearn_torch": 89, "glt": 89, "load_ogbn_arxiv": 89, "ogbn_arxiv": 89, "no_grad": 89, "test_load": 89, "dataset_nam": 89, "eval": [89, 315], "y_true": 89, "enumer": [89, 101], "devic": [89, 99], "del": [89, 173, 311], "y_pred": 89, "keepdim": 89, "unsqueez": 89, "acc": 89, "glt_graph": 89, "node_featur": 89, "node_label": [89, 318], "edge_dir": 89, "random_node_split": 89, "num_val": 89, "num_test": 89, "init_cli": 89, "num_serv": 89, "num_client": 89, "client_rank": 89, "master_addr": 89, "master_port": 89, "server_client_master_port": 89, "num_rpc_thread": 89, "is_dynam": 89, "train_load": 89, "distneighborload": 89, "num_neighbor": 89, "input_nod": 89, "512": [89, 165], "collect_featur": 89, "to_devic": 89, "worker_opt": 89, "remotedistsamplingworkeropt": 89, "worker_devic": 89, "worker_concurr": 89, "buffer_s": 89, "1gb": 89, "prefetch_s": 89, "workload_typ": 89, "in_channel": 89, "hidden_channel": 89, "num_lay": 89, "out_channel": 89, "adam": 89, "lr": 89, "arxiv": [89, 176, 219, 234, 235, 236, 250, 303], "zero_grad": 89, "log_softmax": 89, "nll_loss": 89, "backward": [89, 96, 165, 262, 318], "03d": 89, "4f": 89, "accuraci": [89, 96], "shut": 89, "shutdown_cli": 89, "trivial": [90, 98, 227], "bucket": [90, 318, 334], "_e": [90, 173, 320, 344], "ldbc_sampl": [90, 324, 342, 344], "person_0_0": [90, 324, 339, 344], "didn": [90, 99], "person_knows_person_0_0": [90, 324, 339, 344], "comment_0_0": [90, 339, 344], "person_likes_comment_0_0": [90, 344], "deal": [90, 94, 163], "unseen": [90, 96, 326], "person_likes_post_0_0": [90, 344], "post_0_0": [90, 344], "ndarrai": [90, 103, 118, 129, 162, 163, 165, 168, 173, 175, 311, 344], "apart": [90, 258], "comment_replyof_comment_0_0": [90, 339, 344], "datasourc": [90, 344], "col_0": [90, 344], "col_1": [90, 344], "coo": [90, 322, 344], "array_v": [90, 344], "col": [90, 344], "array_": [90, 344], "s3": [90, 173, 344], "hood": 90, "distributedli": [90, 161, 167, 169, 170, 171], "fsspec": [90, 344], "kwarg": [90, 102, 103, 110, 121, 133, 137, 138, 155, 158, 168, 173, 174, 175, 318], "ds1": [90, 344], "datafil": [90, 344], "ds2": [90, 344], "graphscope_bucket": [90, 344], "hangzhou": [90, 160, 344], "ds3": [90, 344], "9000": [90, 324, 344], "extra_conf": [90, 344], "conf1": [90, 344], "d34": [90, 344], "client_kwarg": [90, 344], "region_nam": [90, 344], "east": [90, 344], "ossf": [90, 344], "subclass": [90, 101, 311], "abstractfilesystem": [90, 344], "abstractbufferfil": 90, "_upload_chunk": [90, 344], "_initiate_upload": [90, 344], "_fetch_rang": [90, 344], "register_implement": [90, 344], "protocol_nam": [90, 344], "protocol_file_system": [90, 344], "direction": 90, "exce": [90, 269, 270], "super": [90, 102, 161, 165], "precis": [90, 96, 303], "modular": [91, 303], "rapidli": [91, 163], "seller": 91, "buyer": [91, 95], "fraudul": 91, "sell": 91, "suspici": 91, "fraud": [91, 98], "feed": [91, 154, 159, 162, 165, 171, 175, 318, 343], "webui": 91, "diversifi": 91, "ingest": [91, 324], "rapid": 91, "parti": [91, 291], "analyst": 91, "gaia": [91, 342], "resembl": [91, 303, 308, 310], "olap": 91, "gen": [91, 165], "dataflow": [91, 93], "arriv": 91, "financi": 91, "billion": [91, 94, 98], "preval": 91, "miniconda": 92, "scientif": 92, "field_of_studi": [92, 338], "subject": 92, "4307": [92, 338], "n1": 92, "n2": 92, "proven": 92, "2014": [92, 176, 338], "2020": [92, 338], "ret1": [92, 338], "k_core": [92, 102, 176, 312, 334, 338], "ret2": [92, 338], "kcore": [92, 338], "downstream": [92, 165], "supervis": [92, 100, 160, 163, 171, 318, 338], "train_sag": 92, "130": [92, 338], "conduit": 92, "icde2023": 93, "sigmod2017": [93, 334, 340], "gra": 93, "ph": 93, "arallel": 93, "ngine": 93, "opensourc": 93, "raph": 93, "nalysi": 93, "elat": 93, "ransact": 93, "loos": [93, 98, 320], "mysql": [93, 320], "nutshel": [93, 320], "exploit": [93, 320], "ahead": [93, 320], "wal": [93, 320], "etriev": 93, "terfac": 93, "portabl": [93, 323], "rust": [93, 323, 324], "handler": [93, 318], "chive": 93, "guardian": 93, "galaxi": 93, "steal": 93, "tackl": [93, 94], "imbal": 93, "nvlink": 93, "acut": 93, "asymmetr": 93, "holist": 93, "innov": 93, "speedup": 93, "cncf": 93, "sandbox": 93, "soon": [93, 97, 98, 99, 162], "amplifi": 93, "dissoci": 93, "ly": 93, "dag": [93, 102, 103, 121, 173, 311, 315, 318], "laptop": 93, "loop": [93, 176, 186, 199, 238, 240, 242, 244, 250, 258, 259, 260, 261, 262, 268, 271, 311, 312, 342], "correl": [93, 176], "subtask": 93, "earli": 93, "nsdi": [93, 340], "legaci": 93, "interchang": 93, "memoiz": 93, "vldb2021": 93, "artial": 93, "ncrement": 93, "transport": 94, "protein": [94, 252], "uncov": 94, "vari": [94, 160], "unless": [94, 163, 311], "discov": 94, "discoveri": [94, 96, 318, 324], "rough": 94, "accordingli": [94, 151], "snap": 94, "stanford": [94, 302], "cs224w": 94, "constitu": 94, "bellman": [94, 176], "ford": [94, 176], "wiki": [94, 102, 273, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 295, 296, 297, 298], "s_algorithm": 94, "towardsdatasci": 94, "9bd8951e7da": 94, "road": [94, 326], "logist": 94, "deliveri": 94, "media": 94, "nontrivi": [94, 283], "steep": 94, "sought": 94, "monei": [95, 98], "launder": [95, 98], "exact": [95, 240, 242, 338], "exclud": 95, "purchas": 95, "bolder": 95, "border": 95, "sens": [95, 303, 318], "worst": 95, "embrac": 95, "grasp": 95, "drug": 96, "likelihood": 96, "biologi": 96, "valuabl": 96, "bioinformat": 96, "chemic": 96, "promis": 96, "driven": [96, 303, 323], "carefulli": 96, "rewind": 96, "stack": 96, "convolut": [96, 167], "weigh": 96, "choic": [96, 323, 324], "huge": [96, 326], "plain": 96, "text": [96, 104, 212], "gradient": 96, "recal": 96, "f1": [96, 173], "assess": [96, 171, 288], "irregular": 96, "unstructur": 96, "pool": 96, "hardwar": [96, 327], "undergo": 96, "perceiv": 96, "maxgraph": [97, 340], "2x": 97, "excel": 97, "elast": [97, 324], "encrypt": 97, "geminigraph": [98, 99], "plato": [98, 99], "empir": 98, "enjoi": 98, "janusgraph": 98, "nebula": 98, "dbm": 98, "relaunch": [98, 324], "recoveri": 98, "coars": 98, "grain": 98, "invest": 98, "trace": [98, 102], "dgl": 98, "nebular": 98, "movement": [98, 165], "grade": 99, "r6": 99, "8xlarg": 99, "alibabacloud": 99, "ec": 99, "xl": 99, "a038f97": 99, "170e7d3": 99, "21009d6": 99, "v4": 99, "mpich": 99, "fair": 99, "huge_pag": 99, "jemalloc": 99, "o3": 99, "stub": [99, 105, 107, 240, 268, 271], "determinist": [99, 104, 318, 324], "cdlp": [99, 102, 334], "load_direct": 99, "load_undirected_from_direct": 99, "reformat": 99, "mark": [99, 176], "datagen": 99, "9_0": 99, "fb": 99, "62": 99, "9_1": 99, "78": [99, 230, 304], "9_2": 99, "zf": 99, "88": [99, 243, 245], "60": [99, 176, 304, 324], "61": 99, "176": [99, 267], "graph500": 99, "71": [99, 176, 248, 252, 258], "79": [99, 243, 245], "friendster": 99, "97": 99, "39": [99, 161, 162, 164, 176, 304, 334, 336], "86": 99, "57": 99, "126": [99, 244], "98": 99, "83": 99, "66": 99, "1695": 99, "2742": 99, "3600": 99, "425": 99, "55": [99, 210], "lcc": 99, "521": 99, "51": [99, 304], "296": 99, "1859": 99, "201": [99, 307], "842": 99, "68": 99, "competitor": 99, "pagerank_loc": 99, "65": 99, "72": 99, "84": 99, "63": [99, 247, 249], "gunrock": 99, "0c9a96": 99, "grout": 99, "5ce160": 99, "v7": 99, "v10": 99, "gn6v": 99, "c8g1": 99, "16xlarg": 99, "8x": 99, "16gb": 99, "nvidia": 99, "v100": 99, "gb": 99, "soc": [99, 231, 232], "livejournal1": 99, "89": 99, "9345": 99, "215": [99, 300], "560": 99, "3029": 99, "129": [99, 266], "389": 99, "155": 99, "0549": 99, "sinaweibo": 99, "1649": 99, "647": 99, "orkut": 99, "105": [99, 231, 232], "121": 99, "193": 99, "658": 99, "3201": 99, "7677": 99, "137": [99, 238], "2139": 99, "319": 99, "261": 99, "69": [99, 298, 304], "235": 99, "567": 99, "283": 99, "073": 99, "6619": 99, "45": [99, 161, 162, 164, 240], "150": 99, "87299": 99, "162": 99, "60403": 99, "9676": 99, "141": 99, "347": 99, "7772": 99, "0118": 99, "306": 99, "8618": 99, "9134": 99, "467": 99, "60801": 99, "8666": 99, "3501": 99, "870": 99, "6451": 99, "198": 99, "829": 99, "5036": 99, "229": 99, "024": 99, "483": 99, "178": 99, "5593": 99, "807": 99, "367": 99, "6946": 99, "2339": 99, "jupyt": [100, 318], "notebook": [100, 318], "jupyterlab": 100, "playground": [100, 345], "bipartit": [100, 159, 161, 217, 265, 266, 267, 299, 343], "grapeengin": 101, "vineyardserv": 101, "grapeinst": 101, "graphscopeserv": 101, "inlin": 101, "dag_fil": 101, "dagfil": 101, "rundagfil": 101, "subscrib": 101, "charg": 101, "commspec": [101, 320, 323, 325], "comm_spec": [101, 320, 323, 325], "vineyard_socket": 101, "bl": 101, "dispatchresult": 101, "onrec": 101, "commanddetail": 101, "gsobject": 101, "objectmanag": 101, "appentri": 101, "icontextwrapp": 101, "ifragmentwrapp": 101, "projector": 101, "propertygraphutil": 101, "objecttyp": 101, "tostr": [101, 325], "putobject": 101, "obj": 101, "removeobject": 101, "getobject": [101, 324, 325], "hasobject": 101, "analyticalserv": 101, "startserv": 101, "stopserv": 101, "engineconfig": 101, "tojsonstr": 101, "vineyard_rpc_endpoint": 101, "enable_java_sdk": 101, "setcommand": 101, "enum": 101, "aggregatepolici": 101, "kpickfirst": 101, "kpickfirstnonempti": 101, "krequireconsist": 101, "kconcat": 101, "kpickfirstnonemptygraphdef": 101, "kmergegraphdef": 101, "worker_id": [101, 173], "error_cod": 101, "set_error": 101, "has_large_data": 101, "set_graph_def": 101, "graphdefpb": 101, "graph_def": 101, "set_data": 101, "large_data": 101, "inarch": 101, "arc": 101, "aggregate_polici": 101, "fragmentwrapp": 101, "addcolumn": 101, "vdata_t": 101, "edata_t": 101, "arrowvertexmap": 101, "internaltyp": 101, "arrowprojectedfragmentbas": 101, "bareregist": 101, "internal_oid_t": 101, "property_graph_typ": 101, "eid_typ": 101, "vertexrang": [101, 104], "inner_vertices_t": 101, "outer_vertices_t": 101, "vertices_t": 101, "sub_vertices_t": 101, "nbr_t": 101, "arrow_projected_fragment_impl": 101, "compact_nbr_t": 101, "compactnbr": 101, "nbrunit": 101, "compact_adj_list_t": 101, "compactadjlist": 101, "const_adj_list_t": 101, "const_compact_adj_list_t": 101, "property_vertex_map_t": 101, "arrowprojectedvertexmap": 101, "label_id_typ": 101, "prop_id_typ": 101, "property_graph_t": 101, "eid_array_t": 101, "data_t": 101, "inner_vertex_array_t": 101, "outer_vertex_array_t": 101, "objectmeta": 101, "preparetorunapp": 101, "prepareconf": 101, "fnum": [101, 104], "vertex_prop_id": 101, "edge_prop_id": 101, "mirrorvertic": 101, "getvertex": 101, "getid": 101, "getinternalid": 101, "getfragid": 101, "typedarrai": 101, "value_typ": 101, "gid2vertex": 101, "vertex2gid": 101, "getinnerverticesnum": 101, "getouterverticesnum": 101, "getverticesnum": 101, "getedgenum": [101, 325], "getinedgenum": [101, 325], "getoutedgenum": [101, 325], "getoutgoingedgenum": 101, "getincomingedgenum": 101, "gettotalverticesnum": 101, "isinnervertex": 101, "getoutervertex": 101, "getinnervertexid": 101, "getinnervertexinternalid": 101, "getoutervertexid": 101, "getoutervertexinternalid": 101, "gid2oid": 101, "oid2gid": 101, "innervertexgid2vertex": 101, "outervertexgid2vertex": 101, "getoutervertexgid": 101, "getinnervertexgid": 101, "compact_": 101, "enable_if": 101, "getincominginnervertexadjlist": 101, "getoutgoinginnervertexadjlist": 101, "getincomingoutervertexadjlist": 101, "getoutgoingoutervertexadjlist": 101, "src_fid": 101, "dst_fid": 101, "getlocaloutdegre": 101, "getlocalindegre": 101, "destlist": 101, "iedest": 101, "oedest": 101, "ioedest": 101, "getvertexmap": 101, "get_out_edges_ptr": 101, "get_in_edges_ptr": 101, "get_oe_offsets_begin_ptr": 101, "get_oe_offsets_end_ptr": 101, "get_ie_offsets_begin_ptr": 101, "get_ie_offsets_end_ptr": 101, "get_edata_array_accessor": 101, "get_vdata_array_accessor": 101, "get_arrow_frag": 101, "vertex_map_id": 101, "local_vertex_map": [101, 325], "getoid": 101, "getgid": 101, "offset2lid": 101, "getoffsetfromlid": 101, "getlidfromgid": 101, "getfidfromgid": 101, "oid_t_": 101, "vid_t_": 101, "arrowfragmentload": 101, "efil": [101, 325], "vfile": [101, 325], "graph_info": 101, "leaf": [101, 103, 148, 176, 221, 305], "table_vec_t": 101, "loadvertexedget": 101, "loadvertext": 101, "loadedget": 101, "loadfrag": 101, "loadfragmentasfragmentgroup": 101, "addlabelstofrag": 101, "frag_id": [101, 320, 325], "adddatatoexistedvlabel": 101, "adddatatoexistedelabel": 101, "addlabelstofragmentasfragmentgroup": 101, "extendlabeldata": 101, "extend_typ": 101, "initpartition": 101, "doxygenclass": 101, "arrowfragmentappend": 101, "doxygen": 101, "runner": [101, 334], "_build": 101, "appbas": 101, "defaultmessagemanag": 101, "need_split_edg": 101, "konlyout": 101, "propertyappbas": 101, "propertymessagemanag": 101, "propertyautoappbas": 101, "propertyautomessagemanag": 101, "app_t": 101, "defaultwork": 101, "parallelenginespec": 101, "pe_spec": 101, "defaultparallelenginespec": 101, "getcontext": 101, "ostream": 101, "parallelpropertywork": 101, "parallelpropertymessagemanag": 101, "propertyautowork": 101, "pointer": 101, "appfram": 101, "creatework": 101, "deletework": 101, "lib_path": 101, "worker_handl": 101, "queryarg": 101, "query_arg": [101, 146, 315], "context_kei": 101, "frag_wrapp": 101, "functiontyp": 101, "argsnum": 101, "argsunpack": 101, "proto": [101, 121, 146], "datatyp": 101, "argtypeat": 101, "defaultpropertywork": 101, "ctx_t": 101, "ctxwrapperbuild": 101, "contextwrapp": 101, "vertexpropertycontext": [101, 334], "contextbas": 101, "labeledvertexdatacontext": 101, "contextdatatyp": 101, "icolumn": 101, "get_column": 101, "get_typed_column": 101, "vertex_properti": [101, 102, 104], "properties_map": 101, "vertexdatacontextwrapp": 101, "ivertexdatacontextwrapp": 101, "fragment_wrapp": 101, "unique_ptr": 101, "tondarrai": 101, "todatafram": 101, "tovineyardtensor": 101, "tovineyarddatafram": 101, "toarrowarrai": 101, "tensorcontext": [101, 103], "set_shap": 101, "tensor_t": 101, "tensorcontextwrapp": 101, "itensorcontextwrapp": 101, "cmake_extra_opt": 102, "asset": 102, "labeled_vertex_data": 102, "dynamic_vertex_data": 102, "labeled_vertex_properti": 102, "cpp_pregel": 102, "cython_pi": 102, "cython_pregel": 102, "appdagnod": [102, 137, 143], "__init__": [102, 159, 166, 173, 174, 175, 311, 312, 314, 318, 324, 343], "bytesio": [102, 110], "is_compat": 102, "graphdagnod": [102, 114, 128, 129, 145, 152, 154, 173, 174, 318], "invalidargumenterror": [102, 318], "scannererror": 102, "incorrect": 102, "signatur": [102, 165, 311], "full_jar_path": [102, 334], "java_app_class": [102, 334], "neccessari": 102, "resouc": 102, "__call__": 102, "qualifi": [102, 334], "app_asset": [102, 114, 120], "app_nod": 102, "__del__": 102, "unload": [102, 125, 143, 145], "attribute_assortativity_coeffici": [102, 334], "assort": 102, "ref": [102, 323], "joint": [102, 268, 269, 270, 271, 312], "newman": [102, 176, 240, 242, 303], "026126": 102, "2003": [102, 176, 233, 240, 251, 259], "numeric_assortativity_coeffici": [102, 334], "analog": 102, "k_": [102, 212, 276], "rac": 102, "s_i": 102, "sum_": [102, 176, 244], "w_": [102, 176, 244], "ij": [102, 176], "k_j": 102, "valueerror": [102, 158, 173, 176, 250, 307, 318], "barrat": 102, "barth\u00e9lemi": 102, "pastor": 102, "satorra": 102, "vespignani": 102, "pna": 102, "101": [102, 340], "3747": 102, "3752": 102, "2004": [102, 265], "average_shortest_path_length": [102, 176, 312, 334], "frac": [102, 176, 186, 244], "vertexdatacontextdagnod": [102, 103], "avg_clust": [102, 334], "degree_threshold": 102, "threshold": [102, 258, 259, 260, 261], "1e9": 102, "unweight": [102, 176], "foster": 102, "grassberg": 102, "paczuski": 102, "107": [102, 264], "10815": 102, "1e": [102, 171, 176, 230], "06": [102, 176], "html": [102, 176, 260, 263, 272, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 291, 293], "gv": 102, "hits_algorithm": 102, "vertexpropertycontextdagnod": [102, 103], "is_simple_path": [102, 334], "nonempti": 102, "biject": [102, 306], "smallest": [102, 263, 283, 293], "pairwis": 102, "k_shell": [102, 334], "katz_centrality_numpi": [102, 176], "auttenu": 102, "maximun": 102, "min_progress": 102, "1000": [102, 161, 176, 308, 311, 324], "progress_tri": 102, "progress": [102, 255], "met": 102, "blondel": 102, "et": [102, 308], "al": [102, 308], "stat": [102, 258, 260], "mech": 102, "10008": 102, "2008": [102, 230, 253], "sotera": 102, "lpa_u2i": [102, 334], "labeledvertexpropertycontextdagnod": [102, 103], "pagerank_nx": [102, 334], "max_it": [102, 176, 230], "tol": [102, 176, 230], "solver": 102, "voterank": [102, 334], "unsign": [102, 324], "basecontextdagnod": [103, 173], "bound_app": [103, 120], "contextdagnod": 103, "to_vineyard_tensor": [103, 317, 334], "to_vineyard_datafram": [103, 317, 334], "lazi": [103, 173, 318], "sg": 103, "resultdagnod": [103, 138], "r4": [103, 326], "62586": 103, "comparis": 103, "alphabet": [103, 317], "tensorcontextdagnod": 103, "quer": 103, "labeledvertexdatacontextdagnod": 103, "label_nam": [103, 317], "column_nam": [103, 317], "labeld": 103, "context_nod": 103, "result_schema": 103, "referenc": 103, "dynamicvertexdatacontext": 103, "dag_nod": 103, "get_str": 104, "get_doubl": 104, "edge_label_id": 104, "edge_label_nam": 104, "incoming_edg": 104, "register_aggreg": 104, "pregelaggregatortyp": 104, "aggr_typ": 104, "get_aggregated_valu": 104, "get_total_vertices_num": 104, "vertex_property_num": 104, "vertex_label_nam": 104, "vertex_label_id": 104, "edge_property_num": 104, "get_vertex_label_by_id": 104, "get_vertex_label_id_by_nam": 104, "get_edge_label_by_id": 104, "get_edge_label_id_by_nam": 104, "edge_properti": 104, "get_vertex_property_id_by_nam": 104, "vertex_property_nam": [104, 323], "get_vertex_property_by_id": 104, "vertex_property_id": 104, "get_edge_property_id_by_nam": 104, "edge_property_nam": 104, "get_edge_property_by_id": 104, "edge_property_id": 104, "kboolandaggreg": 104, "kbooloraggreg": 104, "kbooloverwriteaggreg": 104, "overwritten": 104, "kdoubleminaggreg": 104, "kdoublemaxaggreg": 104, "kdoublesumaggreg": 104, "kdoubleproductaggreg": 104, "kdoubleoverwriteaggreg": 104, "kint64minaggreg": 104, "kint64maxaggreg": 104, "kint64sumaggreg": 104, "kint64productaggreg": 104, "kint64overwriteaggreg": 104, "ktextappendaggreg": 104, "kalongoutgoingedgetooutervertex": 104, "kalongincomingedgetooutervertex": 104, "kalongedgetooutervertex": 104, "get_total_nodes_num": 104, "get_nodes_num": 104, "get_inner_nodes_num": 104, "get_outer_nodes_num": 104, "outer_nod": 104, "get_node_fid": 104, "is_inner_nod": 104, "is_outer_nod": 104, "get_nod": [104, 162], "get_outer_nod": 104, "get_node_id": 104, "get_incoming_edg": 104, "has_child": 104, "child": [104, 213, 305], "has_par": 104, "parent": [104, 106, 146, 151, 305], "get_indegre": 104, "get_outdegre": 104, "kmaxaggreg": 104, "ksumaggreg": 104, "kproductaggreg": 104, "koverwriteaggreg": 104, "subproject": 106, "scratch": 106, "never": [106, 311], "hopefulli": 106, "dmaven": 106, "antrun": 106, "jni": 106, "gae_java": 107, "graphscope_typ": 109, "graphscopetyp": 109, "myalgorithm": 109, "filenotfounderror": 110, "permissionerror": 110, "typeerror": [110, 146, 318], "arrowproperti": 111, "subrang": 111, "loader_op": 112, "notimplementederror": 112, "run_app": [117, 118, 133, 141, 142], "copy_typ": 119, "session_id": [121, 125, 146, 173, 174, 311, 315], "graph_typ": [121, 311], "graphtyp": [121, 311, 320, 325], "view_typ": 122, "vertex_or_edge_label_list": 123, "graph_util": 123, "vertexlabel": 123, "op_typ": [125, 146, 315], "uiliti": 125, "interactive_queri": [130, 318], "gremlin_script": [130, 174], "request_opt": [130, 174], "interactivequerydagnod": 130, "modify_typ": [131, 132], "attr": [131, 132, 146, 165, 178, 179, 180, 311, 314], "type_pb2": [131, 132, 136], "nx_add_edg": 131, "nx_del_edg": 131, "nx_update_edg": 131, "nx_add_nod": 132, "nx_del_nod": 132, "nx_update_nod": 132, "fd": [133, 138, 334], "storage_opt": [133, 138], "write_opt": [133, 138], "adaptor": 133, "result_path": [133, 138], "vertex_collect": 134, "edge_collect": 134, "report_typ": 136, "variati": 136, "node_num": [136, 338, 342], "has_nod": [136, 311], "has_edg": [136, 311], "node_data": 136, "edge_data": [136, 326], "neighbors_by_nod": 136, "succs_by_nod": 136, "preds_by_nod": 136, "neighbors_by_loc": 136, "succs_by_loc": 136, "preds_by_loc": 136, "deg_by_nod": 136, "in_deg_by_nod": 136, "out_deg_by_nod": 136, "deg_by_loc": 136, "in_deg_by_loc": 136, "out_deg_by_loc": 136, "nodes_by_loc": 136, "loc": 136, "multigraph": [136, 176, 178, 186, 190, 199, 204, 205, 231, 232, 240, 242, 255, 256, 257, 311, 314], "multidigraph": [136, 178, 190, 199, 204, 205, 242, 250, 251, 309, 311], "large_attr": [146, 315], "types_pb2": [146, 311], "operationtyp": 146, "opdef": [146, 150], "attrvalu": [146, 173, 342], "largeattrvalu": 146, "op_def_pb2": 150, "incoming_data": [152, 173, 318], "as_default": [152, 318], "alia": [157, 159, 165, 311, 318, 343], "k8s_gs_imag": [158, 318, 336], "k8s_etcd_imag": 158, "k8s_image_pull_secret": [158, 318], "k8s_coordinator_cpu": [158, 318], "k8s_coordinator_mem": [158, 318], "k8s_vineyard_cpu": [158, 318], "k8s_mars_worker_cpu": [158, 318], "k8s_mars_worker_mem": [158, 318], "k8s_mars_scheduler_cpu": [158, 318], "k8s_mars_scheduler_mem": [158, 318], "with_mar": [158, 318], "k8s_waiting_for_delet": [158, 318], "dataset_download_retri": 158, "k8s_deploy_mod": [158, 318], "kv": 158, "cooper": [159, 173], "\u02bbegograph": 159, "\u02bbegotensor": 159, "sample_se": [159, 343], "positive_sampl": [159, 343], "receptive_fn": [159, 343], "egotensor": [159, 167, 343], "egoflow": [159, 167, 343], "cora": [159, 171, 343], "convers": [159, 160, 320], "node_t": [159, 160, 171, 343], "edge_table_with_self_loop": [159, 343], "train_tabl": [159, 343], "val_tabl": [159, 343], "test_tabl": [159, 343], "dataset_fold": [159, 343], "decod": [159, 160, 161, 171, 343], "attr_typ": [159, 160, 161, 171, 343], "1433": [159, 171, 343], "attr_delimit": [159, 160, 161, 343], "learningbasedmodel": [159, 343], "categorical_attrs_desc": [159, 343], "_sample_se": [159, 343], "_positive_sampl": [159, 343], "_receptive_fn": [159, 343], "ego_flow": [159, 343], "src_ego_spec": [159, 343], "pos_src_ego_tensor": [159, 343], "identityencod": [159, 343], "widendeepencod": [159, 343], "feature_encod": [159, 343], "gcnconv": [159, 343], "sparseegographencod": [159, 343], "_encod": [159, 343], "conv_lay": [159, 343], "_supervised_loss": [159, 343], "full_graph_mod": [159, 343], "localtftrain": [159, 343], "model_fn": [159, 171, 343], "load_graph": [159, 343], "server_id": [159, 343], "server_count": [159, 161, 171, 343], "tracker": [159, 171, 343], "bought": 160, "saturdai": 160, "morn": 160, "bigint": 160, "dst_id": [160, 161, 162, 164, 165, 171, 175], "shanghai": 160, "localfilesystem": 160, "pai": [160, 165, 166], "tab": 160, "s2": [160, 276], "215340": 160, "933091": 160, "grei": 160, "362519": 160, "097545": 160, "chapter": [160, 161, 163, 257, 294], "dscript": 160, "dentryfil": 160, "dtabl": 160, "prj": 160, "define_str": 160, "node_sourc": 160, "edge_sourc": 160, "hash": [160, 173], "bucket_s": 160, "greatli": [160, 161, 323], "your_attr_typ": 160, "you_delimit": 160, "scr_id": 160, "10001": [160, 161, 162, 164], "feature1": 160, "10002": [160, 161, 162, 164], "feature2": 160, "10003": [160, 161, 162, 164], "feature3": 160, "123": 160, "124": 160, "\u02bbitem_node_decod": 160, "\u02bbuser_node_decod": 160, "\u02bbedge_decod": 160, "item_node_decod": 160, "user_node_decod": 160, "edge_decod": [160, 171], "graph_object": 160, "commod": 161, "swing": [161, 162], "30001": [161, 162, 164], "30002": [161, 162, 164], "30003": [161, 162, 164], "table_1": 161, "table_2": 161, "dest": 161, "10004": [161, 162], "20001": [161, 162, 164], "20003": [161, 162, 164], "20004": [161, 162, 164], "46": [161, 162, 164, 176, 298], "ui_decod": 161, "uv_decod": 161, "table_3": 161, "table_4": 161, "click_v": 161, "task_index": [161, 171], "task_count": 161, "atyp": 161, "job_nam": [161, 171], "worker_host": 161, "respond": 161, "necessarili": [161, 273], "serious": 161, "decreas": [161, 240, 242], "speak": 161, "client_count": [161, 171], "wait_for_clos": [161, 171], "matter": [161, 317], "get_topologi": 162, "dst_type": 162, "figure1": 162, "topo": 162, "print_al": 162, "string_attr": 162, "src_node": 162, "dst_node": 162, "dense_shap": 162, "__next__": 162, "table1": 162, "u_nod": 162, "get_edg": 162, "table2": 162, "table3": 162, "click_edg": 162, "table4": 162, "conduc": 163, "recept": [163, 167], "ai": 163, "meta_path": 163, "layer_id": 163, "famili": [163, 176, 214, 272, 300], "random_without_replac": 163, "ueri": 163, "default_neighbor_id": 163, "set_default_neighbor_id": [163, 172], "xx": 163, "set_padding_mod": 163, "circular": [163, 165, 215], "throw": 164, "nodesampl": 164, "node_sampl": 164, "by_ord": 164, "node_from": [164, 175], "edge_src": [164, 175], "edge_dst": [164, 175], "edgesampl": 164, "matur": 165, "dl": 165, "sheer": 165, "sink": 165, "generatortyp": [165, 175], "won": [165, 326], "cursor": 165, "ingo": 165, "query\u5bf9\u8c61": 165, "outneg": [165, 168], "inneg": [165, 168, 171], "candid": [165, 168], "u2i": 165, "ouv": 165, "func": 165, "edeg": 165, "src_1hop": 165, "dst_1hop": 165, "neg_i": 165, "neg_i_1hop": 165, "params_list": 165, "arrang": 165, "anonym": [165, 303], "src_attr": 165, "neg_attr": 165, "encode_fn": [165, 171], "src_atr": 165, "outnegv": 165, "gen1": 165, "gen2": 165, "circumst": 165, "foewa": 165, "from_gener": [165, 171], "make_one_shot_iter": [165, 171], "get_next": [165, 171], "zhangjiak": 166, "cp27": 166, "cp27mu": 166, "linux_x86_64": 166, "sudo": [166, 335, 336], "autoconf": 166, "automak": 166, "libtool": 166, "submodul": [166, 169, 323], "your_wheel_nam": [166, 169], "test_cpp_ut": 166, "test_python_ut": 166, "fastgcn": [167, 343], "graphsaint": 167, "amd": 167, "object_typ": 168, "oprequest": 169, "req": 169, "oprespons": 169, "params_": 169, "tensors_": 169, "redirect": [169, 249], "rewrit": 169, "till": [169, 318], "happen": [169, 323, 326], "stitch": 169, "myoper": 169, "register_oper": 169, "opnam": 169, "randomsampl": 169, "xxxsampler": 169, "kubeflow": 170, "reader": 170, "litestr": 170, "char": [170, 173, 323], "getfiles": 170, "getrecordcount": 170, "register_file_system": 170, "myfilesystem": 170, "registr": 170, "ppi": 171, "train_supervis": 171, "gen_test_data": 171, "getopt": 171, "argv": 171, "cur_path": 171, "elif": 171, "102": [171, 307], "__name__": 171, "__main__": 171, "dirnam": 171, "rf": 171, "\u4f60\u9700\u8981\u628agen_test_data": 171, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 171, "fi": 171, "sleep": 171, "case_bas": 171, "genetic_algorithm": 171, "neural_network": 171, "probabilistic_method": 171, "reinforcement_learn": 171, "rule_learn": 171, "bag": 171, "1033": 171, "103482": 171, "103515": 171, "31336": 171, "1061127": 171, "05882353": 171, "1106406": 171, "n_featur": 171, "node_decod": 171, "n_class": 171, "140": [171, 234], "n_hop": 171, "n_epoch": 171, "tripl": 171, "graph_object_cn": 171, "sample_gen": 171, "input_fn": 171, "sample_input_fn": 171, "float64": 171, "tensorshap": 171, "layer_featur": 171, "aggregate_fn": 171, "self_vec": 171, "neigh_vec": 171, "raw_feat_layer_index": 171, "layer_index": 171, "variable_scop": 171, "_layer": 171, "auto_reus": 171, "neigh_weight": 171, "get_vari": 171, "self_weight": 171, "output_shap": 171, "get_shap": 171, "neigh_mean": 171, "from_neigh": 171, "matmul": 171, "from_self": 171, "add_n": 171, "leaky_relu": 171, "depth_to_encod": 171, "h_self_vec": 171, "h_neighbor_vec": 171, "features_column": 171, "feature_column": 171, "numeric_column": 171, "loss_fn": 171, "train_op": 171, "global_step": 171, "get_global_step": 171, "estimatorspec": 171, "modekei": 171, "set_xxx": 172, "set_yyi": 172, "other_model": 172, "fill": [172, 212, 223, 233, 267], "nbr_id": 172, "set_default_int_attribut": 172, "set_default_float_attribut": 172, "set_default_string_attribut": 172, "set_inter_threadnum": 172, "intra": [172, 230, 233], "set_intra_threadnum": 172, "16mb": 172, "reset": 172, "enlarg": 172, "set_rpc_message_max_s": 172, "objectnam": 173, "degener": 173, "unspecifi": [173, 188], "consolidate_column": 173, "result_column": 173, "consolid": [173, 325, 332], "weight0": 173, "weight1": 173, "graph_nod": 173, "deseri": [173, 323], "detach": 173, "varaibl": 173, "lexic": 173, "classmethod": 173, "broken": 173, "save_to": 173, "path_": 173, "graphschema": [173, 311], "schema_path": 173, "currrent": 173, "object_id": [173, 174, 175], "filetyp": 173, "ordinari": 173, "f0": 173, "orc": [173, 322], "parquet": [173, 322], "graph_build": 173, "deprec": [173, 191, 289], "group_id": 173, "member_s": 173, "leader_student_id": 173, "student": 173, "member_student_id": 173, "group_for_teacher_stud": 173, "group_nam": 173, "establish_d": 173, "teacher_in_charge_id": 173, "teacher": 173, "lesson_num": 173, "avg_scor": 173, "student_id": 173, "salari": 173, "teacher_id": 173, "both_in_out": 173, "unambigu": 173, "orign": 173, "interactivequeri": [174, 316, 318, 342], "frontend_gremlin_endpoint": 174, "frontend_cypher_endpoint": 174, "gremlin_url": 174, "lifetim": 174, "traversal_sourc": 174, "graphtraversalsourc": 174, "cypher_driv": 174, "cypher_url": 174, "gremlin_cli": 174, "runtimeerror": [174, 318], "modern_graph_data_dir": 174, "tolist": [174, 324], "dtype": 175, "pywrap": 175, "nodefrom": 175, "get_handl": 175, "worker_count": 175, "base64": 175, "nstart": 176, "poweriterationfailedconverg": 176, "langvil": 176, "meyer": 176, "survei": [176, 264], "cites": 176, "ist": 176, "psu": 176, "edu": 176, "713792": 176, "jon": 176, "kleinberg": 176, "authorit": 176, "journal": [176, 245, 253, 270, 301, 304, 308], "acm": [176, 251, 302, 334], "604": 176, "1999": [176, 231, 232], "doi": [176, 246, 253, 288], "1145": 176, "324133": 176, "324140": 176, "cornel": 176, "kleinber": 176, "pdf": [176, 258, 260, 261], "load_centr": 176, "in_degree_centr": [176, 312], "networkxnotimpl": 176, "out_degree_centr": [176, 312], "equat": 176, "ax": 176, "eigenvalu": [176, 256], "virtu": 176, "perron": 176, "frobeniu": 176, "theorem": [176, 255, 267], "0e": 176, "strength": 176, "2f": 176, "networkxpointlessconcept": [176, 306], "networkxerror": [176, 182, 189, 191, 195, 196, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 246, 252, 255, 256, 257, 268, 271, 303, 311, 314], "eigenvector_centrality_numpi": 176, "discern": 176, "phillip": 176, "bonacich": 176, "american": 176, "sociologi": 176, "1170": 176, "1182": 176, "1986": [176, 300], "leonidzhukov": 176, "net": [176, 230], "hse": 176, "socialnetwork": 176, "oxford": [176, 209, 210, 259, 303], "press": [176, 209, 210, 257, 299, 302, 303], "usa": [176, 263, 264, 310], "pp": [176, 240, 243, 244, 245, 258, 264, 265, 302, 308], "169": 176, "x_i": 176, "a_": 176, "x_j": 176, "lambda_": 176, "distant": 176, "penal": 176, "strictli": [176, 230], "invers": [176, 255], "phi": 176, "sqrt": [176, 256], "adjacency_spectrum": 176, "720": 176, "leo": 176, "sociometr": 176, "psychometrika": 176, "1953": 176, "springer": [176, 265], "1007": [176, 210, 246], "bf02289026": 176, "has_path": [176, 312], "djikstra": 176, "floyd": 176, "warshal": 176, "bfs_edg": [176, 312], "depth_limit": 176, "core_numb": 176, "vladimir": 176, "batagelj": 176, "matjaz": 176, "zaversnik": 176, "ab": [176, 234, 235, 236, 250, 258, 262, 303, 305], "0310049": 176, "c_u": 176, "deg": [176, 230, 244, 311], "geometr": [176, 298, 312], "vw": 176, "hat": 176, "uv": [176, 244], "uw": 176, "tot": 176, "2deg": 176, "leftrightarrow": 176, "complete_graph": [176, 182, 311], "saram\u00e4ki": 176, "kivel\u00e4": 176, "onnela": 176, "kaski": 176, "kert\u00e9sz": 176, "027105": 176, "2007": [176, 258, 304], "jponnela": 176, "web_docu": 176, "a9": 176, "intens": 176, "coher": 176, "motif": 176, "065103": 176, "2005": [176, 252, 258], "sign": 176, "costantini": 176, "perugini": 176, "plo": 176, "e88669": 176, "fagiolo": 176, "76": 176, "026107": 176, "average_clust": [176, 312], "count_zero": 176, "c_v": 176, "nonzero": [176, 240, 257], "marcu": 176, "kaiser": 176, "0802": 176, "2512": 176, "g_to_add_to": [178, 179, 180], "nodes_for_cycl": 178, "add_path": [178, 180, 311], "add_star": [178, 179], "nodes_for_path": 179, "add_cycl": [179, 180], "nodes_for_star": 180, "star": [180, 217, 226], "middl": 180, "cnbor": 182, "with_data": 183, "empty_graph": [183, 224], "frequenc": 185, "width": 185, "2m": [186, 264], "prevent": 189, "err": 189, "frozen": [189, 194], "unfreez": 189, "frozen_graph": 189, "unfrozen_graph": 189, "is_frozen": 189, "neighbour": 191, "freez": [194, 312], "signifi": [195, 196], "nodelist": [199, 238], "selfloop_edg": [199, 204, 240, 242], "number_of_selfloop": [199, 205], "selfloop": [204, 205, 238, 244], "nloop": 204, "nodes_with_selfloop": [204, 205], "datadict": [205, 311], "datavalu": 205, "attrnam": [205, 342], "edgeit": 205, "ekei": 205, "graph_atlas_g": 209, "linearli": [209, 225], "ronald": [209, 210, 300], "robin": [209, 210], "wilson": [209, 210], "1998": [209, 210], "111223": 210, "112222": 210, "automorph": [210, 283], "graph_atla": 210, "expens": 210, "popul": [210, 211, 213, 214, 216, 218, 221, 223, 225, 226, 229, 240, 242, 243, 245, 247, 248, 249, 255, 256, 257, 263, 264, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 306, 313], "book": 210, "violat": 210, "lexicograph": 210, "nondecreas": 210, "001111": 210, "000112": 210, "1008": 210, "3333444": 210, "3333336": 210, "1012": 210, "1213": 210, "1244555": 210, "1244456": 210, "perfectli": 211, "ari": [211, 221], "height": 211, "children": [211, 221, 305], "barbel": [212, 223], "bell": 212, "p_": [212, 244, 258], "mere": [212, 223], "aldou": [212, 223], "jim": [212, 223], "binomi": 213, "leftmost": 213, "ci_n": 214, "x_1": 214, "x_2": 214, "x_m": 214, "mod": [214, 228, 257, 276], "subfamili": 214, "ladder": [215, 222], "cl_n": 215, "k_n": 216, "is_direct": [216, 311], "subset_s": 217, "multipartit": [217, 228], "tripartit": 217, "bc": 217, "complete_bipartite_graph": 217, "c_n": 218, "hierarch": 219, "dorogovtsev": 219, "goltsev": 219, "mend": 219, "mat": 219, "0112143": 219, "kw": [220, 318], "unknown": [220, 323], "abc": 220, "rightmost": 221, "jame": 221, "andrew": 221, "storer": 221, "birkhaus": 221, "boston": 221, "2001": [221, 234, 242, 247, 249, 257, 266, 324], "225": [221, 311], "lollipop": 223, "k_m": 223, "p_n": [223, 225], "etext": 223, "turan": 228, "disjoint": [228, 239, 277], "2r": 228, "tau1": 230, "tau2": 230, "mu": 230, "average_degre": 230, "min_degre": 230, "max_degre": 230, "min_commun": 230, "max_commun": 230, "lfr": 230, "mathrm": 230, "expon": 230, "reassign": [230, 268], "affili": [230, 338], "random_st": [230, 233, 234, 235, 236, 238, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 265, 266, 267, 271, 303, 306, 308], "exceededmaxiter": 230, "250": 230, "frozenset": [230, 313], "rewir": [230, 232, 236, 268, 271], "wire": 230, "robust": 230, "somewhat": 230, "narrow": 230, "andrea": 230, "lancichinetti": 230, "santo": [230, 234, 235, 236], "fortunato": [230, 234, 235, 236], "filippo": 230, "radicchi": 230, "phy": [230, 242, 247, 248, 249, 252], "rev": [230, 242, 247, 248, 249, 252], "046110": 230, "santofortunato": 230, "caveman": [231, 232, 236], "unclear": [231, 232], "connected_caveman_graph": [231, 237], "watt": [231, 232, 242], "phenomenon": [231, 232], "amer": [231, 232], "493": [231, 232], "527": [231, 232], "caveman_graph": 232, "p_in": [233, 234, 235], "p_out": [233, 234, 235], "gaussian": [233, 259, 260, 261], "drawn": [233, 261], "varianc": 233, "probabilti": [233, 236], "random_partition_graph": [233, 238], "ulrik": 233, "brand": 233, "marco": 233, "gaertler": 233, "dorothea": 233, "wagner": 233, "11th": 233, "europ": 233, "symp": 233, "plant": [234, 235], "random_partition_model": 234, "condon": 234, "karp": 234, "algor": 234, "116": 234, "486": [234, 235, 236], "174": [234, 235, 236], "0906": [234, 235, 236], "0612": [234, 235, 236], "relax": 236, "februari": 236, "num_cliqu": 237, "clique_s": 237, "ring": 237, "stochast": [238, 312], "densiti": [238, 240, 258, 260], "symmetr": [238, 257, 280, 284, 290, 292, 303], "300": [238, 307], "prob": 238, "450": 238, "quotient_graph": 238, "relabel": 238, "245": 238, "348": 238, "405": 238, "051": 238, "022": 238, "planted_partition_graph": 238, "gaussian_random_partition_graph": 238, "gnp_random_graph": [238, 265, 266, 267], "holland": 238, "laskei": 238, "leinhardt": 238, "blockmodel": 238, "109": 238, "1983": 238, "windmil": 239, "contract": 239, "wd": 239, "deg_sequ": [240, 241, 242, 243, 245], "pseudograph": [240, 242], "nonneg": [240, 242], "is_graph": [240, 246], "graphic": [240, 242, 245, 246], "realiz": [240, 242, 245, 268, 269, 270, 271, 298, 323], "tend": 240, "poisson": 240, "constant": [240, 342], "siam": [240, 245, 251], "167": 240, "random_sequ": 240, "random_powerlaw_tree_sequ": 240, "5000": [240, 324], "actual_degre": 240, "in_degree_sequ": 242, "out_degree_sequ": 242, "directed_random": 242, "configuration_model": [242, 243, 246], "finit": [242, 244, 257], "strogatz": 242, "026118": 242, "din": 242, "dout": 242, "in_deg_sequ": 243, "out_deg_sequ": 243, "kleitman": [243, 245], "valenc": [243, 245], "1973": [243, 245], "w_0": 244, "w_1": 244, "ldot": 244, "w_u": [244, 258, 261], "w_v": [244, 258, 261], "sum_k": 244, "w_k": 244, "z": [244, 257, 258, 262], "mathcal": 244, "ne": 244, "uu": 244, "fan": [244, 258, 334], "chung": [244, 258], "lu": [244, 334], "ann": 244, "combinator": [244, 304], "145": 244, "2002": 244, "joel": 244, "miller": 244, "aric": [244, 258], "hagberg": [244, 258], "waw": [244, 258], "alan": 244, "friez": 244, "paul": 244, "horn": 244, "pawe\u0142": 244, "pra\u0142at": 244, "lnc": 244, "6732": 244, "115": 244, "havel": 245, "hakimi": 245, "networkxexcept": 245, "resort": 245, "496": 245, "506": 245, "1962": [245, 263, 264, 310], "d_m": 246, "uniform": [246, 258, 267], "networkxunfeas": 246, "moshen": 246, "bayati": 246, "jeong": 246, "han": 246, "kim": 246, "amin": 246, "saberi": 246, "algorithmica": 246, "58": 246, "860": 246, "910": 246, "s00453": 246, "009": 246, "9340": 246, "gn": [247, 310], "a_k": 247, "krapivski": [247, 248, 249, 252], "redner": [247, 248, 249], "066123": [247, 249], "gnc": 248, "growth": [248, 308], "036118": 248, "2005k": 248, "gnr": 249, "probabilii": 249, "self_loop": 250, "preferenti": 250, "proport": 250, "peterson": [250, 293], "nichola": 250, "bori": 250, "pittel": 250, "preprint": 250, "1311": 250, "5961": 250, "2013": [250, 270], "gamma": 251, "delta_in": 251, "delta_out": 251, "bia": 251, "bollob\u00e1": 251, "borg": 251, "chay": 251, "riordan": 251, "fourteenth": 251, "annual": 251, "symposium": 251, "132": [251, 266], "139": 251, "diverg": [252, 312], "retent": 252, "disallow": 252, "ispolatov": 252, "yuryev": 252, "061911": 252, "inclus": 253, "knudsen": 253, "michael": 253, "carsten": 253, "wiuf": 253, "markov": 253, "chain": 253, "1155": 253, "190836": 253, "radiu": [254, 259, 260, 261], "chordal": 255, "chord": [255, 269], "mildli": 255, "lubotzki": 255, "invari": 255, "birkh\u00e4us": 255, "verlag": 255, "basel": 255, "1994": 255, "marguli": 256, "gabber": 256, "galil": 256, "palei": 257, "pz": 257, "f_q": 257, "odd": 257, "bolloba": 257, "cambridg": 257, "theta": [258, 261], "po": [258, 259, 260, 261, 262], "p_dist": [258, 260], "geograph": [258, 261], "rectangular": [258, 262], "ge": [258, 262], "prone": 258, "le": [258, 262, 302], "euclidean": [258, 259, 260, 261, 262], "taxicab": [258, 262], "expovari": [258, 261], "masuda": 258, "miwa": 258, "konno": 258, "036108": 258, "milan": 258, "bradonji\u0107": 258, "allon": 258, "percu": 258, "giant": 258, "antoni": 258, "bonato": 258, "209": 258, "216": 258, "cube": [259, 260, 261, 279, 296], "kdtree": [259, 260, 261], "minkowski": [259, 260, 261], "infin": [259, 260, 261], "erd\u0151": [259, 260, 261], "r\u00e9nyi": [259, 260, 261], "twenti": 259, "2d": [259, 260, 261, 311, 314], "deviat": [259, 260, 261], "gauss": [259, 260, 261], "penros": [259, 260], "mathew": [259, 260], "soft": 260, "exp": [260, 262], "annal": 260, "2016": 260, "986": 260, "1028": 260, "summat": 261, "nodethr": 261, "cole": 261, "maclean": 261, "blog": 261, "thesi": [261, 267], "waxman": 262, "x_min": 262, "y_min": 262, "x_max": 262, "y_max": 262, "Their": 262, "incompat": [262, 323], "rout": 262, "multipoint": 262, "ieee": [262, 270, 271, 303, 308], "1988": 262, "1617": 262, "1622": 262, "harari": [263, 264, 312], "h_": [263, 264], "ceil": 263, "kn": 263, "hnm_harary_graph": 263, "weisstein": 263, "eric": 263, "mathworld": [263, 272, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 291], "wolfram": [263, 272, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 291], "hararygraph": 263, "nat": [263, 264, 310], "acad": [263, 264, 310], "sci": [263, 264, 310], "1142": [263, 264, 310], "1146": [263, 264, 310], "floor": 264, "hkn_harary_graph": 264, "boesch": 264, "satyanarayana": 264, "suffel": 264, "reliabl": 264, "synthesi": 264, "99": [264, 342], "2009": [264, 304], "uniform_random_intersection_graph": [265, 266], "nikoletsea": 265, "raptopoulo": 265, "spiraki": 265, "icalp": 265, "\u0131az": 265, "karhum": 265, "aki": 265, "lepist": 265, "sannella": 265, "vol": [265, 308], "3142": 265, "lectur": 265, "1029": 265, "1040": 265, "godehardt": 266, "jaworski": 266, "electron": [266, 304], "singer": 267, "cohen": 267, "1995": 267, "phd": 267, "john": [267, 284], "hopkin": 267, "scheinerman": 267, "evolut": 267, "2000": 267, "156": 267, "nkk": [268, 269], "degree_seq": 268, "n_edges_add": 268, "li": [268, 271], "unsatur": 268, "proof": 268, "tillman": [268, 269, 271], "markopoul": [268, 269, 270, 271, 303], "butt": [268, 269, 303], "gjoka": [268, 269, 270, 271], "2k": [268, 269], "kdd": [268, 269], "seconnd": 269, "joint_degre": [270, 271], "diagon": [270, 286], "joint_degree_graph": 270, "kurant": 270, "5k": 270, "infocom": [270, 271, 303], "stanton": 270, "pinar": 270, "prescrib": 270, "experiment": [270, 318], "n_th": 272, "m_1": 272, "singleton": [272, 311], "m_2": 272, "m_i": 272, "mycielskian": 272, "m_": 272, "mycielskigraph": 272, "p_2": 272, "chromat": [273, 304], "2n": 273, "bigcup": 273, "nonisomporph": 274, "adjanc": 274, "matric": [274, 303], "nonisomorph": 275, "shift_list": 276, "cubic": [276, 279, 280, 283, 284, 290, 292, 293, 298], "lcf": [276, 278, 280, 282, 284, 290, 292], "lederberg": 276, "coxet": 276, "frucht": [276, 283], "hamiltonian": [276, 278, 283, 284, 287, 292, 298], "symmetri": [276, 283], "dodecahedral_graph": 276, "desargues_graph": 276, "heawood_graph": 276, "pappus_graph": 276, "s1": 276, "sk": 276, "v_current": 276, "shiftlist": 276, "heawood": [276, 284], "lcfnotat": 276, "bull": 277, "planar": [277, 280, 281, 283], "pendant": 277, "leg": 277, "chv\u00e1tal": 278, "370": 278, "chv": 278, "c3": [278, 290, 291], "a1tal_graph": 278, "chvatalgraph": 278, "platon": [279, 282, 287, 291, 295, 297], "hypercub": 279, "aris": 279, "desargu": 280, "desarguesgraph": 280, "kite": [281, 288], "diamondgraph": 281, "dodecahedr": 282, "dodecahedron": 282, "regular_dodecahedron": 282, "dodecahedralgraph": 282, "fruchtgraph": 283, "cage": 284, "perci": 284, "nonplanar": 284, "girth": 284, "heawoodgraph": 284, "win": [284, 293], "tue": [284, 293], "nl": [284, 293], "aeb": [284, 293], "housegraph": [285, 286], "pentatop": 286, "icosahedr": 287, "icosahedron": 287, "icosahedralgraph": 287, "krackhardt": 288, "andr": 288, "beverlei": 288, "carol": 288, "dian": 288, "fernando": 288, "garth": 288, "heather": 288, "ik": 288, "jane": 288, "polit": 288, "landscap": 288, "cognit": 288, "quarterli": 288, "342": [288, 311], "369": 288, "2307": 288, "2393394": 288, "jstor": 288, "june": 288, "1990": 288, "graph_descript": 289, "ltype": 289, "adjacencylist": 289, "from_dict_of_list": 289, "from_edgelist": 289, "xlist": 289, "c_4": 289, "w2": 289, "vk": 289, "wk": 289, "vj": 289, "wj": 289, "moebiu": 290, "kantor": 290, "m\u00f6biu": 290, "petersen": [290, 293], "b6biu": 290, "93kantor_graph": 290, "octahedr": 291, "octahedron": 291, "shake": 291, "hi": [291, 301, 310], "her": 291, "partner": 291, "handshak": 291, "cocktail": 291, "octahedralgraph": 291, "tur": 291, "a1n_graph": 291, "special_cas": 291, "pappu": 292, "juliu": 293, "counterexampl": [293, 298], "bridgeless": 293, "colour": 293, "drg": 293, "maze": 294, "sedgewick": 294, "3rd": 294, "tetrahedr": 295, "k4": 295, "w4": 295, "grpah": 295, "tetrahedron": [295, 297, 298], "archimedean": [296, 297], "octagon": 296, "triangular": 296, "truncated_cub": 296, "coolmath": 296, "polyhedra": 296, "hexagon": 297, "equilater": 297, "truncated_tetrahedron": 297, "tutt": 298, "polyhedr": 298, "tait": 298, "conjectur": 298, "polyhedron": 298, "multipli": 298, "davi": 299, "southern": 299, "women": 299, "gardner": 299, "1941": 299, "south": 299, "chicago": 299, "il": 299, "florentin": 300, "breiger": 300, "philippa": 300, "pattison": 300, "cumul": 300, "dualiti": 300, "septemb": 300, "zachari": 301, "karat": 301, "club": 301, "mr": [301, 304], "offic": 301, "wayn": 301, "fission": 301, "anthropolog": 301, "452": 301, "473": 301, "1977": 301, "coappear": 302, "novel": 302, "miser": 302, "knuth": 302, "1993": 302, "graphbas": 302, "combinatori": 302, "york": 302, "spectral": [303, 312], "forg": 303, "sgf": 303, "eigenstructur": 303, "synthes": 303, "percentag": 303, "telecommun": 303, "bernoulli": 303, "baldesi": 303, "1801": 303, "01715": 303, "karate_club_graph": 303, "sud": 304, "81": 304, "810": 304, "herzberg": 304, "murti": 304, "polynomi": 304, "am": 304, "708": 304, "717": 304, "sander": 304, "torsten": 304, "7pp": 304, "2529816": 304, "encyclopedia": 304, "dec": 304, "2019": 304, "nil": 305, "arboresc": 305, "downward": 305, "synthet": 305, "trie": 305, "recov": [305, 318], "pr\u00fcfer": 306, "from_prufer_sequ": 306, "forest_str": 306, "triad_nam": 307, "003": 307, "012": 307, "021d": 307, "021u": 307, "021c": 307, "111d": 307, "111u": 307, "030t": 307, "030c": 307, "120d": 307, "120u": 307, "120c": 307, "triadic_censu": 307, "autonom": [308, 310], "elmokashfi": 308, "tier": 308, "mid": 308, "adv": 308, "bidirect": 308, "peer": 308, "commerci": 308, "agreement": 308, "kvalbein": 308, "dovroli": 308, "bgp": 308, "1250": 308, "1261": 308, "octob": 308, "reweight": 309, "mathematician": 310, "frank": 310, "incoming_graph_data": [311, 314], "default_label": [311, 314], "to_networkx_graph": 311, "110": 311, "protect": 311, "bracket": 311, "shortcut": 311, "nbrsdict": 311, "miscellan": 311, "__contains__": 311, "__getitem__": 311, "adj_dict": 311, "atlasview": 311, "__iter__": 311, "niter": 311, "__len__": 311, "nnode": 311, "u_of_edg": 311, "v_of_edg": 311, "ebunch_to_add": 311, "wn2898": 311, "node_for_ad": 311, "nodes_for_ad": 311, "hello": 311, "k3": 311, "attrdict": 311, "behav": 311, "idiom": 311, "foovalu": 311, "adj_it": 311, "nbrdict": 311, "adjlist_inner_dict_factori": 311, "neighbordict": 311, "adjlist_outer_dict_factori": 311, "adjlistdict": 311, "clear_edg": 311, "deepcopi": 311, "fresh": [311, 320], "__class__": 311, "degreeview": 311, "nd_view": 311, "edge_attr_dict_factori": 311, "neighborattrdict": 311, "edge_subgraph": 311, "edgeview": 311, "edgedataview": 311, "ddict": 311, "get_edge_data": 311, "edge_dict": 311, "safe": 311, "graph_attr_dict_factori": 311, "graph_cache_factori": 311, "keyerror": 311, "edge_ind": 311, "data_dictionari": 311, "is_multigraph": 311, "corespond": 311, "nbunch_it": 311, "exhaust": 311, "possibli": 311, "node_attr_dict_factori": 311, "nodeattrdict": 311, "node_dict_factori": 311, "nodedict": 311, "nodeview": 311, "nodedataview": 311, "nodedata": 311, "bar": 311, "nedg": 311, "Will": 311, "nodes_for_remov": 311, "set_edge_data": 311, "set_node_data": 311, "set_item": 311, "adjedgeattr": 311, "dd": 311, "nodeattr": 311, "netowrkx": 311, "to_undirected_class": 311, "itertool": 311, "mg": 311, "nd_iter": 311, "outedgeview": 311, "in_edg": 311, "outedgedataview": 311, "has_predecessor": 311, "has_successor": 311, "indegreeview": 311, "inedgeview": 311, "outdegreeview": 311, "pred": 311, "succ": 311, "_convert_arrow_to_dynam": [312, 314], "atla": 312, "triad": 312, "mycielski": 312, "sudoku": 312, "edgetyp": 313, "utf": [313, 324], "filenam": [313, 324], "rb": 313, "bz2": 313, "uncompress": 313, "whitespac": 313, "obsolet": 313, "write_edgelist": 313, "fh": 313, "textlin": 313, "parse_edgelist": 313, "read_adjlist": 313, "marker": 313, "v_0": 314, "v_1": 314, "add_label": 315, "talk": 317, "output_to_cli": [317, 334], "person_id": [317, 324], "400": 317, "api_cli": 318, "apicli": 318, "deregist": 318, "256mi": 318, "4gi": 318, "5gi": 318, "__enter__": 318, "__exit__": 318, "exc_typ": 318, "exc_valu": 318, "exc_tb": 318, "unregist": 318, "preemptiv": 318, "burstabl": 318, "qo": 318, "preempt": 318, "ifnotpres": 318, "k8s_vineyard_imag": 318, "fallback": 318, "512mi": 318, "etcd_addr": 318, "etcd01": 318, "etcd02": 318, "etcd03": 318, "4mi": 318, "k8s_coordinator_pod_node_selector": 318, "tinyurl": 318, "3nx6k7ph": 318, "k8s_engine_pod_node_selector": 318, "path1": 318, "path2": 318, "claimnam": 318, "dangling_timeout_second": 318, "heartbeat": 318, "dangl": 318, "config_fil": 318, "resource_nam": 318, "sigint": 318, "sigterm": 318, "signal": 318, "get_vineyard_object_mapping_t": 318, "with_cyph": 318, "recreat": 318, "load_from_gar": [318, 322], "restore_from_pvc": 318, "kubeconfig": 318, "run_fetch": 318, "lock": 318, "store_to_pvc": 318, "backup": 318, "graph_id": 318, "maxwel": 320, "binlog": 320, "buildgartfrag": 320, "etcd_endpoint": 320, "gartfrag": 320, "etcd_client": 320, "make_shar": 320, "mpi_comm_world": 320, "schema_kei": 320, "gart_schema_p": 320, "to_str": 320, "edge_config_str": 320, "as_str": 320, "gart_blob_m": 320, "_p": 320, "config_str": 320, "edge_config": 320, "inner_vertices_it": 320, "elabel": [320, 325], "edge_it": 320, "hive": 322, "ordered_by_sourc": 322, "ordered_by_dest": 322, "graph_yaml_path": 322, "broader": 323, "ffi": 323, "agnost": 323, "grin_": 323, "partitioned_graph": 323, "edge_type_nam": 323, "boundari": 323, "sync_properti": 323, "grin_partitioned_graph": 323, "grin_partit": 323, "grin_graph": 323, "grin_get_local_graph_from_partit": 323, "grin_edge_typ": 323, "etyp": 323, "grin_get_edge_type_by_nam": 323, "grin_vertex_type_list": 323, "src_vtype": 323, "grin_get_src_types_from_edge_typ": 323, "dst_vtype": 323, "grin_get_dst_types_from_edge_typ": 323, "src_vtypes_num": 323, "grin_get_vertex_type_list_s": 323, "dst_vtypes_num": 323, "grin_vertex_typ": 323, "grin_get_vertex_type_from_list": 323, "grin_vertex_properti": 323, "dst_vp": 323, "grin_get_vertex_property_by_nam": 323, "grin_null_vertex_properti": 323, "grin_vertex_property_t": 323, "dst_vpt": 323, "grin_get_vertex_property_table_by_typ": 323, "grin_datatyp": 323, "dst_vp_dt": 323, "grin_get_vertex_property_data_typ": 323, "grin_vertex_list": 323, "__src_vl": 323, "grin_get_vertex_list": 323, "_src_vl": 323, "grin_select_type_for_vertex_list": 323, "src_vl": 323, "grin_select_master_for_vertex_list": 323, "src_vl_num": 323, "grin_get_vertex_list_s": 323, "grin_vertex": 323, "grin_get_vertex_from_list": 323, "ifdef": 323, "grin_trait_select_edge_type_for_adjacent_list": 323, "grin_adjacent_list": 323, "_adj_list": 323, "grin_get_adjacent_list": 323, "grin_direct": 323, "adj_list": 323, "grin_select_edge_type_for_adjacent_list": 323, "adj_lsit": 323, "endif": 323, "al_sz": 323, "grin_get_adjacent_list_s": 323, "ifndef": 323, "grin_edg": 323, "grin_get_edge_from_adjacent_list": 323, "grin_get_edge_typ": 323, "grin_equal_edge_typ": 323, "grin_get_neighbor_from_adjacent_list": 323, "grin_get_value_from_vertex_property_t": 323, "grin_vertex_ref": 323, "uref": 323, "grin_get_vertex_ref_for_vertex": 323, "recogn": [323, 324], "u_master_partit": 323, "grin_get_master_partition_from_vertex_ref": 323, "send_valu": 323, "fragment_group_id": [323, 325], "get_partitioned_graph_by_object_id": 323, "local_partit": 323, "grin_get_local_partition_list": 323, "pnum": 323, "grin_get_partition_list_s": 323, "grin_get_partition_from_list": 323, "disclaim": 323, "sacrif": 323, "boilerpl": 323, "ineffici": 323, "enorm": 323, "grin_assume_all_vertex_property_local_complet": 323, "grin_assume_master_vertex_property_local_complet": 323, "grin_assume_by_type_all_vertex_property_local_complet": 323, "grin_assume_by_type_master_vertex_property_local_complet": 323, "assumpt": 323, "wider": 323, "undefin": 323, "granular": 323, "grin_frag": 323, "storagespecif": 323, "vertexhandl": 323, "goe": 323, "grin_edge_list": 323, "grin_partition_list": 323, "grin_enable_": 323, "_list_arrai": 323, "vertexlist": 323, "grin_enable_vertex_list_arrai": 323, "vl": 323, "idx": 323, "sz": 323, "caller": 323, "_list_iter": 323, "grin_enable_vertex_list_iter": 323, "grin_vertex_list_iter": 323, "grin_get_vertex_list_begin": 323, "grin_get_next_vertex_list_it": 323, "vli": 323, "grin_is_vertex_list_end": 323, "grin_get_vertex_from_it": 323, "grin_get_vertex_type_by_nam": 323, "vtype": 323, "grin_vertex_property_list": 323, "grin_get_vertex_properties_by_nam": 323, "vprop": 323, "vpl": 323, "separatedli": 323, "with_vertex_label": 323, "with_edge_label": 323, "grin_serialize_vertex_ref": 323, "grin_deserialize_to_vertex_ref": 323, "grin_get_vertex_from_vertex_ref": 323, "vref": 323, "borrow": 323, "vertexcut": 323, "edgecut": 323, "judgement": 323, "columnar": 324, "gear": 324, "compromis": 324, "timestamp": 324, "strict": 324, "multitud": 324, "exemplifi": 324, "said": 324, "grpc_port": 324, "gremlin_port": 324, "grpc_endpoint": 324, "conn": 324, "add_vertex_label": 324, "v_label_nam": 324, "add_primary_kei": 324, "pk_name": 324, "prop_name_1": 324, "prop_name_2": 324, "add_edge_label": 324, "e_label_nam": 324, "prop_name_3": 324, "add_properti": 324, "xmln": 324, "xsi": 324, "w3": 324, "xmlschema": 324, "schemaloc": 324, "xsd": 324, "modelvers": 324, "gremlinexampl": 324, "codehau": 324, "mojo": 324, "classpath": 324, "mainclass": 324, "compliancelevel": 324, "killaft": 324, "credenti": 324, "valuemap": [324, 342], "println": 324, "javascript": 324, "catch": 324, "data_load": 324, "load_tool": 324, "xzvf": 324, "alic": 324, "bob": 324, "person_id_1": 324, "20210611151923": 324, "mapreduc": 324, "data_output": 324, "55555": 324, "propertiescolmap": 324, "srclabel": 324, "dstlabel": 324, "srcpkcolmap": 324, "dstpkcolmap": 324, "mb": 324, "columnidx": 324, "_success": 324, "xxxxx": 324, "sst": 324, "00000": 324, "00001": 324, "00002": 324, "load_data": 324, "test_store_servic": 324, "insert_vertex": 324, "vertexrecordkei": 324, "insert_vertic": 324, "update_vertex_properti": 324, "delete_vertex": 324, "vertex_pk": 324, "delete_vertic": 324, "insert_edg": 324, "edgerecordkei": 324, "update_edge_properti": 324, "delete_edg": 324, "edge_pk": 324, "remote_flush": 324, "snapshot_id": 324, "src_vertex_kei": 324, "dst_vertex_kei": 324, "realtimewrit": 324, "unus": 324, "current_timestamp": 324, "replay_record": 324, "grootclient": 324, "grootclientbuild": 324, "replayrecord": 324, "provis": 324, "lapp": 324, "reinstal": 324, "pv_name": 324, "pod_nam": [324, 332, 337], "logback": 324, "zk": 324, "storegcintervalm": 324, "try_catch_up_with_primari": 324, "otel": 324, "arrowfragmentgroup": 325, "spread": 325, "ipc": 325, "docket": 325, "string_oid": 325, "ipcclient": 325, "writeout": 325, "nb": 325, "fragmentloc": 325, "gettotalnodesnum": 325, "labeltyp": 325, "vlabel": 325, "vertex_data_t": 325, "edge_data_t": 325, "willing": 326, "implic": 326, "polymorph": 326, "instant": 326, "aka": 326, "pygrap": [326, 327], "frist": 326, "from_numpi": 326, "bind_sssp1": 326, "delai": 326, "screen": 326, "bind_sssp2": 326, "vertex_bal": 327, "vcut": 327, "ecut": 327, "repo_hom": 331, "flexbuild": 331, "graph_identifi": 331, "syoov": 332, "79b44f7b58": 332, "ctmqb": 332, "10m": 332, "9m53": 332, "9m46": 332, "6dd67c65fc": 332, "gn4mb": 332, "15334625083466732": 332, "33d": 332, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 334, "\u8be5\u7cfb\u7edf\u4e8e": 334, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 334, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 334, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 334, "\u5728": [334, 335, 336, 337, 338, 341, 342, 343, 344], "\u4e2d": [334, 336, 337, 338, 344], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 334, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 334, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 334, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 334, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 334, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 334, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 334, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 334, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 334, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 334, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 334, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 334, "\u521b\u5efa\u9ed8\u8ba4": 334, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 334, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 334, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 334, "result_lpa": 334, "result_sssp": 334, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 334, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 334, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 334, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 334, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 334, "\u7c7b": [334, 344], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 334, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 334, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 334, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 334, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 334, "\u6216\u5199\u5165": 334, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 334, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 334, "\u6216\u5199\u5165\u672c\u5730\u7684": 334, "lpa_result": 334, "\u6570\u636e\u7ed3\u6784": 334, "\u6b64\u5916": [334, 338], "\u5982": [334, 337, 340, 342], "\u5feb\u901f\u4e0a\u624b": [334, 340], "\u4e2d\u6240\u793a": 334, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 334, "\u7684\u65b0\u5c5e\u6027": 334, "\u5217": 334, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 334, "\u5217\u540d\u4e3a": 334, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 334, "new_graph": [334, 339], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 334, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 334, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 334, "\u7c7b\u4f3c\u7684": 334, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 334, "\u4f8b\u5982\u9876\u70b9id": 334, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 334, "\u4ee3\u8868\u7ed3\u679c": 334, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 334, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 334, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 334, "\u8f6c\u6362\u4e3a": [334, 343], "\u4f7f\u7528\u9876\u70b9\u7684": 334, "\u4f5c\u4e3a\u540d\u4e3a": 334, "\u7684\u5217": 334, "df_vd": 334, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 334, "df_result": 334, "property0": 334, "label0": 334, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 334, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 334, "\u5c06": [334, 343], "\u9876\u70b9\u7684": 334, "\u4f5c\u4e3a": [334, 335, 344], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 334, "gs_data": 334, "\u53ef\u4ee5\u67e5\u770b": 334, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 334, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 334, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 334, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 334, "\u5728\u7eaf": 334, "\u6a21\u5f0f": [334, 342], "\u4e0b\u4f7f\u7528": 334, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 334, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 334, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 334, "\u5982\u4ee3\u7801\u6240\u793a": 334, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 334, "\u88c5\u9970\u7684\u7c7b": 334, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 334, "\u56fe\u7b97\u6cd5\u51fd\u6570": 334, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 334, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 334, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 334, "\u4e0e": 334, "\u76f8\u5173\u7684\u5b8c\u6574": 334, "\u53ef\u4ee5\u53c2\u8003": 334, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 334, "\u4e3a\u4f8b": [334, 338], "\u7528\u6237\u5728": 334, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 334, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 334, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 334, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 334, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 334, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 334, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 334, "\u589e\u91cf\u8ba1\u7b97": 334, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 334, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 334, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 334, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [334, 344], "\u7ecf\u5178\u7684": 334, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 334, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 334, "\u6a21\u578b\u4e4b\u5916": 334, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 334, "\u7f16\u7a0b\u6a21\u578b": 334, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 334, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 334, "\u6a21\u578b\u4e0d\u540c": 334, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 334, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 334, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 334, "\u800c\u4e0d\u540c\u4e8e": 334, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 334, "\u8fd8\u662f\u4ee5": 334, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 334, "\u88c5\u9970\u5668": 334, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 334, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 334, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 334, "\u4e2d\u7684": [334, 335, 337], "\u51fd\u6570": [334, 342], "\u4e0b\u5217\u4ee3\u7801": 334, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 334, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 334, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 334, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 334, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 334, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 334, "\u8fd9\u91cc": [334, 335, 344], "\u662f\u4e0e": 334, "\u76f8\u5bf9\u5e94\u7684": 334, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 334, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 334, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 334, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 334, "\u5728\u6b64\u4e4b\u540e": 334, "\u60a8\u53ef\u4ee5\u4ece": 334, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 334, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 334, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 334, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 334, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 334, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 334, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 334, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 334, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 334, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 334, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 334, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 334, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 334, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 334, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 334, "dist_0": 334, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 334, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 334, "\u8bf7\u53c2\u8003": [334, 342], "\u6765\u5c06": 334, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 334, "\u5b89\u88c5\u5b8c\u6210\u540e": 334, "\u4f60\u9700\u8981\u5c06": 334, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 334, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 334, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 334, "\u6765\u786e\u4fdd": 334, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 334, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 334, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 334, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 334, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 334, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 334, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 334, "\u7528\u6237\u9700\u8981\u6309\u7167": 334, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 334, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 334, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 334, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 334, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 334, "defaultpropertyappbas": 334, "\u6216": [334, 335, 336, 337, 340, 342], "parallelpropertyappbas": 334, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 334, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 334, "defaultappbas": 334, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 334, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 334, "\u5176\u5e94\u8be5\u662f": 334, "defaultpropertycontextbas": 334, "parallelpropertycontextbas": 334, "defaultcontextbas": 334, "\u6216\u8005": [334, 336, 343, 344], "\u7684\u7684\u5b50\u7c7b": 334, "\u901a\u8fc7\u7ee7\u627f": 334, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 334, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 334, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 334, "client\u4e2dquery\u8fd4\u56de\u7684context": 334, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 334, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 334, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 334, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 334, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 334, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 334, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 334, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 334, "\u8fd9\u4e2a\u9700\u6c42": 334, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 334, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 334, "graphscope_repo": 334, "app_class_nam": 334, "java_path": 334, "path_to_your_jar": 334, "param_str": 334, "params_str": 334, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 334, "app\u7684\u7c7b\u7684\u5168\u540d": 334, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 334, "\u53ef\u4ee5\u901a\u8fc7": 334, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 334, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 334, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 334, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 334, "\u53ef\u4ee5": 334, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 334, "jar_path": 334, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 334, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 334, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 334, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 334, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 334, "\u7684app": 334, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 334, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 334, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [334, 335, 337], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 334, "\u76f8\u5173\u8bba\u6587": 334, "wenfei": 334, "jingbo": 334, "xu": 334, "wenyuan": 334, "yu": 334, "jingren": 334, "zhou": 334, "xiaojian": 334, "luo": 334, "qiang": 334, "yin": 334, "cao": 334, "ruiqi": 334, "tod": [334, 340], "yinghui": 334, "wu": 334, "jiaxin": 334, "jiang": 334, "43rd": 334, "zeyu": 334, "zheng": 334, "bohan": 334, "chao": 334, "tian": 334, "\u4ee5": [335, 338, 339, 341, 344], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 335, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [335, 337], "\u5982\u679c\u8fd0\u884c": 335, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 335, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 335, "\u56e0\u6b64": [335, 336, 338], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 335, "\u4f1a\u8bdd": [335, 338], "\u5ba2\u6237\u7aef": [335, 336, 340], "\u5b83\u5c01\u88c5": 335, "\u7ba1\u7406\u7740": 335, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 335, "\u5e76": 335, "\u8fde\u63a5": 335, "\u64cd\u4f5c\u7528\u6237\u5728": 335, "\u96c6\u7fa4\u4e0a\u7684": 335, "\u5f15\u64ce": 335, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 335, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 335, "\u5b9e\u4f8b": 335, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 335, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 335, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 335, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 335, "\u8def\u5f84": [335, 344], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 335, "\u7136\u540e": [335, 343], "\u5c06\u5176\u901a\u8fc7": 335, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 335, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 335, "\u8282\u70b9\u7684\u6982\u5ff5": 335, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 335, "\u521b\u5efa\u7684\u96c6\u7fa4": 335, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 335, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 335, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 335, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 335, "\u4e0a\u7684\u4e00\u4e2a": 335, "\u5b9e\u4f8b\u5305\u542b": 335, "\u4e00\u4e2a\u8fd0\u884c": 335, "\u7684": [335, 336, 337, 340, 345], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 335, "\u8d1f\u8d23\u5bf9": 335, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 335, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 335, "\u5f15\u64ce\u5bb9\u5668\u7684": 335, "replicaset": 335, "\u5bf9\u8c61": 335, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 335, "\u901a\u8fc7": [335, 338], "\u63a5\u6536\u6765\u81ea": 335, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 335, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 335, "\u56fe\u67e5\u8be2\u5f15\u64ce": 335, "\u56fe\u5b66\u4e60\u5f15\u64ce": [335, 340], "\u7684\u751f\u547d\u5468\u671f": 335, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 335, "\u8bf7\u5728": 335, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 335, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 335, "\u5b89\u88c5": [335, 340], "release_nam": 335, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 335, "\u53c2\u8003": 335, "\u8be5\u94fe\u63a5": 335, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 335, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 335, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 335, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 335, "\u96c6\u7fa4": [335, 337, 341], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 335, "\u7528\u6cd5\u5982\u4e0b": 335, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 335, "launch_clust": 335, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 335, "pyyaml": 335, "boto3": 335, "your_access_key_id": 335, "your_access_key_secret": 335, "region": 335, "your_region_nam": 335, "kube_config_path": 335, "alibabacloud_cs20151215": 335, "alibabacloud_ecs20140526": 335, "alibabacloud_vpc20160428": 335, "your_region_id": 335, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 335, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 335, "\u5e73\u53f0\u4e0a": 335, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 335, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 335, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 335, "\u672c\u5730\u90e8\u7f72": 335, "graphscope_env": [335, 336], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 336, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 336, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 336, "\u9075\u5faa": 336, "\u7684\u5f00\u6e90\u534f\u8bae": 336, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 336, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 336, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 336, "\u955c\u50cf": 336, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 336, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 336, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 336, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 336, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 336, "\u6267\u884c": 336, "10240m": 336, "minitest": 336, "unittest": 336, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 336, "\u6bd4\u5982": [336, 344], "\u56fe\u5206\u6790\u5f15\u64ce": [336, 340], "\u6a21\u5757": 336, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 336, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 336, "\u7684\u6784\u5efa\u8fc7\u7a0b": 336, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 336, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 336, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 336, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 336, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 336, "\u4e3a": [336, 337, 338], "shortsha": 336, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 336, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 336, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 336, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 336, "\u90a3\u4e48": 336, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 336, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 336, "\u5ba2\u6237\u7aef\u5373\u53ef": 336, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 336, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 336, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 336, "\u4e0b\u7684": 336, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 336, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 336, "install_prefix": 336, "\u4e0b\u5206\u522b\u6784\u5efa": 336, "\u7531\u4e8e": 336, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 336, "\u975edocker": 336, "\u4e2d\u8fdb\u884c": 336, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 336, "\u7684\u4f9d\u8d56": 336, "\u57fa\u4e8e\u5f53\u524d": 336, "\u73af\u5883\u4e0b\u7684": 336, "\u7248\u672c\u6784\u5efa": 336, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [336, 338], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 336, "\u7248\u672c": [336, 341], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 336, "conda": 336, "pyenv": 336, "\u5b89\u88c5\u591a\u4e2a": 336, "\u7684\u7248\u672c": 336, "\u98ce\u683c": 336, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 336, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 336, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 336, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 337, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 337, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 337, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 337, "\u6216\u8005\u5728": 337, "\u4e0e\u6211\u4eec\u8054\u7cfb": 337, "\u8fd0\u884c": 337, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 337, "\u5728\u901a\u8fc7": 337, "\u5ba2\u6237\u7aef\u4f7f\u7528": 337, "\u8fc7\u7a0b\u4e2d": 337, "\u9700\u8981\u7684\u6700\u4f4e": 337, "\u7248\u672c\u662f3": 337, "\u6700\u4f4epip\u7248\u672c\u662f": 337, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 337, "\u5355\u673a\u60c5\u51b5\u4e0b": 337, "\u8d44\u6e90\u9700\u6c42": 337, "\u6838": 337, "\u5185\u5b58": 337, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 337, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 337, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 337, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 337, "\u662f\u5426\u5f3a\u4f9d\u8d56": 337, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 337, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 337, "\u7684\u5f62\u5f0f\u5206\u53d1": 337, "\u53ef\u4ee5\u7528": 337, "\u5feb\u901f\u5b89\u88c5": 337, "\u5982\u4f55\u5982\u67e5\u770b": 337, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 337, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 337, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 337, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 337, "\u53ef\u4ee5\u4f7f\u7528": [337, 343], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 337, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 337, "\u7684\u78c1\u76d8": 337, "\u4e5f\u53ef\u5728": 337, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 337, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 337, "\u547d\u4ee4\u65f6": 337, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 337, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 337, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 337, "\u8fdb\u884c\u5220\u9664": 337, "\u901a\u5e38\u60c5\u51b5\u4e0b": 337, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 337, "\u90e8\u7f72": [337, 340], "\u65f6": [337, 338], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 337, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 337, "\u7b49\u6743\u9650": 337, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 337, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 337, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 337, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 337, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 337, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 337, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 337, "\u76ee\u524d": [337, 344], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 337, "\u53ef\u901a\u8fc7": 337, "\u8be5\u6587\u6863": 337, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 337, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 337, "\u5982\u679c": 337, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 337, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 337, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 337, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 337, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 337, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 337, "\u8f7d\u56fe\u9636\u6bb5": 337, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 337, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 337, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 337, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 337, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 337, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 337, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 337, "\u53ef\u89c1": 337, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 337, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 337, "\u90e8\u7f72\u7684": 337, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 337, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 337, "\u865a\u62df\u7684": 337, "\u6709\u4ec0\u4e48\u533a\u522b": 337, "\u5982\u4f55\u8bbe\u7f6e": 337, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 337, "\u5b83\u5b58\u50a8\u7531": 337, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 337, "\u7684\u5143\u4fe1\u606f": 337, "\u4f8b\u5982\u5f62\u72b6": 337, "\u540d\u79f0\u7b49": 337, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 337, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 337, "\u5b83\u76f8\u5f53\u4e8e": 337, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 337, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 337, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 337, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 337, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 337, "\u7684\u540c\u6837\u5927\u5c0f": 337, "\u5bfc\u81f4\u5728": 337, "\u73af\u5883\u4e0b\u5b89\u88c5": 337, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 337, "\u7f16\u8bd1": 337, "\u5931\u8d25": 337, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 337, "\u8be6\u60c5\u53ef\u53c2\u8003": 337, "\u4f60\u53ef\u4ee5\u6839\u636e": 337, "\u6b64\u6559\u7a0b": 337, "\u6765\u6e90\u7801\u7f16\u8bd1": 337, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 337, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 337, "\u4e0a\u5206\u914d": 337, "\u65f6\u9047\u5230\u4e86": 337, "\u95ee\u9898": 337, "\u5982\u4f55\u89e3\u51b3": 337, "\u901a\u5e38\u5f53\u4f7f\u7528": 337, "\u7684\u65b9\u5f0f\u5b89\u88c5": 337, "\u4f1a\u62a5": 337, "\u9519\u8bef": [337, 339], "\u6211\u4eec\u901a\u8fc7": 337, "\u6765\u67e5\u770b\u65e5\u5fd7": 337, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 337, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 337, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 337, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 337, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 337, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 337, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 337, "\u7136\u540e\u5c06": 337, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 337, "\u4e3a\u4ec0\u4e48\u5728": 337, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 337, "\u5b9e\u4f8b\u65f6": 337, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 337, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 337, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 337, "\u96c6\u7fa4\u62c9\u8d77": 337, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 337, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 337, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 337, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 337, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 337, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 337, "\u6216\u5bb9\u5668": 337, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 337, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 337, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 337, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 337, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 337, "\u4ee5\u53ca": [337, 344], "\u8bf7\u6ce8\u610f": 337, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 337, "unix": 337, "stackexchang": 337, "23452": 337, "\u5176\u4ed6\u95ee\u9898": 337, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 337, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 337, "\u540c\u65f6": [337, 342], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 337, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 338, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 338, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 338, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 338, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 338, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 338, "\u4f7f\u7528": [338, 340, 343, 344, 345], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 338, "\u6570\u636e\u96c6": 338, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 338, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 338, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 338, "\u5373\u8bba\u6587": 338, "\u4f5c\u8005": 338, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 338, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 338, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 338, "\u7ed9\u51fa\u5f02\u6784\u7684": 338, "\u6570\u636e": 338, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 338, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 338, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 338, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 338, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 338, "\u5728\u8be5\u6570\u636e\u4e2d": 338, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 338, "\u6458\u8981\u62bd\u53d6\u7684": 338, "\u7ef4": 338, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 338, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 338, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 338, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 338, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 338, "\u5ba2\u6237\u7aef\u8c03\u7528": 338, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 338, "\u6b65\u9aa4": 338, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 338, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 338, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 338, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 338, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 338, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 338, "\u7684\u7b2c\u4e00\u6b65": 338, "\u6211\u4eec\u9700\u8981\u5728": 338, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 338, "\u5bf9\u4e8e": [338, 341], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 338, "\u670d\u52a1\u7c7b\u578b": 338, "\u9ed8\u8ba4\u662f": 338, "\u53e6\u5916": [338, 344], "\u6ce8\u610f": [338, 341], "\u662f": 338, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 338, "\u5f53\u5728": 338, "\u4e0a\u4f7f\u7528": 338, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 338, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 338, "\u901a\u5e38\u4e3a": 338, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 338, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 338, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 338, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 338, "\u8be5": 338, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 338, "\u6240\u6709\u8d44\u6e90": 338, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 338, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 338, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 338, "\u90fd\u6709\u4e00\u4e2a": 338, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 338, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 338, "\u8f7d\u56fe": [338, 339, 340], "\u4ee5\u5c5e\u6027\u56fe": 338, "\u5efa\u6a21\u56fe\u6570\u636e": [338, 344], "\u5c5e\u6027\u56fe\u4e2d": 338, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 338, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 338, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 338, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 338, "\u5206\u522b\u6807\u8bb0\u4e3a": 338, "\u8bba\u6587": 338, "\u673a\u6784": 338, "\u7814\u7a76\u9886\u57df": 338, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 338, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 338, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 338, "\u5f15\u7528": 338, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 338, "\u9876\u70b9": 338, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 338, "\u64b0\u5199": 338, "\u7684\u8fb9": [338, 344], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 338, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 338, "\u6240\u6709\u7684\u9876\u70b9": 338, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 338, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 338, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 338, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 338, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 338, "\u6570\u636e\u6587\u4ef6": 338, "\u7ed3\u5408\u4f7f\u7528": 338, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 338, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 338, "author_affiliated_with_institut": 338, "paper_has_topic_field_of_studi": 338, "hastop": 338, "paper_cites_pap": 338, "author_writes_pap": 338, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 338, "\u8fd9\u91cc\u7684": 338, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 338, "\u4e2d\u7684\u56fe": 338, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 338, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 338, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 338, "\u63a2\u7d22\u6027": 338, "\u65b9\u5f0f\u6765\u63a2\u7d22": 338, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 338, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 338, "\u91c7\u7528\u79f0\u4e3a": 338, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 338, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 338, "\u5728\u6b64\u793a\u4f8b\u4e2d": 338, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 338, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 338, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 338, "\u552f\u4e00\u6807\u8bc6": 338, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 338, "\u4e8b\u5b9e\u8bc1\u660e": 338, "\u8bb8\u591a\u7b97\u6cd5": 338, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 338, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 338, "\u96c6\u4e2d\u6027": 338, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 338, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 338, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 338, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 338, "\u80cc\u540e\u57fa\u4e8e": 338, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 338, "\u7136\u540e\u8fd0\u884c": 338, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 338, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 338, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 338, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 338, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 338, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 338, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 338, "\u5f53\u524d": 338, "\u652f\u6301\u7528\u6237\u4ee5": 338, "\u6a21\u578b\u548c": 338, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 338, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 338, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 338, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 338, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 338, "\u6211\u4eec\u8bad\u7ec3\u4e86": 338, "\u6a21\u578b": 338, "\u5c06\u8282\u70b9": 338, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 338, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 338, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 338, "\u4e3a\u6b64": 338, "\u63a5\u7740\u4e0a\u4e00\u6b65": 338, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 338, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 338, "train_gcn": 338, "\u6700\u540e": [338, 339, 342], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 338, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 338, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 338, "\u548c\u5f15\u64ce": 338, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 338, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 339, "\u6295\u5f71\u7684\u65b9\u6cd5": 339, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 339, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 339, "\u5177\u4f53\u800c\u8a00": 339, "\u56fe": 339, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 339, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 339, "\u6211\u4eec\u5df2\u7ecf\u5728": 339, "\u4e00\u8282\u89c1\u5230\u8fc7": 339, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 339, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 339, "\u8fdb\u4e00\u6b65\u7684": 339, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 339, "\u4e2d\u4e4b\u540e": 339, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 339, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 339, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 339, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 339, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 339, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 339, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 339, "pathlib": 339, "\u5230\u8fd9\u91cc": 339, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 339, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 339, "graph1": 339, "graph2": 339, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 339, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 339, "\u5728\u5e95\u5c42": 339, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 339, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 339, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 339, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 339, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 339, "\u6765\u5b8c\u6210": 339, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 339, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 339, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 339, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 339, "\u503c\u53ef\u4ee5\u4e3a": 339, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 339, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 339, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 339, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 339, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 339, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 339, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 339, "sub_graph2": 339, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 339, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 339, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 339, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 339, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 339, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 339, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 339, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 339, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 339, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 339, "\u8fb9\u6807\u7b7e": 339, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 339, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 339, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 339, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 339, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 339, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 339, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 339, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 340, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 340, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 340, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 340, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 340, "\u63d0\u4f9b\u4e86": 340, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 340, "\u5177\u6709\u4e00\u7ad9\u5f0f": 340, "\u5f00\u53d1\u4fbf\u6377": 340, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 340, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 340, "\u5305\u62ec": [340, 343], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 340, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 340, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 340, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 340, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 340, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 340, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 340, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 340, "\u5982\u98ce\u63a7": 340, "\u7535\u5546\u63a8\u8350": 340, "\u5e7f\u544a": 340, "\u7f51\u7edc\u5b89\u5168": [340, 343], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 340, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 340, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 340, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 340, "\u6700\u4f73\u8bba\u6587\u5956": 340, "vldb2017": 340, "\u6700\u4f73\u6f14\u793a\u5956": 340, "vldb2020": 340, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 340, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 340, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 340, "2021\u5f55\u7528": 340, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 340, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 340, "kdd\u7b49": 340, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 340, "\u57fa\u4e8e": [340, 345], "\u793a\u4f8b": 340, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 340, "\u521b\u5efa\u4f1a\u8bdd": 340, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 340, "\u56fe\u5206\u6790": 340, "\u56fe\u795e\u7ecf\u7f51\u7edc": 340, "\u5173\u95ed\u4f1a\u8bdd": 340, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 340, "\u5728aw": 340, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 340, "\u672c\u5730\u90e8\u7f72graphscop": 340, "\u5165\u95e8\u6559\u7a0b": 340, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [340, 345], "\u4f7f\u7528\u517c\u5bb9": [340, 345], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [340, 345], "\u7528": [340, 342, 345], "\u50cf": [340, 345], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [340, 345], "\u8f7d\u5165\u56fe\u6570\u636e": [340, 345], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [340, 345], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [340, 345], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [340, 345], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [340, 345], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [340, 345], "bipartitegraphsag": [340, 345], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [340, 345], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [340, 345], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [340, 345], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 340, "\u624b\u52a8\u914d\u7f6e\u56fe": 340, "\u9ad8\u7ea7\u7528\u6cd5": 340, "\u4ece": [340, 342], "\u4e2d\u8f7d\u56fe": 340, "\u7684\u53d8\u79cd": 340, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 340, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 340, "\u6295\u5f71": 340, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 340, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 340, "\u5185\u7f6e\u7b97\u6cd5": 340, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 340, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 340, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 340, "\u4e2d\u7684\u51fd\u6570": 340, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 340, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 340, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 340, "\u5229\u7528python": 340, "\u8fde\u63a5graphscop": 340, "\u5229\u7528java": 340, "\u5f00\u53d1\u63a7\u5236\u53f0": 340, "gremlin\u7f16\u7a0b\u5165\u95e8": 340, "gremlin\u517c\u5bb9\u6027": 340, "\u5bf9\u6bd4tinkerpop": 340, "\u56fe\u5b66\u4e60\u6a21\u578b": 340, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 340, "\u5e38\u89c1\u95ee\u9898": 340, "\u5f00\u53d1\u8005\u6307\u5357": 340, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 340, "\u6784\u5efa": 340, "\u4ee3\u7801\u98ce\u683c": 340, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 341, "monterei": 341, "\u7a0b\u5e8f\u5305": 341, "\u7684\u5f62\u5f0f\u53d1\u5e03": 341, "\u53ef\u76f4\u63a5\u901a\u8fc7": 341, "\u9700\u8981\u6ee1\u8db3": 341, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 341, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 341, "\u73af\u5883\u4e0b\u8fd0\u884c": 341, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 341, "\u7684\u7528\u6237": 341, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 341, "\u5e76\u5728": 341, "\u4e2d\u5f00\u542f": 341, "\u529f\u80fd": 341, "\u53d1\u884c\u7248\u7528\u6237": 341, "\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528": 341, "\u90e8\u7f72\u4e00\u4e2a\u672c\u5730\u7684": 341, "\u7684\u5b89\u88c5\u548c\u90e8\u7f72\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684": 341, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 341, "\u4e0a\u5b89\u88c5": 341, "wsl2": 341, "\u6765\u6a21\u62df": 341, "\u73af\u5883": [341, 345], "\u63a5\u4e0b\u6765": [341, 342, 343], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 341, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 342, "\u7b80\u79f0gie": 342, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 342, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 342, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 342, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 342, "\u8be5\u5f15\u64ce\u652f\u6301": 342, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 342, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 342, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 342, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 342, "\u63a5\u53e3": [342, 343], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 342, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 342, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 342, "\u5982\u4e0b\u6240\u793a": 342, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 342, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 342, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 342, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 342, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 342, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 342, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 342, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 342, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 342, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 342, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 342, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 342, "\u683c\u5f0f": 342, "\u7684\u8f93\u51fa": 342, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 342, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 342, "python\u8bbf\u95ee\u56fe\u6570\u636e": 342, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 342, "\u5b98\u65b9\u6587\u6863": 342, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 342, "\u8be6\u89c1gremlin": 342, "java\u7684": 342, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 342, "\u4e5f\u53eb\u505arepl\u73af\u5883": 342, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 342, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 342, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 342, "\u5b89\u88c5gremlin": 342, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 342, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 342, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 342, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 342, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 342, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 342, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 342, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 342, "\u5176\u4e2d\u7684": 342, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 342, "\u6216ip": 342, "\u548c\u7aef\u53e3": 342, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 342, "\u63d0\u793a\u7b26\u4e0b": 342, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 342, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 342, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 342, "\u8fdc\u7a0b": 342, "graphscope\u6267\u884c": 342, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 342, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 342, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 342, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 342, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 342, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 342, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 342, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 342, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 342, "hoc": 342, "\u904d\u5386\u67e5\u8be2": 342, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 342, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 342, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 342, "\u70b9\u6216\u8fb9": 342, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 342, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 342, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 342, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 342, "\u952e": 342, "\u503c": 342, "\u5bf9": 342, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 342, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 342, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 342, "\u5b83\u5305\u542b": 342, "\u7528\u6237": 342, "\u5546\u54c1": 342, "\u5730\u5740": 342, "\u4e09\u7c7b\u70b9": 342, "\u5b83\u4eec\u901a\u8fc7": 342, "\u8d2d\u4e70": 342, "\u9012\u9001": 342, "belongs_to": 342, "\u5c5e\u4e8e": 342, "home_of": 342, "\u5bb6\u5ead\u5730\u5740": 342, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 342, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 342, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 342, "\u8def\u5f841": 342, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 342, "\u4e70\u5bb6": 342, "tom": 342, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 342, "jack": 342, "\u63d0\u4f9b\u7684\u6807\u4ef7": 342, "\u7684\u5546\u54c1": 342, "gift": 342, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 342, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 342, "\u904d\u5386\u5668": 342, "\u6807\u8bc6": 342, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 342, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 342, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 342, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 342, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 342, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 342, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 342, "\u8fb9\u6216\u5c5e\u6027": 342, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 342, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 342, "\u5d4c\u5957\u904d\u5386": 342, "\u7684\u652f\u6301": 342, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 342, "\u5b50": 342, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 342, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 342, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 342, "\u8fc7\u6ee4": 342, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 342, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 342, "\u800c": 342, "\u6620\u5c04": 342, "\u6392\u5e8f": 342, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 342, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 342, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 342, "\u5728gremlin\u4e2d\u901a\u8fc7": 342, "\u5faa\u73af": 342, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 342, "\u7ec8\u6b62\u6761\u4ef6": 342, "\u8868\u8fbe": 342, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 342, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 342, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 342, "\u6761\u4ef6\u7ec8\u6b62": 342, "\u64cd\u4f5c\u7c7b\u4f3c": 342, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 342, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 342, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 342, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 342, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 342, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 342, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 342, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 342, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 342, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 342, "\u7684\u6709\u5411\u73af\u8def": 342, "\u9996\u5148": [342, 344], "\u8f93\u5165\u56fe\u64cd\u4f5c": 342, "\u5305\u542b\u4e00\u4e2a": 342, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 342, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 342, "\u70b9": 342, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 342, "\u7684\u70b9": 342, "\u7d27\u968f\u5176\u540e\u7684": 342, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 342, "\u4fee\u9970\u7b26": 342, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 342, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 342, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 342, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 342, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 342, "\u67e5\u8be2\u6cbf\u7740": 342, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 342, "\u6b21": 342, "\u8f93\u51fahops\u5728": 342, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 342, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 342, "\u901a\u8fc7\u5728": 342, "\u5185\u914d\u7f6e": 342, "\u9009\u9879\u5b9e\u73b0": 342, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 342, "\u6307\u4ee3": 342, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 342, "\u7684\u73af": 342, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 342, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 342, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 342, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 342, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 342, "\u5982\u679c\u6709\u7684\u8bdd": 342, "gie\u652f\u6301apach": 342, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 342, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 342, "3\u548c3": 342, "4\u7248\u672c\u517c\u5bb9\u7684": 342, "\u670d\u52a1\u63a5\u53e3": 342, "\u9664\u6b64\u4e4b\u5916": 342, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 342, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 342, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 342, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 342, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 342, "\u76ee\u524d\u7684": 342, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 342, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 342, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 342, "\u4e0d\u53ef\u4fee\u6539": 342, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 342, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 342, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 342, "\u7ea6\u675f": 342, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 342, "\u5305\u62ec\u70b9": 342, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 342, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 342, "\u4e3b\u952e\u7ea6\u675f": 342, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 342, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 342, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 342, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 342, "id\u7f16\u7801\u4e86\u7c7b\u578b": 342, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 342, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 342, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 342, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 342, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 342, "\u56fe\u4fee\u6539\u64cd\u4f5c": 342, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 342, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 342, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 342, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 342, "\u4e8b\u52a1": 342, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 342, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 342, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 342, "\u548c\u793a\u4f8b\u7528\u6cd5": 342, "\u8f93\u5165\u56fe": 342, "labelnam": 342, "labelname1": 342, "labelname2": 342, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 342, "\u8bed\u6cd5\u7cd6": 342, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 342, "\u4ee3\u8868": 342, "\u8282\u70b9\u7684age\u5c5e\u6027": 342, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 342, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 342, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 342, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 342, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 342, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 342, "dedup": 342, "aaa": 342, "otherv": 342, "flatmap": 342, "\u591a\u91cd\u6620\u5c04": 342, "bothv": 342, "\u627e\u5230\u6240\u6709\u4ece": 342, "\u5f00\u59cb\u901a\u8fc7": 342, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 342, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 342, "\u70b9\u4e0d\u91cd\u590d": 342, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 342, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 342, "\u70b9\u53ef\u91cd\u590d": 342, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 342, "\u805a\u5408": 342, "groupbi": 342, "groupby\u591a\u4e2akei": 342, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 342, "groupby\u591a\u4e2avalu": 342, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 342, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 342, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 342, "\u4f1a\u9010\u6b65\u652f\u6301": 342, "\u53ef\u4ee5\u901a\u8fc7path": 342, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 342, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 342, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 342, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 342, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 342, "\u8ba1\u7b97\u5b50\u56fe": 342, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 342, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 342, "cap": 342, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 342, "\u4f8b\u5982pagerank\u548cshortestpath": 342, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 342, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 343, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 343, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 343, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 343, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 343, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 343, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 343, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 343, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 343, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 343, "\u57fa\u4e8egl": 343, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 343, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 343, "\u4f8b\u5982\u56fe\u91c7\u6837": 343, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 343, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 343, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 343, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 343, "\u539f\u59cb\u7684gcn": 343, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 343, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 343, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 343, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 343, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 343, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 343, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 343, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 343, "graphsaint\u7b49": 343, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 343, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 343, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 343, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 343, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 343, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 343, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 343, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 343, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 343, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 343, "\u5305\u62ectensorflow": 343, "\u548cpytorch": 343, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 343, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 343, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 343, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 343, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 343, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 343, "\u79f0\u4e3a": 343, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 343, "\u611f\u53d7\u91ce": 343, "\u591a\u8df3\u90bb\u5c45": 343, "\u7ec4\u6210": 343, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 343, "\u6211\u4eec\u5b9e\u73b0": 343, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 343, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 343, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 343, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 343, "\u7136\u540e\u7528": 343, "\u7ba1\u7406": 343, "\u5230": 343, "\u7684\u8f6c\u6362": 343, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 343, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 343, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 343, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 343, "\u5411\u91cf": 343, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 343, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 343, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 343, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 343, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 343, "\u56fe\u7f16\u7801\u5668": 343, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 343, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 343, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 343, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 343, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 343, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 343, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 343, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 343, "\u5982tensorflow": 343, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 343, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 343, "\u901a\u5e38\u6765\u8bf4": 343, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 343, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 343, "\u7528\u56fe\u91c7\u6837": 343, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 343, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 343, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 343, "\u4ee5\u8fd9\u4e9b": 343, "\u4e3a\u8f93\u5165\u4ea7\u751f": 343, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 343, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 343, "\u4ea7\u751f\u8d1f\u6837\u672c": 343, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 343, "\u6211\u4eec\u62bd\u8c61\u4e86": 343, "\u6765\u91c7\u6837\u90bb\u5c45": 343, "\u6700\u540e\u5c06": 343, "\u4ea7\u751f\u7684": 343, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 343, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 343, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 343, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 343, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 343, "\u624d\u80fd\u4f7f\u7528": 343, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 343, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 343, "\u5b9a\u4e49\u7f16\u7801\u5668": 343, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 343, "\u5f97\u5230": 343, "\u540e": 343, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 343, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 343, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 343, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 343, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 343, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 343, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 343, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 343, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 343, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 343, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 343, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 343, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 343, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 343, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 343, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 343, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 343, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 343, "\u6765": 343, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 343, "\u9700\u8981\u7684\u683c\u5f0f": 343, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 343, "\u5206\u522b\u662f\u70b9\u8868": 343, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 343, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 343, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 343, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 343, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 343, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 343, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 343, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 343, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 343, "\u56de\u4e00\u8df3\u90bb\u5c45": 343, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 343, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 343, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 343, "\u56e0\u6b64\u9009\u62e9": 343, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 343, "\u6210": 343, "\u8fd4\u56de": 343, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 343, "\u6765\u628a": 343, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 343, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 343, "\u4f60\u53ef\u4ee5\u4ece": 343, "\u83b7\u53d6\u548c\u524d\u9762": 343, "\u5bf9\u5e94\u7684": 343, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 343, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 343, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 343, "\u56e0\u4e3a": 343, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 343, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 343, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 343, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 343, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 343, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 343, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 343, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 343, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 343, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 343, "\u7136\u540e\u5728": 343, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 343, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 343, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 343, "\u6765\u8fdb\u884c\u8bad\u7ec3": 343, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 343, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 343, "\u76ee\u5f55": 343, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 343, "gat\u7b49\u6a21\u578b": 343, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 343, "\u5c5e\u6027\u56fe": 344, "\u56fe\u4e0a\u7684\u70b9": 344, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 344, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 344, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 344, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 344, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 344, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 344, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 344, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 344, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 344, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 344, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 344, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 344, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 344, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 344, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 344, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 344, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 344, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 344, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 344, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 344, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 344, "\u7684\u672c\u5730\u8def\u5f84": 344, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 344, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 344, "\u662f\u6211\u4eec\u901a\u8fc7": 344, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 344, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 344, "\u4f60\u53ef\u4ee5\u5728": 344, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 344, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 344, "\u7136\u800c": 344, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 344, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 344, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 344, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 344, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 344, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 344, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 344, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 344, "\u6211\u4eec\u5c06\u4f7f\u7528": 344, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 344, "\u627e\u5230\u6e90\u6570\u636e": 344, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 344, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 344, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 344, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 344, "\u4ee3\u8868\u6570\u636e\u6e90": 344, "\u6307\u793a": 344, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 344, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 344, "\u6570\u7ec4\u7b49": 344, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 344, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 344, "\u8f7d\u5165\u6570\u636e": 344, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 344, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 344, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 344, "\u9ed8\u8ba4\u4e3a": 344, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 344, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 344, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 344, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 344, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 344, "\u4e3e\u4e2a\u4f8b\u5b50": 344, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 344, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 344, "\u53ef\u9009\u9879": 344, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 344, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 344, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 344, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 344, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 344, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 344, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 344, "\u6bd4\u5982\u8bf4": 344, "\u5217\u7684\u5217\u540d": 344, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 344, "\u6216\u76ee\u6807\u70b9": 344, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 344, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 344, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 344, "\u4ee3\u8868\u7b2c\u51e0\u5217": 344, "\u4ece0\u5f00\u59cb": 344, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 344, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 344, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 344, "\u7c7b\u4f3c": 344, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 344, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 344, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 344, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 344, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 344, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 344, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 344, "\u8fb9\u7684\u6807\u7b7e\u540d": 344, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 344, "\u4e00\u5217\u5c5e\u6027": 344, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 344, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 344, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 344, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 344, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 344, "\u4e3e\u4f8b\u6765\u8bf4": 344, "\u8d77\u70b9\u7684": 344, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 344, "\u5217\u540d": 344, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 344, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 344, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 344, "\u4e00\u5217\u4e3a\u8d77\u70b9": 344, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 344, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 344, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 344, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 344, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 344, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 344, "\u5982\u679c\u7528\u6237\u7684": 344, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 344, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 344, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 344, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 344, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 344, "\u6709\u4e00\u4e2a\u540d\u4e3a": 344, "\u7684\u8fb9\u6807\u7b7e": 344, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 344, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 344, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 344, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 344, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 344, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 344, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 344, "\u50cf\u8fd9\u6837": 344, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 344, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 344, "\u5728\u8fd9\u91cc": 344, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 344, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 344, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 344, "\u7b49\u7c7b\u578b": 344, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 344, "\u5206\u522b\u4e3a": 344, "\u53ef\u4ee5\u4e3a": 344, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 344, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 344, "\u5f53id\u4e0d\u80fd\u7528": 344, "\u8868\u793a\u65f6": 344, "\u624d\u5e94\u8be5\u4f7f\u7528": 344, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 344, "\u5efa\u8bae\u4f7f\u7528": 344, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 344, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 344, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 344, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 344, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 344, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 344, "\u5c5e\u6027\u56fe\u7684": 344, "\u4f8b\u5b50": 344, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 344, "\u7684\u7c7b": 344, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 344, "\u652f\u6301\u4ece": 344, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 344, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 344, "\u9664\u4e86": 344, "\u5916": 344, "\u5176\u4ed6\u5c5e\u6027": 344, "id\u5217": 344, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 344, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 344, "\u6211\u4eec\u5c06\u5176\u4ee5": 344, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 344, "\u5f53": 344, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 344, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 344, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 344, "\u6807\u51c6": 344, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 344, "\u5c06\u4f1a\u89e3\u6790": 344, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 344, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 344, "\u672c\u5730": 344, "\u6570\u636e\u7531": 344, "\u8d1f\u8d23\u8f7d\u5165": 344, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 344, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 344, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 344, "\u4e4b\u4e8e": 344, "\u6216\u8005\u662f": 344, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 344, "\u6bd4\u5982\u53c2\u7167": 344, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 344, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 344, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 344, "abstractbufferedfil": 344, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 344, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 344, "write\u529f\u80fd": 344, "\u6700\u540e\u901a\u8fc7": 344, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 344, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 345, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 345, "\u5982\u4f55\u8f7d\u56fe": 345, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 345, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 345, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 345, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 345, "\u6211\u4eec\u7528jupyt": 345, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 345, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 345, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 345, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 345, "lab": 345, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 345, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 345}, "objects": {"": [[101, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [101, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [101, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [101, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [101, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [101, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [101, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [101, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [101, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [101, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [101, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [101, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [101, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [101, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [101, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [101, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [101, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [101, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [101, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [101, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [101, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [101, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [101, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [101, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [101, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [101, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [101, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [101, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [101, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [101, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [101, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [101, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [101, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [101, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [101, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [101, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [101, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [101, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [101, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::frag_id"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::label_id"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::frag_id"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::label_id"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::extend_type"], [101, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::frag_id"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [101, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [101, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [101, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [101, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [101, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [101, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [101, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [101, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [101, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [101, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [101, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [101, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [101, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [101, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [101, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [101, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [101, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [101, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [101, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [101, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [101, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [101, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [101, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [101, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [101, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [101, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [101, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [101, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [101, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [101, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [101, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [101, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [101, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [101, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [101, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [101, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [101, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [101, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [101, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [101, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [101, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [101, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [101, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [101, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [101, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [101, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [101, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [101, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [101, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [101, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [101, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [101, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [101, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [101, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [101, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [101, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [101, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [101, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [101, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [101, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [101, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [101, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [101, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [101, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [101, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [101, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [101, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [101, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [101, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [101, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [101, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [101, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [101, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [101, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [101, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [101, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [101, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [101, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [101, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [101, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [101, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [101, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [101, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [101, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [101, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [101, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [101, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [101, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [101, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [101, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [101, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [101, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [101, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [101, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [101, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [101, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [101, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [101, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [101, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [101, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [101, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [101, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [101, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [101, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [101, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [101, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [101, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [101, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [101, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [101, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [101, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [101, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [101, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [101, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [101, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [101, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [101, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [101, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [101, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [101, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [101, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [101, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [101, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [101, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [101, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [101, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [101, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [101, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [101, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [101, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [101, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [101, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [101, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [101, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [101, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [101, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [101, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [101, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [101, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [101, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [101, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [101, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [101, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [101, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [101, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [101, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [101, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [101, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [101, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [101, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [101, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [101, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [101, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [101, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [101, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [101, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [101, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [101, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [101, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [101, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [101, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [101, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [101, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [101, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [101, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [101, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [101, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [101, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [101, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [101, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [101, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [101, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [101, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [101, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [101, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [101, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [101, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [101, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [101, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [101, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [101, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [101, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [101, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [101, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [101, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [101, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [101, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [101, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [101, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [101, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [101, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [101, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [101, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [101, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [101, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [101, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [101, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [101, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [101, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [101, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [101, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [101, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [101, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [101, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [101, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [101, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [101, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [101, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [101, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [101, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [101, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [101, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [101, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [101, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [101, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [101, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [101, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [101, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [101, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [101, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [101, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [101, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [101, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [101, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [101, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [101, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [101, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [101, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [101, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [101, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [101, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [101, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [101, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [101, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [101, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [101, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [101, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [101, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [101, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [101, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [101, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [101, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [101, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [101, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [101, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [101, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [101, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [101, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [101, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [101, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [101, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [101, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [101, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [101, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [101, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [101, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [101, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [101, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [101, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [101, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [101, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [101, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [101, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [101, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [101, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [101, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [101, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [101, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [101, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [101, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [101, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [101, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [101, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [101, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [101, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [101, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [101, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [101, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [101, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [101, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [101, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [101, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [101, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [101, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [101, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [101, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [101, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [101, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [101, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [101, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [101, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [101, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [101, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [101, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [101, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [101, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [101, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [101, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [101, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [101, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [101, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [101, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [101, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [101, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [101, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [101, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [101, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [101, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [101, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [101, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [101, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [101, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [101, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [101, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [101, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [101, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [101, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [101, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [101, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[318, 9, 1, "", "Session"], [108, 12, 1, "", "Vertex"], [102, 8, 1, "", "attribute_assortativity_coefficient"], [102, 8, 1, "", "average_degree_connectivity"], [102, 8, 1, "", "average_shortest_path_length"], [102, 8, 1, "", "avg_clustering"], [102, 8, 1, "", "bfs"], [102, 8, 1, "", "cdlp"], [102, 8, 1, "", "clustering"], [109, 8, 1, "", "declare"], [102, 8, 1, "", "degree_assortativity_coefficient"], [102, 8, 1, "", "degree_centrality"], [102, 8, 1, "", "eigenvector_centrality"], [152, 8, 1, "", "g"], [153, 8, 1, "", "get_default_session"], [154, 8, 1, "", "graphlearn"], [155, 8, 1, "", "gremlin"], [156, 8, 1, "", "has_default_session"], [102, 8, 1, "", "hits"], [102, 8, 1, "", "is_simple_path"], [102, 8, 1, "", "k_core"], [102, 8, 1, "", "k_shell"], [102, 8, 1, "", "katz_centrality"], [102, 8, 1, "", "louvain"], [102, 8, 1, "", "lpa"], [102, 8, 1, "", "lpa_u2i"], [102, 8, 1, "", "numeric_assortativity_coefficient"], [102, 8, 1, "", "pagerank"], [102, 8, 1, "", "pagerank_nx"], [157, 14, 1, "", "session"], [158, 8, 1, "", "set_option"], [102, 8, 1, "", "sssp"], [102, 8, 1, "", "triangles"], [102, 8, 1, "", "voterank"], [102, 8, 1, "", "wcc"]], "graphscope.Session": [[318, 10, 1, "", "__enter__"], [318, 10, 1, "", "__exit__"], [318, 10, 1, "", "__init__"], [318, 10, 1, "", "add_lib"], [318, 10, 1, "", "as_default"], [318, 10, 1, "", "close"], [318, 10, 1, "", "connected"], [318, 11, 1, "", "engine_config"], [318, 10, 1, "", "g"], [318, 10, 1, "", "get_config"], [318, 10, 1, "", "get_vineyard_object_mapping_table"], [318, 10, 1, "", "graphlearn"], [318, 11, 1, "", "info"], [318, 10, 1, "", "interactive"], [318, 10, 1, "", "load_from"], [318, 10, 1, "", "load_from_gar"], [318, 10, 1, "", "restore_from_pvc"], [318, 10, 1, "", "run_fetches"], [318, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[102, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[102, 10, 1, "", "__call__"], [102, 10, 1, "", "__init__"], [102, 10, 1, "", "is_compatible"], [102, 10, 1, "", "signature"]], "graphscope.framework.app": [[102, 9, 1, "", "App"], [102, 9, 1, "", "AppAssets"], [102, 9, 1, "", "AppDAGNode"], [110, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[102, 10, 1, "", "__del__"], [102, 10, 1, "", "__init__"], [102, 11, 1, "", "key"], [102, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[102, 10, 1, "", "__init__"], [102, 11, 1, "", "algo"], [102, 11, 1, "", "context_type"], [102, 11, 1, "", "gar"], [102, 10, 1, "", "is_compatible"], [102, 11, 1, "", "signature"], [102, 11, 1, "", "type"]], "graphscope.framework.context": [[103, 9, 1, "", "BaseContextDAGNode"], [103, 9, 1, "", "Context"], [103, 9, 1, "", "DynamicVertexDataContext"], [103, 9, 1, "", "LabeledVertexDataContextDAGNode"], [103, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [103, 9, 1, "", "ResultDAGNode"], [103, 9, 1, "", "TensorContextDAGNode"], [103, 9, 1, "", "VertexDataContextDAGNode"], [103, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[103, 10, 1, "", "to_dataframe"], [103, 10, 1, "", "to_numpy"], [103, 10, 1, "", "to_vineyard_dataframe"], [103, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[315, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[111, 8, 1, "", "add_column"], [112, 8, 1, "", "add_labels_to_graph"], [113, 8, 1, "", "arrow_to_dynamic"], [114, 8, 1, "", "bind_app"], [115, 8, 1, "", "clear_edges"], [116, 8, 1, "", "clear_graph"], [117, 8, 1, "", "context_to_dataframe"], [118, 8, 1, "", "context_to_numpy"], [119, 8, 1, "", "copy_graph"], [120, 8, 1, "", "create_app"], [121, 8, 1, "", "create_graph"], [122, 8, 1, "", "create_graph_view"], [123, 8, 1, "", "create_loader"], [124, 8, 1, "", "create_subgraph"], [125, 8, 1, "", "create_unload_op"], [126, 8, 1, "", "dynamic_to_arrow"], [127, 8, 1, "", "get_context_data"], [128, 8, 1, "", "graph_to_dataframe"], [129, 8, 1, "", "graph_to_numpy"], [130, 8, 1, "", "gremlin_to_subgraph"], [131, 8, 1, "", "modify_edges"], [132, 8, 1, "", "modify_vertices"], [133, 8, 1, "", "output"], [134, 8, 1, "", "project_arrow_property_graph"], [135, 8, 1, "", "project_to_simple"], [136, 8, 1, "", "report_graph"], [137, 8, 1, "", "run_app"], [138, 8, 1, "", "to_data_sink"], [139, 8, 1, "", "to_directed"], [140, 8, 1, "", "to_undirected"], [141, 8, 1, "", "to_vineyard_dataframe"], [142, 8, 1, "", "to_vineyard_tensor"], [143, 8, 1, "", "unload_app"], [144, 8, 1, "", "unload_context"], [145, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[173, 9, 1, "", "Graph"], [173, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[173, 10, 1, "", "__init__"], [173, 10, 1, "", "add_column"], [173, 10, 1, "", "add_edges"], [173, 10, 1, "", "add_vertices"], [173, 10, 1, "", "archive"], [173, 10, 1, "", "consolidate_columns"], [173, 10, 1, "", "detach"], [173, 11, 1, "", "key"], [173, 10, 1, "", "load_from"], [173, 10, 1, "", "loaded"], [173, 10, 1, "", "project"], [173, 10, 1, "", "save_to"], [173, 11, 1, "", "schema"], [173, 11, 1, "", "schema_path"], [173, 11, 1, "", "session_id"], [173, 10, 1, "", "to_dataframe"], [173, 10, 1, "", "to_directed"], [173, 10, 1, "", "to_numpy"], [173, 10, 1, "", "to_undirected"], [173, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[173, 10, 1, "", "__init__"], [173, 10, 1, "", "add_column"], [173, 10, 1, "", "add_edges"], [173, 10, 1, "", "add_vertices"], [173, 10, 1, "", "consolidate_columns"], [173, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[173, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[173, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[173, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[315, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[146, 10, 1, "", "__init__"], [147, 10, 1, "", "as_op_def"], [148, 10, 1, "", "eval"], [149, 11, 1, "", "evaluated"], [150, 11, 1, "", "key"], [151, 11, 1, "", "signature"]], "graphscope.interactive.query": [[174, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[174, 10, 1, "", "__init__"], [174, 10, 1, "", "close"], [174, 11, 1, "", "cypher_driver"], [174, 11, 1, "", "cypher_url"], [174, 10, 1, "", "execute"], [174, 11, 1, "", "graph_url"], [174, 11, 1, "", "gremlin_client"], [174, 11, 1, "", "gremlin_url"], [174, 11, 1, "", "object_id"], [174, 11, 1, "", "session"], [174, 11, 1, "", "session_id"], [174, 10, 1, "", "subgraph"], [174, 10, 1, "", "submit"], [174, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[175, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[175, 10, 1, "", "E"], [175, 10, 1, "", "V"], [175, 10, 1, "", "__init__"], [175, 10, 1, "", "get_handle"]], "graphscope.nx": [[311, 9, 1, "", "DiGraph"], [311, 9, 1, "", "Graph"], [313, 8, 1, "", "read_adjlist"], [313, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[311, 10, 1, "", "__contains__"], [311, 10, 1, "", "__getitem__"], [311, 10, 1, "", "__init__"], [311, 10, 1, "", "__iter__"], [311, 10, 1, "", "__len__"], [311, 10, 1, "", "add_edge"], [311, 10, 1, "", "add_edges_from"], [311, 10, 1, "", "add_node"], [311, 10, 1, "", "add_nodes_from"], [311, 10, 1, "", "add_weighted_edges_from"], [311, 11, 1, "", "adj"], [311, 10, 1, "", "adjacency"], [311, 14, 1, "", "adjlist_inner_dict_factory"], [311, 14, 1, "", "adjlist_outer_dict_factory"], [311, 10, 1, "", "clear"], [311, 10, 1, "", "clear_edges"], [311, 10, 1, "", "copy"], [311, 11, 1, "", "degree"], [311, 14, 1, "", "edge_attr_dict_factory"], [311, 10, 1, "", "edge_subgraph"], [311, 11, 1, "", "edges"], [311, 10, 1, "", "get_edge_data"], [311, 14, 1, "", "graph_attr_dict_factory"], [311, 14, 1, "", "graph_cache_factory"], [311, 11, 1, "", "graph_type"], [311, 10, 1, "", "has_edge"], [311, 10, 1, "", "has_node"], [311, 10, 1, "", "has_predecessor"], [311, 10, 1, "", "has_successor"], [311, 11, 1, "", "in_degree"], [311, 11, 1, "", "in_edges"], [311, 10, 1, "", "is_directed"], [311, 10, 1, "", "is_multigraph"], [311, 11, 1, "", "key"], [311, 11, 1, "", "name"], [311, 10, 1, "", "nbunch_iter"], [311, 10, 1, "", "neighbors"], [311, 14, 1, "", "node_attr_dict_factory"], [311, 14, 1, "", "node_dict_factory"], [311, 11, 1, "", "nodes"], [311, 10, 1, "", "number_of_edges"], [311, 10, 1, "", "number_of_nodes"], [311, 11, 1, "", "op"], [311, 10, 1, "", "order"], [311, 11, 1, "", "out_degree"], [311, 11, 1, "", "out_edges"], [311, 11, 1, "", "pred"], [311, 10, 1, "", "predecessors"], [311, 10, 1, "", "remove_edge"], [311, 10, 1, "", "remove_edges_from"], [311, 10, 1, "", "remove_node"], [311, 10, 1, "", "remove_nodes_from"], [311, 10, 1, "", "reverse"], [311, 11, 1, "", "schema"], [311, 11, 1, "", "session"], [311, 11, 1, "", "session_id"], [311, 10, 1, "", "set_edge_data"], [311, 10, 1, "", "set_node_data"], [311, 11, 1, "", "signature"], [311, 10, 1, "", "size"], [311, 10, 1, "", "subgraph"], [311, 11, 1, "", "succ"], [311, 10, 1, "", "successors"], [311, 10, 1, "", "to_directed"], [311, 10, 1, "", "to_undirected"], [311, 10, 1, "", "to_undirected_class"], [311, 10, 1, "", "update"]], "graphscope.nx.Graph": [[311, 10, 1, "", "__contains__"], [311, 10, 1, "", "__getitem__"], [314, 8, 1, "", "__init__"], [311, 10, 1, "", "__iter__"], [311, 10, 1, "", "__len__"], [314, 8, 1, "", "_convert_arrow_to_dynamic"], [311, 10, 1, "", "add_edge"], [311, 10, 1, "", "add_edges_from"], [311, 10, 1, "", "add_node"], [311, 10, 1, "", "add_nodes_from"], [311, 10, 1, "", "add_weighted_edges_from"], [311, 11, 1, "", "adj"], [311, 10, 1, "", "adjacency"], [311, 14, 1, "", "adjlist_inner_dict_factory"], [311, 14, 1, "", "adjlist_outer_dict_factory"], [311, 10, 1, "", "clear"], [311, 10, 1, "", "clear_edges"], [311, 10, 1, "", "copy"], [311, 11, 1, "", "degree"], [311, 14, 1, "", "edge_attr_dict_factory"], [311, 10, 1, "", "edge_subgraph"], [311, 11, 1, "", "edges"], [311, 10, 1, "", "get_edge_data"], [311, 14, 1, "", "graph_attr_dict_factory"], [311, 14, 1, "", "graph_cache_factory"], [311, 11, 1, "", "graph_type"], [311, 10, 1, "", "has_edge"], [311, 10, 1, "", "has_node"], [311, 10, 1, "", "is_directed"], [311, 10, 1, "", "is_multigraph"], [311, 11, 1, "", "key"], [311, 11, 1, "", "name"], [311, 10, 1, "", "nbunch_iter"], [311, 10, 1, "", "neighbors"], [311, 14, 1, "", "node_attr_dict_factory"], [311, 14, 1, "", "node_dict_factory"], [311, 11, 1, "", "nodes"], [311, 10, 1, "", "number_of_edges"], [311, 10, 1, "", "number_of_nodes"], [311, 11, 1, "", "op"], [311, 10, 1, "", "order"], [311, 10, 1, "", "remove_edge"], [311, 10, 1, "", "remove_edges_from"], [311, 10, 1, "", "remove_node"], [311, 10, 1, "", "remove_nodes_from"], [311, 11, 1, "", "schema"], [311, 11, 1, "", "session"], [311, 11, 1, "", "session_id"], [311, 10, 1, "", "set_edge_data"], [311, 10, 1, "", "set_node_data"], [311, 11, 1, "", "signature"], [311, 10, 1, "", "size"], [311, 10, 1, "", "subgraph"], [311, 10, 1, "", "to_directed"], [311, 10, 1, "", "to_undirected"], [311, 10, 1, "", "to_undirected_class"], [311, 10, 1, "", "update"]], "graphscope.nx.builtin": [[176, 8, 1, "", "average_clustering"], [176, 8, 1, "", "average_shortest_path_length"], [176, 8, 1, "", "bfs_edges"], [176, 8, 1, "", "clustering"], [176, 8, 1, "", "degree_centrality"], [176, 8, 1, "", "eigenvector_centrality"], [176, 8, 1, "", "has_path"], [176, 8, 1, "", "hits"], [176, 8, 1, "", "in_degree_centrality"], [176, 8, 1, "", "k_core"], [176, 8, 1, "", "katz_centrality"], [176, 8, 1, "", "out_degree_centrality"], [176, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[177, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[178, 8, 1, "", "add_cycle"], [179, 8, 1, "", "add_path"], [180, 8, 1, "", "add_star"], [181, 8, 1, "", "all_neighbors"], [182, 8, 1, "", "common_neighbors"], [183, 8, 1, "", "create_empty_copy"], [184, 8, 1, "", "degree"], [185, 8, 1, "", "degree_histogram"], [186, 8, 1, "", "density"], [187, 8, 1, "", "edge_subgraph"], [188, 8, 1, "", "edges"], [189, 8, 1, "", "freeze"], [190, 8, 1, "", "induced_subgraph"], [191, 8, 1, "", "info"], [192, 8, 1, "", "is_directed"], [193, 8, 1, "", "is_empty"], [194, 8, 1, "", "is_frozen"], [195, 8, 1, "", "is_negatively_weighted"], [196, 8, 1, "", "is_weighted"], [197, 8, 1, "", "neighbors"], [198, 8, 1, "", "nodes"], [199, 8, 1, "", "nodes_with_selfloops"], [200, 8, 1, "", "non_edges"], [201, 8, 1, "", "non_neighbors"], [202, 8, 1, "", "number_of_edges"], [203, 8, 1, "", "number_of_nodes"], [204, 8, 1, "", "number_of_selfloops"], [205, 8, 1, "", "selfloop_edges"], [206, 8, 1, "", "subgraph"], [207, 8, 1, "", "to_directed"], [208, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[310, 13, 0, "-", "atlas"], [310, 13, 0, "-", "classic"], [310, 13, 0, "-", "community"], [310, 13, 0, "-", "degree_seq"], [310, 13, 0, "-", "directed"], [310, 13, 0, "-", "duplication"], [310, 13, 0, "-", "ego"], [310, 13, 0, "-", "expanders"], [310, 13, 0, "-", "geometric"], [310, 13, 0, "-", "harary_graph"], [310, 13, 0, "-", "intersection"], [310, 13, 0, "-", "joint_degree_seq"], [310, 13, 0, "-", "mycielski"], [310, 13, 0, "-", "nonisomorphic_trees"], [310, 13, 0, "-", "small"], [310, 13, 0, "-", "social"], [310, 13, 0, "-", "spectral_graph_forge"], [310, 13, 0, "-", "sudoku"], [310, 13, 0, "-", "trees"], [310, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[209, 8, 1, "", "graph_atlas"], [210, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[211, 8, 1, "", "balanced_tree"], [212, 8, 1, "", "barbell_graph"], [213, 8, 1, "", "binomial_tree"], [214, 8, 1, "", "circulant_graph"], [215, 8, 1, "", "circular_ladder_graph"], [216, 8, 1, "", "complete_graph"], [217, 8, 1, "", "complete_multipartite_graph"], [218, 8, 1, "", "cycle_graph"], [219, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [220, 8, 1, "", "empty_graph"], [221, 8, 1, "", "full_rary_tree"], [222, 8, 1, "", "ladder_graph"], [223, 8, 1, "", "lollipop_graph"], [224, 8, 1, "", "null_graph"], [225, 8, 1, "", "path_graph"], [226, 8, 1, "", "star_graph"], [227, 8, 1, "", "trivial_graph"], [228, 8, 1, "", "turan_graph"], [229, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[230, 8, 1, "", "LFR_benchmark_graph"], [231, 8, 1, "", "caveman_graph"], [232, 8, 1, "", "connected_caveman_graph"], [233, 8, 1, "", "gaussian_random_partition_graph"], [234, 8, 1, "", "planted_partition_graph"], [235, 8, 1, "", "random_partition_graph"], [236, 8, 1, "", "relaxed_caveman_graph"], [237, 8, 1, "", "ring_of_cliques"], [238, 8, 1, "", "stochastic_block_model"], [239, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[240, 8, 1, "", "configuration_model"], [241, 8, 1, "", "degree_sequence_tree"], [242, 8, 1, "", "directed_configuration_model"], [243, 8, 1, "", "directed_havel_hakimi_graph"], [244, 8, 1, "", "expected_degree_graph"], [245, 8, 1, "", "havel_hakimi_graph"], [246, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[247, 8, 1, "", "gn_graph"], [248, 8, 1, "", "gnc_graph"], [249, 8, 1, "", "gnr_graph"], [250, 8, 1, "", "random_k_out_graph"], [251, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[252, 8, 1, "", "duplication_divergence_graph"], [253, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[254, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[255, 8, 1, "", "chordal_cycle_graph"], [256, 8, 1, "", "margulis_gabber_galil_graph"], [257, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[258, 8, 1, "", "geographical_threshold_graph"], [259, 8, 1, "", "random_geometric_graph"], [260, 8, 1, "", "soft_random_geometric_graph"], [261, 8, 1, "", "thresholded_random_geometric_graph"], [262, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[263, 8, 1, "", "hkn_harary_graph"], [264, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[265, 8, 1, "", "general_random_intersection_graph"], [266, 8, 1, "", "k_random_intersection_graph"], [267, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[268, 8, 1, "", "directed_joint_degree_graph"], [269, 8, 1, "", "is_valid_directed_joint_degree"], [270, 8, 1, "", "is_valid_joint_degree"], [271, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[272, 8, 1, "", "mycielski_graph"], [273, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[274, 8, 1, "", "nonisomorphic_trees"], [275, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[276, 8, 1, "", "LCF_graph"], [277, 8, 1, "", "bull_graph"], [278, 8, 1, "", "chvatal_graph"], [279, 8, 1, "", "cubical_graph"], [280, 8, 1, "", "desargues_graph"], [281, 8, 1, "", "diamond_graph"], [282, 8, 1, "", "dodecahedral_graph"], [283, 8, 1, "", "frucht_graph"], [284, 8, 1, "", "heawood_graph"], [285, 8, 1, "", "house_graph"], [286, 8, 1, "", "house_x_graph"], [287, 8, 1, "", "icosahedral_graph"], [288, 8, 1, "", "krackhardt_kite_graph"], [289, 8, 1, "", "make_small_graph"], [290, 8, 1, "", "moebius_kantor_graph"], [291, 8, 1, "", "octahedral_graph"], [292, 8, 1, "", "pappus_graph"], [293, 8, 1, "", "petersen_graph"], [294, 8, 1, "", "sedgewick_maze_graph"], [295, 8, 1, "", "tetrahedral_graph"], [296, 8, 1, "", "truncated_cube_graph"], [297, 8, 1, "", "truncated_tetrahedron_graph"], [298, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[299, 8, 1, "", "davis_southern_women_graph"], [300, 8, 1, "", "florentine_families_graph"], [301, 8, 1, "", "karate_club_graph"], [302, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[303, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[304, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[305, 8, 1, "", "prefix_tree"], [306, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[307, 8, 1, "", "triad_graph"]], "networkx.generators": [[310, 13, 0, "-", "internet_as_graphs"], [310, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[308, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[309, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 81, 90, 171, 324, 326], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 81, 159, 176, 326, 328], "all": [0, 31, 32, 36, 41], "pair": 0, "shortest": 0, "path": [0, 74, 76, 78], "length": 0, "attribut": [0, 20, 160, 177], "assort": 0, "averag": 0, "degre": [0, 184, 310], "connect": [0, 29, 30, 69, 77, 324, 331], "between": [0, 74, 320], "central": [0, 17], "breadth": 0, "first": [0, 65], "search": 0, "cdlp": 0, "close": [0, 331], "cluster": [0, 27, 30, 33, 41, 65, 87], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": 0, "shell": [0, 69], "label": [0, 76, 78, 90, 160, 323, 344], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 42, 44, 76, 85, 96, 159, 163, 165, 168, 171], "singl": [0, 46, 62], "sourc": [0, 17, 31, 32, 44, 76, 106, 160, 166, 169, 170], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 42, 43, 46, 68, 324], "aggreg": [1, 74, 76, 78, 82], "local": [1, 7, 32, 36, 38, 41, 67, 68, 76, 83, 84, 88, 89, 323, 324], "vertex": [1, 10, 24, 44, 78, 90, 108, 317, 323, 344], "map": [1, 44, 58, 320], "support": [1, 11, 23, 44, 71, 76, 81], "deploy": [2, 27, 38, 46, 64, 65], "gae": [2, 34, 93, 328, 332], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 53, 65, 324], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 69, 77, 81, 100, 316, 324, 328, 336], "sdk": [2, 16, 34, 77, 104], "helm": [2, 29, 46], "execut": [2, 34, 70, 91], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 43, 44, 45, 46, 54, 61, 62, 64, 70, 73, 74, 78, 81, 82, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 159, 161, 162, 163, 164, 165, 167, 171, 173, 175, 177, 310, 311, 313, 314, 320, 322, 323, 324, 325, 326, 332], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 61, 64, 81, 91, 92, 94, 99, 101, 102, 332], "uninstal": [2, 29, 324], "design": [3, 9, 34, 66, 81, 82, 91, 169, 323], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 36, 42, 64, 68, 81, 83, 84, 88, 89, 91, 99, 101, 323, 332], "dev": [4, 32, 36, 41, 67, 83], "test": [4, 36, 37, 41, 67, 83, 89, 166], "setup": [4, 32], "understand": 4, "codebas": 4, "make": [4, 20], "modif": 4, "build": [4, 17, 32, 36, 41, 67, 83, 106, 159, 166, 324, 344], "faq": [5, 74], "program": [6, 12, 14, 34, 62, 169], "model": [6, 12, 14, 15, 16, 17, 24, 34, 45, 54, 82, 87, 88, 89, 93, 96, 159, 167, 171, 323, 324], "flash": [6, 15, 93], "motiv": [6, 9, 66, 91, 323], "The": [6, 19, 30, 54, 56, 66, 322], "overview": [6, 9, 12, 48, 54, 56, 64, 167, 324], "api": [6, 9, 12, 19, 20, 48, 70, 101, 104, 105, 160, 171, 312, 316, 340], "strong": 6, "express": [6, 76, 78], "implement": [6, 15, 17, 37, 169, 323], "architectur": [6, 12, 66, 320], "optim": [6, 13, 73, 74, 89], "get": [7, 17, 37, 51, 60, 68, 84, 92, 166, 321], "start": [7, 43, 48, 51, 60, 67, 68, 78, 84, 92, 171, 321], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 53, 64, 68, 83, 84, 166, 324, 331], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 41, 51, 62, 68, 76, 84, 166], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 41, 46, 47, 48, 49, 50, 57, 62, 64, 68, 84, 91, 94, 96, 97, 98, 101, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 320, 322, 332, 336, 340, 341], "what": [7, 14, 68, 74, 84, 94, 96, 97], "": [7, 68, 74, 84, 101], "next": [7, 68, 84, 97], "guid": [8, 35, 36, 47, 75, 86, 324, 328, 329], "exampl": [8, 17, 22, 23, 48, 75, 76, 86, 328, 329], "ingress": [9, 93], "increment": [9, 12], "messag": [9, 82], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 62, 161, 169], "runtim": [9, 34, 169], "kei": [10, 54, 70, 74, 81, 150], "concept": [10, 323], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 44, 78, 90, 177, 188, 313, 323, 344], "cut": [10, 323], "vertic": [10, 78, 90, 344], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 20, 308, 309, 312], "compat": [11, 74], "convert": 11, "nx": [11, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], "oper": [11, 20, 28, 71, 78, 146, 147, 148, 149, 150, 151, 169, 315], "storag": [12, 33, 34, 64, 91, 320, 323], "layer": [12, 91], "grape": [12, 17, 93, 106], "ffi": 12, "comput": [12, 62, 64, 91, 323], "applic": [12, 15, 22, 23, 78, 91, 326], "perform": [13, 19, 34, 74, 81, 99], "tune": 13, "memori": [13, 90, 325], "footprint": 13, "properti": [13, 54, 71, 74, 76, 78, 90, 323, 344], "data": [13, 43, 44, 45, 46, 62, 65, 71, 74, 90, 160, 167, 170, 171, 322, 324], "structur": [13, 71, 106, 177], "usag": [13, 56, 74, 90], "estim": [13, 319], "pie": [14, 16, 17, 18, 93, 104, 334], "i": [14, 76, 94, 96, 97], "workflow": [14, 81, 320], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 78, 80, 87, 88, 89, 100], "develop": [15, 16, 17, 18, 22, 23, 36, 47, 48, 64, 159, 171, 324, 328], "your": [15, 16, 17, 18, 22, 37, 42, 65, 88, 89, 90, 159, 169, 328], "c": [15, 16, 35, 49, 328], "defin": [15, 16, 88, 89, 169, 320], "A": [15, 54, 64, 73], "function": [15, 18, 89, 102, 104, 159, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 318], "integr": [15, 37, 62, 170], "client": [15, 27, 30, 36, 161, 331], "step": [16, 43, 76, 78, 96], "1": [16, 43, 58, 70, 160, 161, 163, 171], "context": [16, 101, 103, 317], "class": [16, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "2": [16, 43, 58, 70, 160, 161, 171, 324], "3": [16, 43, 58, 70, 160, 161, 171, 324], "packag": [16, 31, 32, 166], "4": [16, 58, 70, 160, 171], "gar": 16, "file": [16, 27, 31, 44, 170, 322], "github": [16, 17, 25, 37], "templat": [16, 17], "java": [17, 35, 39, 77, 80, 107, 324, 328], "jar": 17, "own": [17, 18, 22, 65, 90, 159, 169], "prepar": [17, 27, 30, 41, 51, 171], "jdk": [17, 106], "from": [17, 19, 20, 31, 32, 33, 44, 64, 70, 78, 90, 106, 166, 320, 324], "maven": 17, "repositori": 17, "submit": [17, 22, 23, 37, 40], "javasdk": 17, "write": [18, 324], "pregel": [18, 24, 104, 334], "us": [18, 20, 27, 32, 43, 65, 70, 74, 81, 97, 166, 169, 171, 317, 320, 324, 325], "math": [18, 334], "h": [18, 334], "how": [19, 37, 39, 40, 41, 63, 74, 83, 159, 169, 171, 332], "doe": 19, "analysi": [19, 91], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 43, 49, 87, 89], "an": [20, 70, 169], "empti": 20, "ad": [20, 90], "node": [20, 46, 82, 87, 88, 89, 177, 198, 324], "examin": 20, "element": 20, "remov": [20, 65], "constructor": 20, "access": 20, "neighbor": [20, 89, 197], "deepcopi": 20, "subgraph": [20, 74, 76, 82, 85, 96, 206], "edge_subgraph": [20, 187], "copi": [20, 31], "direct": [20, 247, 248, 249, 250, 251, 310], "analyz": 20, "object": [20, 102, 103, 161, 173, 315, 318], "transform": [20, 314], "builtin": [21, 102, 176, 315], "giraph": 22, "try": [22, 43, 171], "some": [22, 78], "app": [22, 23, 101, 102, 110], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 46, 65, 324], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 166], "toward": 23, "centric": [24, 82], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 81, 160], "k8": [27, 87, 332], "kubernet": [27, 30, 33, 38, 41, 87, 336, 341], "launch": [27, 88, 89], "default": 27, "paramet": [27, 90], "frequent": [27, 59], "imag": [27, 32, 41, 166, 324], "uri": 27, "specifi": [27, 90], "number": 27, "worker": [27, 101], "provid": 27, "kubeconfig": 27, "other": [27, 43, 65, 90, 170, 324], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36], "configur": [28, 29, 42, 44, 46, 65, 68, 172, 324], "releas": [29, 37], "offlin": [29, 31, 324], "exist": 30, "vineyard": [30, 67, 93, 325], "lifecycl": 30, "load": [30, 44, 70, 78, 87, 88, 89, 90, 320, 322, 324, 325], "dataset": [30, 70, 90, 324], "anoth": 30, "session": [30, 87, 157, 318], "environ": [31, 32, 36, 41, 67, 70, 83], "wheel": [31, 166, 336], "download": [31, 70], "destin": 31, "extract": [31, 78], "them": [31, 90], "locat": 31, "basic": [31, 78, 160], "gcc": 31, "g": [31, 152], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 336], "maco": [32, 336], "persist": [33, 324], "pv": 33, "pvc": 33, "store": [33, 49, 50, 52, 55, 67, 324], "retor": 33, "framework": [34, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "multi": [34, 317], "languag": [34, 54, 165], "high": [34, 81, 91], "librari": [34, 81, 166], "code": [35, 37, 48, 169, 330], "style": [35, 37, 312, 323], "rust": 35, "script": [35, 331], "linter": 35, "checker": 35, "contain": [36, 83], "dep": [36, 83], "target": [36, 41, 90], "compon": 36, "individu": 36, "contribut": 37, "conduct": 37, "commun": [37, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 310], "report": [37, 63], "bug": [37, 63], "request": [37, 40, 48], "featur": [37, 54, 81, 322, 324], "improv": 37, "document": [37, 48], "chang": [37, 331], "pre": 37, "commit": [37, 324], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 76], "suit": 37, "format": [37, 160, 322, 324], "right": 37, "keep": 37, "pull": [37, 40], "updat": [37, 331], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 332], "log": [38, 320, 324, 332], "command": [38, 48, 56, 331], "techniqu": [38, 90], "instrument": 39, "automat": 39, "servic": [42, 43, 48, 51, 56, 65, 67, 324], "avail": 42, "new": [43, 169], "import": [43, 44, 324], "modern": 44, "csv": 44, "odp": 44, "tabl": [44, 58, 64, 160], "breakdown": 44, "entiti": 45, "primit": 45, "type": [45, 71, 73, 90, 98, 104, 160, 311], "arrai": [45, 323], "interact": [46, 47, 48, 49, 50, 51, 53, 57, 61, 64, 68, 92, 95, 99, 174, 332], "docker": [46, 83, 166, 336], "quickstart": 46, "multipl": [46, 74, 78, 90], "valu": [46, 74, 76, 78], "yaml": 46, "admin": 48, "introduct": [48, 58, 76, 163], "detail": [48, 56, 323], "listgraph": 48, "graphmanag": 48, "categori": 48, "descript": 48, "http": 48, "curl": 48, "expect": 48, "respons": 48, "statu": [48, 51], "creategraph": 48, "deletegraph": 48, "getgraphschema": 48, "importgraph": 48, "createprocedur": 48, "proceduremanag": 48, "listallprocedur": 48, "getprocedur": 48, "updateprocedur": 48, "deleteprocedur": 48, "startservic": 48, "servicemanag": 48, "servicestatu": 48, "systemmetr": 48, "nodemetr": 48, "enabl": [48, 50, 55], "adminservic": 48, "compil": [48, 50, 52, 55, 166, 169], "procedur": [49, 50, 52, 55, 56], "turn": 50, "cypher": [50, 51, 52, 54, 69, 71, 81, 95], "queri": [50, 51, 54, 55, 61, 66, 70, 74, 78, 91, 92, 162, 174, 324], "craft": 50, "invok": 50, "manag": 51, "initi": 51, "stop": [51, 64, 92], "restart": [51, 324], "check": 51, "destroi": [51, 324], "gremlin": [51, 52, 54, 74, 76, 77, 78, 81, 95, 155, 342], "glossari": [52, 93], "solid": 54, "foundat": 54, "limit": [54, 76, 78, 97, 324], "disabl": 55, "view": [55, 324], "administr": 56, "tool": 56, "root": 56, "databas": [56, 98], "arrowfrag": 58, "0": [58, 70], "\u672f\u8bed": 58, "\u8f7d\u56fe": [58, 344], "\u521d\u59cb\u5316partition": 58, "\u6784\u5efa\u539f\u59cbarrow": 58, "shuffl": 58, "vtabl": 58, "\u6784\u5efavertex": 58, "basicarrowvertexmapbuild": 58, "5": [58, 70, 160], "\u6784\u5efafragment\u51c6\u5907": 58, "\u5904\u7406edg": 58, "basicevfragmentload": 58, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 58, "basicarrowfragmentbuild": 58, "6": 58, "fragment\u6784\u5efa": 58, "\u8bbf\u95eefragment": 58, "\u8bbf\u95ee\u9876\u70b9": 58, "\u8bbf\u95ee\u5185\u90e8\u70b9": 58, "\u8303\u56f4\u5916\u90e8\u70b9": 58, "\u8bbf\u95ee\u5168\u90e8\u70b9": 58, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 58, "\u8bbf\u95ee\u8fb9": 58, "\u8bbf\u95ee\u51fa\u8fb9": 58, "\u8bbf\u95ee\u5165\u8fb9": 58, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 58, "ask": 59, "question": [59, 70], "gle": [60, 82, 329, 332], "workload": [61, 94, 95, 96, 98, 320], "learn": [61, 64, 82, 83, 84, 88, 89, 91, 92, 96, 98, 159, 167, 175, 332], "scientist": 62, "challeng": [62, 94, 96], "handl": [62, 98], "solut": 62, "machin": [62, 88, 89], "pydata": 62, "ecosystem": [62, 72, 79], "One": [64, 92, 317], "larg": [64, 90, 94, 96], "scale": [64, 327], "system": [64, 98, 170, 172], "alibaba": [64, 160], "flex": [64, 105], "troubleshoot": [64, 324], "util": [64, 331], "refer": [64, 101, 105, 107, 316, 323], "indic": 64, "standalon": 65, "gie": [65, 66, 67, 68, 69, 70, 72, 73, 74, 77, 79, 93, 332], "process": [66, 88, 92, 98, 159, 324], "manual": [67, 90], "instanc": [68, 324], "via": [69, 77], "driver": 69, "llm": 70, "assist": 70, "set": 70, "endpoint": 70, "gener": [70, 73, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "sentenc": 70, "construct": [71, 171], "claus": 71, "neo4j": [72, 95], "For": [72, 79, 323], "tinkerpop": [72, 74, 79, 95, 342], "rule": 73, "base": [73, 82], "rbo": 73, "filtermatchrul": 73, "degreefusionrul": 73, "notmatchtoantijoinrul": 73, "fieldtrimrul": 73, "cost": 73, "cbo": 73, "infer": [73, 81], "constraint": 74, "differ": [74, 317], "inner": 74, "id": [74, 76, 78, 323], "expand": [74, 76, 255, 256, 257, 310], "filter": [74, 76, 78], "like": 74, "sql": 74, "group": [74, 76, 78], "appropri": 74, "index": 74, "standard": [76, 322], "v": 76, "e": 76, "out": [76, 78, 171], "inE": [76, 78], "both": [76, 78], "outv": [76, 78], "inv": [76, 78], "otherv": [76, 78], "bothv": [76, 78], "hasid": [76, 78], "haslabel": 76, "ha": 76, "hasnot": 76, "where": [76, 78], "travers": [76, 78, 81, 85, 95, 164], "predic": 76, "dedup": [76, 78], "project": [76, 78, 106], "constant": [76, 78], "valuemap": [76, 78], "elementmap": 76, "select": [76, 78], "count": 76, "fold": [76, 78], "sum": [76, 78], "min": [76, 78], "max": [76, 78], "mean": [76, 78], "groupcount": [76, 78], "h3": 76, "order": [76, 78, 323], "statist": 76, "coin": 76, "union": 76, "match": [76, 78, 95], "ident": 76, "unfold": 76, "syntact": [76, 78], "sugar": [76, 78], "pathexpand": 76, "endv": 76, "To": 76, "Will": 76, "Not": 76, "repeat": 76, "sideeffect": 76, "consol": [77, 342], "ldbc": 78, "retriev": [78, 323], "appli": [78, 96], "real": 78, "expans": 78, "mani": 78, "point": 78, "after": 78, "pattern": [78, 95], "relat": [78, 90, 320], "syntax": 78, "complex": 78, "bi2": 78, "bi3": 78, "bi4": 78, "left": 78, "part": 78, "bi11": 78, "bi14": 78, "apach": [79, 342], "user": [80, 100, 160, 328, 329], "eas": 81, "interfac": [81, 169, 170, 323], "extens": 81, "gnn": [81, 87, 96, 171, 338], "train": [81, 87, 88, 89, 96, 159], "nativ": 81, "across": 81, "orchestr": 81, "paradigm": [82, 96], "egograph": 82, "pass": 82, "pipelin": 82, "neighborhood": 85, "neg": [85, 168], "gsl": [85, 165], "classif": [87, 88, 89], "neural": [87, 96], "network": [87, 96, 310], "egographsag": 88, "pyg": 89, "evalu": [89, 149], "loaderfor": 89, "valid": 89, "graphsag": 89, "advanc": 90, "deduc": 90, "when": 90, "ambigu": 90, "put": [90, 160], "togeth": [90, 160], "panda": [90, 344], "numpi": [90, 344], "loader": [90, 173, 344], "variant": 90, "tip": 90, "reduc": 90, "consumpt": 90, "unifi": [91, 323], "platform": 91, "disaggreg": 91, "divers": 91, "bi": 91, "qp": 91, "task": 92, "quick": [92, 171], "gart": [93, 320], "grin": [93, 323], "graphar": [93, 322], "groot": [93, 324, 332], "gum": 93, "maxgraph": 93, "deprec": 93, "v6d": 93, "gaia": 93, "pegasu": 93, "can": [94, 96], "do": [94, 96], "typic": 96, "introduc": 97, "why": 97, "ar": 97, "case": 97, "posit": 98, "compar": 98, "variou": 98, "benchmark": 99, "result": [99, 317], "gpu": 99, "reproduc": 99, "fragment": 101, "appasset": 102, "javaapp": 102, "cython": 104, "about": 106, "javadoc": 107, "declar": 109, "load_app": 110, "dag_util": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "add_column": 111, "add_labels_to_graph": 112, "arrow_to_dynam": 113, "bind_app": 114, "clear_edg": 115, "clear_graph": 116, "context_to_datafram": 117, "context_to_numpi": 118, "copy_graph": 119, "create_app": 120, "create_graph": 121, "create_graph_view": 122, "create_load": 123, "create_subgraph": 124, "create_unload_op": 125, "dynamic_to_arrow": 126, "get_context_data": 127, "graph_to_datafram": 128, "graph_to_numpi": 129, "gremlin_to_subgraph": 130, "modify_edg": 131, "modify_vertic": 132, "output": 133, "project_arrow_property_graph": 134, "project_to_simpl": 135, "report_graph": 136, "run_app": 137, "to_data_sink": 138, "to_direct": [139, 207], "to_undirect": [140, 208], "to_vineyard_datafram": 141, "to_vineyard_tensor": 142, "unload_app": 143, "unload_context": 144, "unload_graph": 145, "__init__": 146, "as_op_def": 147, "eval": 148, "signatur": 151, "get_default_sess": 153, "graphlearn": 154, "has_default_sess": 156, "set_opt": 158, "encod": [159, 167], "loss": 159, "weight": 160, "maxcomput": 160, "describ": 161, "topologi": 161, "stand": 161, "alon": 161, "mode": [161, 331], "server": [161, 331], "pip": 166, "tensorflow": 166, "git": 166, "clone": 169, "regist": [169, 170], "bytestreamaccessfil": 170, "structuredaccessfil": 170, "writablefil": 170, "scheme": 170, "gl": 171, "self": 177, "loop": 177, "freez": [177, 189], "add_cycl": 178, "add_path": 179, "add_star": 180, "all_neighbor": 181, "common_neighbor": 182, "create_empty_copi": 183, "degree_histogram": 185, "densiti": 186, "induced_subgraph": 190, "info": 191, "is_direct": 192, "is_empti": 193, "is_frozen": 194, "is_negatively_weight": 195, "is_weight": 196, "nodes_with_selfloop": 199, "non_edg": 200, "non_neighbor": 201, "number_of_edg": 202, "number_of_nod": 203, "number_of_selfloop": 204, "selfloop_edg": 205, "atla": [209, 210, 310], "graph_atla": 209, "graph_atlas_g": 210, "classic": [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 310], "balanced_tre": 211, "barbell_graph": 212, "binomial_tre": 213, "circulant_graph": 214, "circular_ladder_graph": 215, "complete_graph": 216, "complete_multipartite_graph": 217, "cycle_graph": 218, "dorogovtsev_goltsev_mendes_graph": 219, "empty_graph": 220, "full_rary_tre": 221, "ladder_graph": 222, "lollipop_graph": 223, "null_graph": 224, "path_graph": 225, "star_graph": 226, "trivial_graph": 227, "turan_graph": 228, "wheel_graph": 229, "lfr_benchmark_graph": 230, "caveman_graph": 231, "connected_caveman_graph": 232, "gaussian_random_partition_graph": 233, "planted_partition_graph": 234, "random_partition_graph": 235, "relaxed_caveman_graph": 236, "ring_of_cliqu": 237, "stochastic_block_model": 238, "windmill_graph": 239, "degree_seq": [240, 241, 242, 243, 244, 245, 246], "configuration_model": 240, "degree_sequence_tre": 241, "directed_configuration_model": 242, "directed_havel_hakimi_graph": 243, "expected_degree_graph": 244, "havel_hakimi_graph": 245, "random_degree_sequence_graph": 246, "gn_graph": 247, "gnc_graph": 248, "gnr_graph": 249, "random_k_out_graph": 250, "scale_free_graph": 251, "duplic": [252, 253, 310], "duplication_divergence_graph": 252, "partial_duplication_graph": 253, "ego": [254, 310], "ego_graph": 254, "chordal_cycle_graph": 255, "margulis_gabber_galil_graph": 256, "paley_graph": 257, "geometr": [258, 259, 260, 261, 262, 310], "geographical_threshold_graph": 258, "random_geometric_graph": 259, "soft_random_geometric_graph": 260, "thresholded_random_geometric_graph": 261, "waxman_graph": 262, "harary_graph": [263, 264], "hkn_harary_graph": 263, "hnm_harary_graph": 264, "intersect": [265, 266, 267, 310], "general_random_intersection_graph": 265, "k_random_intersection_graph": 266, "uniform_random_intersection_graph": 267, "joint_degree_seq": [268, 269, 270, 271], "directed_joint_degree_graph": 268, "is_valid_directed_joint_degre": 269, "is_valid_joint_degre": 270, "joint_degree_graph": 271, "mycielski": [272, 273, 310], "mycielski_graph": 272, "mycielskian": 273, "nonisomorphic_tre": [274, 275], "number_of_nonisomorphic_tre": 275, "small": [276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 310], "lcf_graph": 276, "bull_graph": 277, "chvatal_graph": 278, "cubical_graph": 279, "desargues_graph": 280, "diamond_graph": 281, "dodecahedral_graph": 282, "frucht_graph": 283, "heawood_graph": 284, "house_graph": 285, "house_x_graph": 286, "icosahedral_graph": 287, "krackhardt_kite_graph": 288, "make_small_graph": 289, "moebius_kantor_graph": 290, "octahedral_graph": 291, "pappus_graph": 292, "petersen_graph": 293, "sedgewick_maze_graph": 294, "tetrahedral_graph": 295, "truncated_cube_graph": 296, "truncated_tetrahedron_graph": 297, "tutte_graph": 298, "social": [299, 300, 301, 302, 310], "davis_southern_women_graph": 299, "florentine_families_graph": 300, "karate_club_graph": 301, "les_miserables_graph": 302, "spectral_graph_forg": 303, "sudoku": [304, 310], "sudoku_graph": 304, "tree": [305, 306, 310], "prefix_tre": 305, "random_tre": 306, "triad": [307, 310], "triad_graph": 307, "internet_as_graph": 308, "random_internet_as_graph": 308, "stochast": [309, 310], "stochastic_graph": 309, "diverg": 310, "sequenc": 310, "AS": 310, "spectral": 310, "non": 310, "isomorph": 310, "joint": 310, "harari": 310, "digraph": 311, "read": 313, "list": [313, 323], "adjac": 313, "selector": 317, "tensorcontext": 317, "vertexdatacontext": 317, "labeledvertexdatacontext": 317, "vertexpropertycontext": 317, "labeledvertexpropertycontext": 317, "method": 317, "dimension": 317, "rang": 317, "resourc": 319, "bridg": 320, "gap": 320, "oltp": 320, "inform": 322, "archiv": 322, "predefin": 323, "macro": 323, "partit": [323, 324, 327], "strategi": 323, "guidelin": 323, "handler": 323, "iter": 323, "master": 323, "mirror": 323, "complet": 323, "natur": 323, "trait": 323, "known": 324, "artifacthub": 324, "directori": 324, "common": 324, "modifi": 324, "j": 324, "realtim": 324, "secondari": 324, "trace": 324, "In": 325, "immut": 325, "bind": 326, "repartit": 327, "fennel": 327, "xtrapulp": 327, "hybrid": 327, "error": 330, "line": 331, "gsctl": 331, "scope": 331, "monitor": 333, "\u56fe\u5206\u6790\u5f15\u64ce": 334, "\u5185\u7f6e\u7b97\u6cd5": 334, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 334, "\u4f7f\u7528": 334, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 334, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 334, "\u4e2d\u7684\u51fd\u6570": 334, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 334, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 334, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 334, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 334, "\u90e8\u7f72": 335, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 335, "\u5728aw": 335, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 335, "\u672c\u5730\u90e8\u7f72graphscop": 335, "\u5f00\u53d1\u8005\u6307\u5357": 336, "\u57fa\u4e8e": [336, 341], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 336, "\u6784\u5efa": 336, "\u4ee3\u7801\u98ce\u683c": 336, "\u5e38\u89c1\u95ee\u9898": 337, "\u5feb\u901f\u4e0a\u624b": 338, "\u793a\u4f8b": 338, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 338, "\u521b\u5efa\u4f1a\u8bdd": 338, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 338, "\u56fe\u5206\u6790": 338, "\u56fe\u795e\u7ecf\u7f51\u7edc": 338, "\u5173\u95ed\u4f1a\u8bdd": 338, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 339, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 339, "\u6295\u5f71": 339, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 339, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 339, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 340, "\u76ee\u5f55": [340, 345], "\u53c2\u8003": 340, "\u7d22\u5f15": 340, "\u5b89\u88c5": 341, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 341, "\u5ba2\u6237\u7aef": 341, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 342, "\u5229\u7528python": 342, "\u8fde\u63a5graphscop": 342, "\u5229\u7528java": 342, "\u5f00\u53d1\u63a7\u5236\u53f0": 342, "gremlin\u7f16\u7a0b\u5165\u95e8": 342, "101": 342, "\u56fe\u6570\u636e\u6a21\u578b": 342, "\u67e5\u8be2\u8bed\u8a00": 342, "\u4e00\u4e2a\u4f8b\u5b50": 342, "gremlin\u517c\u5bb9\u6027": 342, "\u5bf9\u6bd4tinkerpop": 342, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 342, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 342, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 342, "\u5df2\u77e5\u9650\u5236": 342, "\u56fe\u5b66\u4e60\u5f15\u64ce": 343, "\u56fe\u5b66\u4e60\u6a21\u578b": 343, "\u6570\u636e\u6a21\u578b": 343, "\u7f16\u7801\u5668": 343, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 343, "\u91c7\u6837": 343, "\u56fe\u6570\u636e\u6d41": 343, "\u6a21\u578b": 343, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 343, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 344, "\u624b\u52a8\u914d\u7f6e\u56fe": 344, "vid_field": 344, "src_label": 344, "dst_label": 344, "src_field": 344, "dst_field": 344, "\u9ad8\u7ea7\u7528\u6cd5": 344, "\u6ca1\u6709\u6b67\u4e49\u65f6": 344, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 344, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 344, "\u591a\u79cd\u8fb9\u5173\u7cfb": 344, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 344, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 344, "\u5b8c\u6574\u7684\u793a\u4f8b": 344, "\u4ece": 344, "\u6216": 344, "\u4e2d\u8f7d\u56fe": 344, "\u7684\u53d8\u79cd": 344, "\u5165\u95e8\u6559\u7a0b": 345}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [53, "prerequisites"], [65, "prerequisites"], [324, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [67, "dev-and-test"], [83, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [91, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [54, "overview"], [56, "overview"], [64, null], [167, "overview"], [324, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [51, "getting-started"], [68, "getting-started"], [84, "getting-started"], [92, "getting-started"], [321, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [53, "installation"], [68, "installation"], [84, "installation"], [324, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [68, "whats-the-next"], [84, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [75, "guide-and-examples"], [86, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with GitHub Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Get from Maven Central Repository": [[17, "get-from-maven-central-repository"]], "Build from source": [[17, "build-from-source"], [166, "build-from-source"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with GitHub Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetworkX APIs": [[19, "tutorial-graph-algorithms-with-networkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetworkX APIs": [[20, "tutorial-graph-operations-with-networkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [90, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on GitHub": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [41, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Design of GAE": [[34, "design-of-gae"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [41, "dev-environment"], [67, "dev-environment"], [83, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [83, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [41, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [310, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to instrument": [[39, "how-to-instrument"]], "Java": [[39, "java"], [324, "java"], [324, "id2"]], "Automatic instrument": [[39, "automatic-instrument"]], "How to Submit Pull-requests": [[40, "how-to-submit-pull-requests"]], "How to Test": [[41, "how-to-test"], [83, "how-to-test"]], "Test GraphScope on local": [[41, "test-graphscope-on-local"]], "Run tests": [[41, "run-tests"], [41, "id1"]], "Test GraphScope on Kubernetes cluster": [[41, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[41, "build-images"]], "Engine Configuration": [[42, "engine-configuration"]], "Customizing Your Service Configuration": [[42, "customizing-your-service-configuration"]], "Sample Configuration": [[42, "sample-configuration"]], "Available Configurations": [[42, "available-configurations"]], "Service configurations": [[42, "service-configurations"]], "Using Custom Graph": [[43, "using-custom-graph"]], "Step 1: Create a New Graph": [[43, "step-1-create-a-new-graph"]], "Step 2: Import Graph Data": [[43, "step-2-import-graph-data"]], "Step 3: Start the Service with the New Graph": [[43, "step-3-start-the-service-with-the-new-graph"]], "Try other graphs": [[43, "try-other-graphs"]], "Data Import Configuration": [[44, "data-import-configuration"]], "Supported data source": [[44, "supported-data-source"]], "Sample Configuration for loading \u201cModern\u201d Graph from csv files": [[44, "sample-configuration-for-loading-modern-graph-from-csv-files"]], "Sample configuration for loading \u201cModern Graph\u201d from odps tables": [[44, "sample-configuration-for-loading-modern-graph-from-odps-tables"]], "Configuration Breakdown": [[44, "configuration-breakdown"]], "Loading Configurations": [[44, "loading-configurations"]], "Vertex Mappings": [[44, "vertex-mappings"]], "Edge Mappings": [[44, "edge-mappings"]], "Data Model": [[45, "data-model"]], "Graph Data": [[45, "graph-data"]], "Entity Data": [[45, "entity-data"]], "Primitive Types": [[45, "primitive-types"]], "Array Types": [[45, "array-types"]], "GraphScope Interactive Deployment": [[46, "graphscope-interactive-deployment"]], "Deploy with docker": [[46, "deploy-with-docker"]], "Deploy with helm": [[46, "deploy-with-helm"]], "QuickStart": [[46, "quickstart"]], "Customizing Configuration": [[46, "customizing-configuration"]], "Customize Graph Data.": [[46, "customize-graph-data"]], "Single Node": [[46, "single-node"]], "Multiple nodes": [[46, "multiple-nodes"]], "Customize Values.yaml": [[46, "customize-values-yaml"]], "GraphScope Interactive Development guide": [[47, "graphscope-interactive-development-guide"]], "GraphScope Interactive Admin Service Documentation": [[48, "graphscope-interactive-admin-service-documentation"]], "Introduction": [[48, "introduction"], [76, "introduction"]], "API Overview": [[48, "api-overview"]], "Detailed API Documentation": [[48, "detailed-api-documentation"]], "ListGraphs API (GraphManagement Category)": [[48, "listgraphs-api-graphmanagement-category"]], "Description": [[48, "description"], [48, "id1"], [48, "id6"], [48, "id11"], [48, "id16"], [48, "id21"], [48, "id26"], [48, "id31"], [48, "id36"], [48, "id41"], [48, "id46"], [48, "id51"], [48, "id55"]], "HTTP Request": [[48, "http-request"], [48, "id2"], [48, "id7"], [48, "id12"], [48, "id17"], [48, "id22"], [48, "id27"], [48, "id32"], [48, "id37"], [48, "id42"], [48, "id47"], [48, "id52"], [48, "id56"]], "Curl Command Example": [[48, "curl-command-example"], [48, "id3"], [48, "id8"], [48, "id13"], [48, "id18"], [48, "id23"], [48, "id28"], [48, "id33"], [48, "id38"], [48, "id43"], [48, "id48"], [48, "id57"]], "Expected Response": [[48, "expected-response"], [48, "id4"], [48, "id9"], [48, "id14"], [48, "id19"], [48, "id24"], [48, "id29"], [48, "id34"], [48, "id39"], [48, "id44"], [48, "id49"], [48, "id53"], [48, "id58"]], "Status Codes": [[48, "status-codes"], [48, "id5"], [48, "id10"], [48, "id15"], [48, "id20"], [48, "id25"], [48, "id30"], [48, "id35"], [48, "id40"], [48, "id45"], [48, "id50"], [48, "id54"], [48, "id59"]], "CreateGraph (GraphManagement Category)": [[48, "creategraph-graphmanagement-category"]], "DeleteGraph  (GraphManagement Category)": [[48, "deletegraph-graphmanagement-category"]], "GetGraphSchema  (GraphManagement Category)": [[48, "getgraphschema-graphmanagement-category"]], "ImportGraph  (GraphManagement Category)": [[48, "importgraph-graphmanagement-category"]], "CreateProcedure (ProcedureManagement Category)": [[48, "createprocedure-proceduremanagement-category"]], "ListAllProcedure  (ProcedureManagement Category)": [[48, "listallprocedure-proceduremanagement-category"]], "GetProcedure (ProcedureManagement Category)": [[48, "getprocedure-proceduremanagement-category"]], "UpdateProcedure (ProcedureManagement Category)": [[48, "updateprocedure-proceduremanagement-category"]], "DeleteProcedure (ProcedureManagement Category)": [[48, "deleteprocedure-proceduremanagement-category"]], "StartService (ServiceManagement Category)": [[48, "startservice-servicemanagement-category"]], "ServiceStatus": [[48, "servicestatus"]], "SystemMetrics (NodeMetrics Category)": [[48, "systemmetrics-nodemetrics-category"]], "Enable AdminService in development": [[48, "enable-adminservice-in-development"]], "Start Compiler Service": [[48, "start-compiler-service"]], "Create c++ Stored Procedures on GraphScope Interactive": [[49, "create-c-stored-procedures-on-graphscope-interactive"]], "Turning Cypher Queries into Stored Procedures with GraphScope Interactive": [[50, "turning-cypher-queries-into-stored-procedures-with-graphscope-interactive"]], "Crafting a Cypher Stored Procedure": [[50, "crafting-a-cypher-stored-procedure"]], "Compiling and Enabling the Stored Procedure": [[50, "compiling-and-enabling-the-stored-procedure"]], "Invoking the Cypher Stored Procedure": [[50, "invoking-the-cypher-stored-procedure"]], "Preparation": [[51, "preparation"]], "Manage Interactive Service": [[51, "manage-interactive-service"]], "Initialize the Service": [[51, "initialize-the-service"]], "Start the Service": [[51, "start-the-service"]], "Stop the Service": [[51, "stop-the-service"]], "Restart the Service": [[51, "restart-the-service"]], "Check Service Status": [[51, "check-service-status"]], "Destroy the Service": [[51, "destroy-the-service"]], "Running Cypher Queries": [[51, "running-cypher-queries"]], "Running Gremlin Queries": [[51, "running-gremlin-queries"]], "Glossary": [[52, "glossary"], [93, "glossary"]], "Stored Procedure.": [[52, "stored-procedure"]], "Cypher.": [[52, "cypher"]], "Gremlin": [[52, "gremlin"]], "Compile.": [[52, "compile"]], "Install Interactive": [[53, "install-interactive"]], "A Solid Foundation": [[54, "a-solid-foundation"]], "Key Features": [[54, "key-features"], [81, "key-features"]], "Property Graph Model and Graph Queries": [[54, "property-graph-model-and-graph-queries"]], "The Cypher Query Language": [[54, "the-cypher-query-language"]], "The Gremlin Query Language": [[54, "the-gremlin-query-language"]], "Limitations": [[54, "limitations"], [76, "limitations"]], "Stored Procedures": [[55, "stored-procedures"]], "Compiling a Stored Procedure": [[55, "compiling-a-stored-procedure"]], "Enabling Stored Procedures": [[55, "enabling-stored-procedures"]], "Disabling Stored Procedures": [[55, "disabling-stored-procedures"]], "Viewing Enabled Stored Procedures": [[55, "viewing-enabled-stored-procedures"]], "Querying Stored Procedures": [[55, "querying-stored-procedures"]], "The Administrative tool": [[56, "the-administrative-tool"]], "Detailed Usage": [[56, "detailed-usage"]], "Root Commands": [[56, "root-commands"]], "Service Commands": [[56, "service-commands"]], "Database Commands": [[56, "database-commands"]], "Procedure Commands": [[56, "procedure-commands"]], "GraphScope Interactive": [[57, "graphscope-interactive"]], "Introduction to ArrowFragment": [[58, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[58, "id1"]], "1. \u8f7d\u56fe": [[58, "id2"]], "1.1 \u521d\u59cb\u5316partitioner": [[58, "partitioner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[58, "arrow-table"]], "1.3. Shuffle vtable": [[58, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[58, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[58, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[58, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[58, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[58, "id3"]], "2. \u8bbf\u95eeFragment": [[58, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[58, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[58, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[58, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[58, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[58, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[58, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[58, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[58, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[58, "id13"]], "Frequently Asked Questions": [[59, "frequently-asked-questions"]], "Getting Started for GLE": [[60, "getting-started-for-gle"]], "Graph Workloads": [[61, "graph-workloads"]], "Graph Analytics": [[61, "graph-analytics"]], "Graph Interactive Query": [[61, "graph-interactive-query"]], "Graph Learning": [[61, "graph-learning"], [175, "graph-learning"]], "GraphScope for Data Scientists": [[62, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[62, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[62, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[62, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[62, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[63, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[64, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[64, null]], "GraphScope Flex": [[64, null]], "Graph Analytical Engine": [[64, null], [99, "graph-analytical-engine"]], "Graph Interactive Engine": [[64, null], [99, "graph-interactive-engine"]], "Graph Learning Engine": [[64, null]], "Storage Engine": [[64, null]], "Troubleshooting & Utilities": [[64, null]], "Development": [[64, null]], "Reference": [[64, null], [323, "reference"]], "Indices and tables": [[64, "indices-and-tables"]], "Standalone Deployment for GIE": [[65, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[65, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[65, "remove-the-gie-service"]], "Using Your Own Data": [[65, "using-your-own-data"]], "Deploy on a Cluster": [[65, "deploy-on-a-cluster"]], "Other Useful Configurations": [[65, "other-useful-configurations"]], "Design of GIE": [[66, "design-of-gie"]], "The Motivations": [[66, "the-motivations"]], "The Architecture": [[66, "the-architecture"]], "Query Processing": [[66, "query-processing"]], "Build GIE with Vineyard Store on Local": [[67, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[67, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[67, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[68, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[68, "customize-configurations-for-gie-instance"]], "GIE for Cypher": [[69, "gie-for-cypher"]], "Connecting via Python Driver": [[69, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[69, "connecting-via-cypher-shell"]], "Using LLM as an Assistant in GIE": [[70, "using-llm-as-an-assistant-in-gie"]], "0. Environment": [[70, "environment"]], "1. Download Datasets": [[70, "download-datasets"]], "2. Load the Graph": [[70, "load-the-graph"]], "3. Set Endpoint and API Key": [[70, "set-endpoint-and-api-key"]], "4. Generate Graph Query Sentence from Questions": [[70, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[70, "execute-generated-query-sentence-with-gie"]], "Cypher Support": [[71, "cypher-support"]], "Data Types": [[71, "data-types"]], "Property Types": [[71, "property-types"]], "Structural types": [[71, "structural-types"]], "Constructed Types": [[71, "constructed-types"]], "Operators": [[71, "operators"]], "Clause": [[71, "clause"]], "Neo4j Ecosystem": [[72, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[72, null], [79, null]], "A Generic Graph Optimizer for GIE": [[73, "a-generic-graph-optimizer-for-gie"]], "Rule-based Optimizer (RBO)": [[73, "rule-based-optimizer-rbo"]], "FilterMatchRule": [[73, "filtermatchrule"]], "DegreeFusionRule": [[73, "degreefusionrule"]], "NotMatchToAntiJoinRule": [[73, "notmatchtoantijoinrule"]], "FieldTrimRule": [[73, "fieldtrimrule"]], "Cost-based Optimizer (CBO)": [[73, "cost-based-optimizer-cbo"]], "Graph Type Inference": [[73, "graph-type-inference"]], "FAQs for GIE Gremlin Usage": [[74, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[74, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[74, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[74, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[74, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[74, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[74, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[74, "group-by-multiple-keys"]], "group by multiple values:": [[74, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[74, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[74, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[74, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[76, "supported-gremlin-steps"]], "Standard Steps": [[76, "standard-steps"]], "Source": [[76, "source"]], "V()": [[76, "v"]], "E()": [[76, "e"]], "Expand": [[76, "expand"]], "outE()": [[76, "oute"]], "inE()": [[76, "ine"]], "bothE()": [[76, "bothe"]], "out()": [[76, "out"], [76, "id7"]], "in()": [[76, "in"], [76, "id8"]], "both()": [[76, "both"], [76, "id9"]], "outV()": [[76, "outv"]], "inV()": [[76, "inv"]], "otherV()": [[76, "otherv"]], "bothV()": [[76, "bothv"]], "Filter": [[76, "filter"]], "hasId()": [[76, "hasid"], [78, "hasid"]], "hasLabel()": [[76, "haslabel"]], "has()": [[76, "has"]], "hasNot()": [[76, "hasnot"]], "is()": [[76, "is"]], "where(traversal)": [[76, "where-traversal"]], "where(predicate)": [[76, "where-predicate"]], "not(traversal)": [[76, "not-traversal"]], "dedup()": [[76, "dedup"], [78, "dedup"]], "Project": [[76, "project"]], "id()": [[76, "id"]], "label()": [[76, "label"]], "constant()": [[76, "constant"], [78, "constant"]], "valueMap()": [[76, "valuemap"], [78, "valuemap"]], "values()": [[76, "values"]], "elementMap()": [[76, "elementmap"]], "select()": [[76, "select"], [78, "select"]], "Aggregate": [[76, "aggregate"]], "count()": [[76, "count"]], "fold()": [[76, "fold"], [78, "fold"]], "sum()": [[76, "sum"]], "min()": [[76, "min"]], "max()": [[76, "max"]], "mean()": [[76, "mean"]], "group()": [[76, "group"], [78, "group"]], "groupCount()": [[76, "groupcount"], [78, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[76, "order"]], "order()": [[76, "id1"]], "Statistics": [[76, "statistics"]], "limit()": [[76, "limit"]], "coin()": [[76, "coin"]], "sample()": [[76, "sample"]], "Union": [[76, "union"]], "union()": [[76, "id2"]], "Match": [[76, "match"]], "match()": [[76, "id3"]], "Subgraph": [[76, "subgraph"]], "subgraph()": [[76, "id4"]], "Identity": [[76, "identity"]], "identity()": [[76, "id5"]], "Unfold": [[76, "unfold"]], "unfold()": [[76, "id6"], [76, "id10"]], "Syntactic Sugars": [[76, "syntactic-sugars"]], "PathExpand": [[76, "pathexpand"]], "endV()": [[76, "endv"]], "Expression": [[76, "expression"]], "Running Examples": [[76, "running-examples"]], "Aggregate (Group)": [[76, "aggregate-group"]], "To be Supported": [[76, "to-be-supported"]], "path()": [[76, "path"]], "local()": [[76, "local"]], "Will Not be Supported": [[76, "will-not-be-supported"]], "repeat()": [[76, "repeat"]], "properties()": [[76, "properties"]], "sideEffect": [[76, "sideeffect"]], "branch": [[76, "branch"]], "GIE for Gremlin": [[77, "gie-for-gremlin"]], "Connecting via Python SDK": [[77, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[77, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[77, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[78, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[78, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[78, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[78, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[78, "apply-some-filters"]], "Extract Property Values": [[78, "extract-property-values"]], "Real Applications": [[78, "real-applications"], [78, "id1"]], "Basic Traversal Query": [[78, "basic-traversal-query"]], "Expansion": [[78, "expansion"]], "out(), in() and both()": [[78, "out-in-and-both"]], "outE(), inE() and bothE()": [[78, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[78, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[78, "multiple-expansion-steps"]], "Expansion from many starting points": [[78, "expansion-from-many-starting-points"]], "Filter & Expansion": [[78, "filter-expansion"]], "Apply filters after expansion": [[78, "apply-filters-after-expansion"]], "Expansion as filters": [[78, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[78, "path-expansion-syntactic-sugar"]], "Pattern Match": [[78, "pattern-match"]], "Relational Operations": [[78, "relational-operations"]], "Filter Steps": [[78, "filter-steps"]], "where()": [[78, "where"]], "Project Steps": [[78, "project-steps"]], "id() and label()": [[78, "id-and-label"]], "Aggregate Steps": [[78, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[78, "sum-min-max-and-mean"]], "Order Step": [[78, "order-step"]], "Limit Step": [[78, "limit-step"]], "Expression(Syntax Sugar)": [[78, "expression-syntax-sugar"]], "Complex Queries": [[78, "complex-queries"]], "LDBC BI2": [[78, "ldbc-bi2"]], "LDBC BI3": [[78, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[78, "ldbc-bi4-left-part"]], "LDBC BI11": [[78, "ldbc-bi11"]], "LDBC BI14": [[78, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[79, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[80, "tutorials-for-java-users"]], "Ease-of-use: Python Interface": [[81, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[81, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[81, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[81, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[81, "gnn-training-inference"]], "Cloud Native Design": [[81, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[81, "across-engine-workflow-orchestration"]], "Design of GLE": [[82, "design-of-gle"]], "Model Paradigms": [[82, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[82, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[82, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[82, "pipeline-for-learning"]], "Dev on docker container": [[83, "dev-on-docker-container"]], "Build Learning Engine": [[83, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[84, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[85, "graph-sampling"], [163, "graph-sampling"]], "Graph Traversal": [[85, "graph-traversal"], [95, "graph-traversal"], [164, "graph-traversal"]], "Neighborhood Sampling": [[85, "neighborhood-sampling"]], "Subgraph Sampling": [[85, "subgraph-sampling"], [96, "subgraph-sampling"]], "Negative Sampling": [[85, "negative-sampling"], [168, "negative-sampling"]], "GSL": [[85, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[87, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[87, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[87, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[88, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[88, "load-graph"], [89, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[88, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[88, "launch-the-learning-engine"], [89, "launch-the-learning-engine"]], "Train the Model": [[88, "train-the-model"]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[89, "tutorial-training-a-node-classification-model-pyg-on-your-local-machine"]], "Define the evaluation function": [[89, "define-the-evaluation-function"]], "Create neighbor loaderfor training, testing and validation": [[89, "create-neighbor-loaderfor-training-testing-and-validation"]], "Define the PyG GraphSage Model and optimizer": [[89, "define-the-pyg-graphsage-model-and-optimizer"]], "Train and test": [[89, "train-and-test"]], "Loading Graphs": [[90, "loading-graphs"]], "Load Built-in Datasets": [[90, "load-built-in-datasets"]], "Loading Your Own Datasets": [[90, "loading-your-own-datasets"]], "Adding Vertices": [[90, "adding-vertices"]], "Advanced Usages": [[90, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[90, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[90, "deduce-vertex-from-edges"]], "Multiple relations": [[90, "multiple-relations"]], "Specify data types of properties manually": [[90, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[90, "other-parameters-of-graph"]], "Putting them Together": [[90, "putting-them-together"]], "Loading From Pandas or Numpy": [[90, "loading-from-pandas-or-numpy"]], "From Pandas": [[90, "from-pandas"]], "From Numpy": [[90, "from-numpy"]], "Loader Variants": [[90, "loader-variants"]], "Techniques targeting at large graph": [[90, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[90, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[91, "design-of-graphscope"]], "Unified Graph Computing Platform": [[91, "unified-graph-computing-platform"]], "Application layer": [[91, "application-layer"]], "Execution engine layer": [[91, "execution-engine-layer"]], "Storage layer": [[91, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[91, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[91, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[91, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[91, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[91, "graphscope-for-learning"]], "One-stop Graph Processing": [[92, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[92, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[92, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[92, "graph-learning-quick-start"]], "FLASH": [[93, "flash"]], "GRAPE": [[93, "grape"]], "GAE": [[93, "gae"]], "GART": [[93, "gart"]], "GRIN": [[93, "grin"]], "GraphAr": [[93, "graphar"]], "Groot": [[93, "groot"]], "GUM": [[93, "gum"]], "MaxGraph (deprecated)": [[93, "maxgraph-deprecated"]], "Vineyard, or v6d": [[93, "vineyard-or-v6d"]], "GIE": [[93, "gie"]], "GAIA": [[93, "gaia"]], "Pegasus": [[93, "pegasus"]], "Ingress": [[93, "ingress"]], "PIE-model": [[93, "pie-model"]], "Graph Analytics Workloads": [[94, "graph-analytics-workloads"]], "What is Graph Analytics": [[94, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[94, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[94, "what-can-graphscope-do"], [96, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[95, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[95, "tinkerpop-and-gremlin"]], "Pattern Matching": [[95, "pattern-matching"], [95, "id1"]], "Neo4j and Cypher": [[95, "neo4j-and-cypher"]], "Graph Learning Workloads": [[96, "graph-learning-workloads"]], "What is Graph Neural Network": [[96, "what-is-graph-neural-network"]], "Typical GNN Models": [[96, "typical-gnn-models"]], "Paradigm of Model Training": [[96, "paradigm-of-model-training"]], "Steps of Model Training": [[96, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[96, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[97, "introducing-graphscope"]], "What is GraphScope": [[97, "what-is-graphscope"]], "Why use GraphScope": [[97, "why-use-graphscope"]], "What are the Use Cases": [[97, "what-are-the-use-cases"]], "What are the Limitations": [[97, "what-are-the-limitations"]], "What are the Next": [[97, "what-are-the-next"]], "Positioning of GraphScope": [[98, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[98, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[98, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[98, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[98, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[99, "performance-and-benchmark"]], "Results": [[99, "results"]], "Performance on GPUs": [[99, "performance-on-gpus"]], "Reproducing the results": [[99, "reproducing-the-results"]], "Tutorials for Python Users": [[100, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[101, "analytical-engine-api-reference"]], "Analytical Engine": [[101, "analytical-engine"]], "Fragments in GraphScope": [[101, "fragments-in-graphscope"]], "Analytical Apps": [[101, "analytical-apps"]], "Analytical Workers": [[101, "analytical-workers"]], "App\u2019s Context": [[101, "app-s-context"]], "Analytical App": [[102, "analytical-app"]], "AppAssets": [[102, "appassets"]], "JavaApp": [[102, "javaapp"]], "App object": [[102, "app-object"]], "Functions": [[102, "functions"], [104, "functions"], [177, "functions"]], "BuiltIn apps": [[102, "builtin-apps"]], "Context": [[103, "context"]], "Context object": [[103, "context-object"]], "Cython SDK API": [[104, "cython-sdk-api"]], "Pregel": [[104, "pregel"]], "PIE": [[104, "pie"]], "GraphScope types": [[104, "graphscope-types"]], "Flex API Reference": [[105, "flex-api-reference"]], "About Grape JDK": [[106, "about-grape-jdk"]], "Project Structure": [[106, "project-structure"]], "Building from source": [[106, "building-from-source"]], "Java Reference (javadoc)": [[107, "java-reference-javadoc"]], "graphscope.Vertex": [[108, "graphscope-vertex"]], "graphscope.declare": [[109, "graphscope-declare"]], "graphscope.framework.app.load_app": [[110, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[111, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[112, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[113, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[114, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[115, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[116, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[117, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[118, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[119, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[120, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[121, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[122, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[123, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[124, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[125, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[126, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[127, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[128, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[129, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[130, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[131, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[132, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[133, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[134, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[135, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[136, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[137, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[138, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[139, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[140, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[141, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[142, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[143, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[144, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[145, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[146, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[147, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[148, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[149, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[150, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[151, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[152, "graphscope-g"]], "graphscope.get_default_session": [[153, "graphscope-get-default-session"]], "graphscope.graphlearn": [[154, "graphscope-graphlearn"]], "graphscope.gremlin": [[155, "graphscope-gremlin"]], "graphscope.has_default_session": [[156, "graphscope-has-default-session"]], "graphscope.session": [[157, "graphscope-session"]], "graphscope.set_option": [[158, "graphscope-set-option"]], "Developing Your Own Model": [[159, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[159, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[159, "sampling"]], "Encoder": [[159, "encoder"], [167, "encoder"]], "Loss Function and Training Process": [[159, "loss-function-and-training-process"]], "Data Source": [[160, "data-source"]], "1 Data format": [[160, "data-format"]], "1.1 Basic format": [[160, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[160, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[160, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[160, "label-format-labeled"]], "1.5 Putting together": [[160, "putting-together"]], "2 Data source type": [[160, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[160, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[160, "user-api"]], "Graph Object": [[161, "graph-object"]], "2 Describe the Topology": [[161, "describe-the-topology"]], "3.1 Stand-alone Mode": [[161, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[161, "distributed-mode-client-server-mode"]], "Graph Query": [[162, "graph-query"]], "1 Introduction": [[163, "introduction"]], "Graph Sampling Language\uff08GSL)": [[165, "graph-sampling-language-gsl"]], "Install from pip": [[166, "install-from-pip"]], "Get wheel package": [[166, "get-wheel-package"]], "Install using pip": [[166, "install-using-pip"]], "Install TensorFlow": [[166, "install-tensorflow"]], "Install git": [[166, "install-git"]], "Install dependent libraries": [[166, "install-dependent-libraries"]], "Compile": [[166, "compile"], [169, "compile"]], "Install": [[166, "install"]], "Run test": [[166, "run-test"]], "Docker image": [[166, "docker-image"]], "Graph Learning Model": [[167, "graph-learning-model"]], "Data model": [[167, "data-model"]], "Defining Your Own Operator": [[169, "defining-your-own-operator"]], "Programming Interface": [[169, "programming-interface"]], "Distributed Runtime Design": [[169, "distributed-runtime-design"]], "Implement a New Operator": [[169, "implement-a-new-operator"]], "Clone source code": [[169, "clone-source-code"]], "Implement your operator class": [[169, "implement-your-operator-class"]], "Register Operator": [[169, "register-operator"]], "How to Use an Operator": [[169, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[170, "integrating-other-data-sources"]], "File System Interface": [[170, "file-system-interface"]], "ByteStreamAccessFile": [[170, "bytestreamaccessfile"]], "StructuredAccessFile": [[170, "structuredaccessfile"]], "WritableFile": [[170, "writablefile"]], "Register with Scheme": [[170, "register-with-scheme"]], "Quick Start": [[171, "quick-start"]], "1 Trying out the built-in models": [[171, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[171, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[171, "developing-a-gnn-model"]], "3.1 Data Preparation": [[171, "data-preparation"]], "3.2 Graph Construction": [[171, "graph-construction"]], "3.3 Graph Sampling": [[171, "graph-sampling"]], "3.4 GNN Model": [[171, "gnn-model"]], "System configuration": [[172, "system-configuration"]], "Graph": [[173, "graph"], [177, "graph"], [311, "graph"]], "Graph object": [[173, "graph-object"]], "Loader object": [[173, "loader-object"]], "Graph Functions": [[173, "graph-functions"]], "Interactive Query": [[174, "interactive-query"]], "Builtin algorithms": [[176, "builtin-algorithms"]], "Nodes": [[177, "nodes"]], "Edges": [[177, "edges"]], "Self loops": [[177, "self-loops"]], "Attributes": [[177, "attributes"]], "Freezing graph structure": [[177, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[178, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[179, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[180, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[181, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[182, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[183, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[184, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[185, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[186, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[187, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[188, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[189, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[190, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[191, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[192, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[193, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[194, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[195, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[196, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[197, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[198, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[199, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[200, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[201, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[202, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[203, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[204, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[205, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[206, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[207, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[208, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[209, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[210, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[211, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[212, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[213, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[214, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[215, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[216, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[217, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[218, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[219, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[220, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[221, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[222, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[223, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[224, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[225, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[226, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[227, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[228, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[229, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[230, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[231, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[232, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[233, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[234, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[235, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[236, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[237, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[238, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[239, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[240, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[241, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[242, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[243, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[244, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[245, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[246, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[247, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[248, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[249, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[250, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[251, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[252, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[253, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[254, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[255, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[256, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[257, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[258, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[259, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[260, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[261, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[262, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[263, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[264, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[265, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[266, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[267, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[268, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[269, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[270, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[271, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[272, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[273, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[274, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[275, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[276, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[277, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[278, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[279, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[280, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[281, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[282, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[283, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[284, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[285, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[286, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[287, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[288, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[289, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[290, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[291, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[292, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[293, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[294, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[295, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[296, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[297, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[298, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[299, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[300, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[301, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[302, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[303, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[304, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[305, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[306, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[307, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[308, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[309, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[310, "graph-generators"]], "Atlas": [[310, "module-graphscope.nx.generators.atlas"]], "Classic": [[310, "module-graphscope.nx.generators.classic"]], "Expanders": [[310, "module-graphscope.nx.generators.expanders"]], "Small": [[310, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[310, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[310, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[310, "module-graphscope.nx.generators.directed"]], "Geometric": [[310, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[310, "module-graphscope.nx.generators.ego"]], "Stochastic": [[310, "module-networkx.generators.stochastic"]], "AS graph": [[310, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[310, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[310, "module-graphscope.nx.generators.social"]], "Spectral": [[310, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[310, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[310, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[310, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[310, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[310, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[310, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[310, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[311, "graph-types"]], "DiGraph": [[311, "digraph"]], "NetworkX-style API": [[312, "networkx-style-api"]], "Reading graphs": [[313, "reading-graphs"]], "Edge List": [[313, "edge-list"]], "Adjacency List": [[313, "adjacency-list"]], "Graph Transformation": [[314, "graph-transformation"]], "Operation": [[315, "operation"]], "Operation object": [[315, "operation-object"]], "BuiltIn operations": [[315, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[316, "python-api-reference"]], "Selector": [[317, "selector"]], "Selectors in different context": [[317, "selectors-in-different-context"]], "TensorContext": [[317, "tensorcontext"]], "VertexDataContext": [[317, "vertexdatacontext"]], "LabeledVertexDataContext": [[317, "labeledvertexdatacontext"]], "VertexPropertyContext": [[317, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[317, "labeledvertexpropertycontext"]], "Methods that use selectors": [[317, "methods-that-use-selectors"]], "One-dimensional results": [[317, "one-dimensional-results"]], "Multi-dimensional results": [[317, "multi-dimensional-results"]], "Vertex Range": [[317, "vertex-range"]], "Session": [[318, "session"]], "Session object": [[318, "session-object"]], "Session Functions": [[318, "session-functions"]], "Resources Estimator": [[319, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[320, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[320, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[320, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[320, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[320, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[322, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[322, "the-graphar-file-format"]], "Features": [[322, "features"]], "File Format": [[322, "file-format"]], "Information files": [[322, "information-files"]], "Data files": [[322, "data-files"]], "GraphAr in GraphScope": [[322, "graphar-in-graphscope"]], "Loading GraphAr Data into GraphScope": [[322, "loading-graphar-data-into-graphscope"]], "Archiving the Graph Data in GraphAr": [[322, "archiving-the-graph-data-in-graphar"]], "GRIN: Graph Retrieval INterface": [[323, "grin-graph-retrieval-interface"]], "Motivations": [[323, "motivations"]], "Unified Graph Retrieval": [[323, "unified-graph-retrieval"]], "GRIN Concepts": [[323, "grin-concepts"]], "Predefined Macros": [[323, "predefined-macros"]], "Partition Strategy": [[323, "partition-strategy"]], "Edge-cut Partition Strategy": [[323, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[323, "vertex-cut-partition-strategy"]], "Property Graph Model": [[323, "property-graph-model"]], "Implementation Guideline": [[323, "implementation-guideline"]], "For computing engine": [[323, "for-computing-engine"]], "For storage engine": [[323, "for-storage-engine"]], "Design Details": [[323, "design-details"]], "Handler": [[323, "handler"]], "Edge": [[323, "edge"]], "List": [[323, "list"]], "Array-style Retrieval": [[323, "array-style-retrieval"]], "List Iterator": [[323, "list-iterator"]], "Property": [[323, "property"]], "Label": [[323, "label"], [344, "label"]], "Order": [[323, "order"]], "Master and Mirror": [[323, "master-and-mirror"]], "Local Complete": [[323, "local-complete"]], "Natural ID Trait": [[323, "natural-id-trait"]], "Groot: Persistent Graph Store": [[324, "groot-persistent-graph-store"]], "Known Limitation": [[324, "known-limitation"]], "Deploy Groot": [[324, "deploy-groot"]], "Install from ArtifactHub": [[324, "install-from-artifacthub"]], "Installing from a local directory": [[324, "installing-from-a-local-directory"]], "Common Configurations": [[324, "common-configurations"]], "Connecting to Groot": [[324, "connecting-to-groot"]], "Connection": [[324, "connection"]], "Building and Modifying Graph Models": [[324, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[324, "using-built-in-datasets"]], "Customizing Models and Datasets": [[324, "customizing-models-and-datasets"]], "Querying Data": [[324, "querying-data"]], "Python": [[324, "python"], [324, "id1"]], "Node.js": [[324, "node-js"]], "Data Import": [[324, "data-import"]], "Offline Import": [[324, "offline-import"]], "Prerequisite": [[324, "prerequisite"]], "Data Format": [[324, "data-format"]], "Loading Process": [[324, "loading-process"]], "Build: Building a partitioned graph": [[324, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[324, "loading-graph-partitions"]], "3. Commit to store service": [[324, "commit-to-store-service"]], "Realtime Write": [[324, "realtime-write"]], "Other features": [[324, "other-features"]], "Uninstalling and Restarting": [[324, "uninstalling-and-restarting"]], "Uninstall Groot": [[324, "uninstall-groot"]], "Restart Groot": [[324, "restart-groot"]], "Destroy Groot": [[324, "destroy-groot"]], "Developing Guide": [[324, "developing-guide"]], "Build image": [[324, "build-image"]], "Persistence": [[324, "persistence"]], "Troubleshooting": [[324, "troubleshooting"]], "Viewing logs": [[324, "viewing-logs"]], "Configuring logs": [[324, "configuring-logs"]], "Secondary Instance": [[324, "secondary-instance"]], "Traces": [[324, "traces"]], "In-memory immutable graphs on Vineyard": [[325, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[325, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[325, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[325, "using-loaded-graphs"]], "Applications and algorithms": [[326, "applications-and-algorithms"]], "Bind application to graph": [[326, "bind-application-to-graph"]], "Built-in algorithms": [[326, "built-in-algorithms"]], "Scaling and repartitioning": [[327, "scaling-and-repartitioning"]], "Fennel": [[327, "fennel"]], "XtraPuLP": [[327, "xtrapulp"]], "Hybrid partitioning": [[327, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[328, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[328, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[328, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[328, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[329, "user-guide-and-examples-of-gle"]], "Error Codes": [[330, "error-codes"]], "Command-line Utility gsctl": [[331, "command-line-utility-gsctl"]], "Install/Update gsctl": [[331, "install-update-gsctl"]], "Commands": [[331, "commands"]], "Utility Scripts": [[331, "utility-scripts"]], "Client/Server Mode": [[331, "client-server-mode"]], "Change scope": [[331, "change-scope"]], "Close the connection": [[331, "close-the-connection"]], "How to Find logs": [[332, "how-to-find-logs"]], "Find logs in k8s": [[332, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[332, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[332, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[332, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[332, "find-logs-for-groot"]], "Monitoring": [[333, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[334, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[334, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[334, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[334, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[334, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[334, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[334, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[334, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[334, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[334, "id7"]], "\u90e8\u7f72": [[335, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[335, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[335, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[335, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[336, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[336, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[336, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[336, "python-wheels"]], "Linux": [[336, "linux"]], "macOS": [[336, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[336, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[337, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[338, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[338, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[338, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[338, "id6"]], "\u56fe\u5206\u6790": [[338, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[338, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[338, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[339, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[339, "id2"]], "\u6295\u5f71": [[339, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[339, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[339, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[340, "graphscope"]], "\u76ee\u5f55": [[340, null], [345, null]], "API \u53c2\u8003": [[340, null]], "\u7d22\u5f15": [[340, "id1"]], "\u5b89\u88c5": [[341, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[341, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[341, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[342, "id1"]], "Apache TinkerPop": [[342, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[342, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[342, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[342, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[342, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[342, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[342, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[342, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[342, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[342, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[342, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[342, "id13"]], "\u5df2\u77e5\u9650\u5236": [[342, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[343, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[343, "id2"]], "\u6570\u636e\u6a21\u578b": [[343, "id3"]], "\u7f16\u7801\u5668": [[343, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[343, "id5"]], "\u91c7\u6837": [[343, "id6"]], "\u56fe\u6570\u636e\u6d41": [[343, "id7"]], "\u6a21\u578b": [[343, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[343, "id9"]], "\u8f7d\u56fe": [[344, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[344, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[344, "id4"]], "Build Vertex": [[344, "build-vertex"]], "vertices": [[344, "vertices"]], "properties": [[344, "properties"], [344, "id7"]], "vid_field": [[344, "vid-field"]], "Build Edge": [[344, "build-edge"]], "edges": [[344, "edges"]], "label": [[344, "id6"]], "src_label and dst_label": [[344, "src-label-and-dst-label"]], "src_field and dst_field": [[344, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[344, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[344, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[344, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[344, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[344, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[344, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[344, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[344, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[344, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[344, "numpy"]], "Loader \u7684\u53d8\u79cd": [[344, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[345, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[101, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[101, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[101, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[101, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[101, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[101, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[101, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[101, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[101, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[101, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[101, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[101, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[101, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[101, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[101, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[101, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[101, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[101, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::adddatatoexistedelabel (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::adddatatoexistedvlabel (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [101, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::extendlabeldata (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[101, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[101, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[101, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [101, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [101, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[101, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[101, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[101, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [101, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [101, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[101, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[101, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [101, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [101, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [101, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[101, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[101, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[101, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[101, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[101, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[101, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[101, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[101, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[101, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[101, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[101, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[101, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[101, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[101, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [101, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[101, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[101, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[101, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[101, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[101, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[101, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[101, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[101, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[101, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[101, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[101, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[101, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[101, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[101, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[101, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[101, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[101, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[101, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[101, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[101, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[101, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[101, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[101, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[101, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[101, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[101, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[101, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[101, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[101, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[101, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[101, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[101, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[101, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[101, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[101, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[101, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[101, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[101, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[101, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[101, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [101, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[101, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[101, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[101, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[101, "_CPPv4N2gs14DispatchResult9graph_defEv"], [101, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[101, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[101, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[101, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [101, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[101, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[101, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[101, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[101, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[101, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[101, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[101, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[101, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[101, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[101, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[101, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[101, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[101, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[101, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[101, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[101, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[101, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[101, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[101, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[101, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[101, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[101, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[101, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[101, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[101, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [101, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[101, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[101, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[101, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[101, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[101, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[101, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[101, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[101, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[101, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [101, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[101, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[101, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[101, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[101, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[101, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[101, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[101, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[101, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[101, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[101, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[101, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[101, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[101, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[101, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[101, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[101, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[101, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[101, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[101, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[101, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[101, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[101, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[101, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[101, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[101, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[101, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[101, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[101, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[101, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[101, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[101, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[101, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[101, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[101, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[101, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[101, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[101, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[101, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[101, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[101, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[101, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[101, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[101, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[101, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[101, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [101, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[101, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[101, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[101, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[101, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[101, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[101, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[101, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[101, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[101, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[101, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[101, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[101, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[101, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[101, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[101, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[101, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[101, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[101, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[101, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[101, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[101, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[101, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[101, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[101, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[101, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[101, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[101, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[101, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[101, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [101, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[101, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [101, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[101, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[101, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[101, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[101, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[101, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[101, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[101, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[101, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[101, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[102, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[102, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[102, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[102, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[102, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[102, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[102, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[102, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[102, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[102, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[102, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[102, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[102, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[102, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[102, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[102, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[102, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[102, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[102, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[102, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[102, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[102, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[102, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[102, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[102, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[102, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[102, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[102, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[102, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[102, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[102, "graphscope.louvain"]], "lpa() (in module graphscope)": [[102, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[102, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[102, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[102, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[102, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[102, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[102, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[102, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[102, "graphscope.sssp"]], "triangles() (in module graphscope)": [[102, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[102, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[102, "graphscope.voterank"]], "wcc() (in module graphscope)": [[102, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[103, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[103, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[103, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[103, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[103, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[103, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[103, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[103, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[103, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[103, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[103, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[103, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[103, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[108, "graphscope.Vertex"]], "declare() (in module graphscope)": [[109, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[110, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[111, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[112, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[113, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[114, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[115, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[116, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[117, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[118, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[119, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[120, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[121, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[122, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[123, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[124, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[125, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[126, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[127, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[128, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[129, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[130, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[131, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[132, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[133, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[134, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[135, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[136, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[137, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[138, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[139, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[140, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[141, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[142, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[143, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[144, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[145, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[146, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[147, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[148, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[149, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[150, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[151, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[152, "graphscope.g"]], "get_default_session() (in module graphscope)": [[153, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[154, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[155, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[156, "graphscope.has_default_session"]], "session (in module graphscope)": [[157, "graphscope.session"]], "set_option() (in module graphscope)": [[158, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[173, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[173, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[173, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[173, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[173, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[173, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[173, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[173, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "archive() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.archive"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[173, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[173, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[173, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[173, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[173, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[173, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[173, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[173, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[173, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[173, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[174, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[174, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[174, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[174, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[174, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[174, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[174, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[174, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[174, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[174, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[174, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[174, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[174, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[174, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[174, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[175, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[175, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[175, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[175, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[175, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[176, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[177, "module-graphscope.nx.classes.function"]], "module": [[177, "module-graphscope.nx.classes.function"], [310, "module-graphscope.nx.generators.atlas"], [310, "module-graphscope.nx.generators.classic"], [310, "module-graphscope.nx.generators.community"], [310, "module-graphscope.nx.generators.degree_seq"], [310, "module-graphscope.nx.generators.directed"], [310, "module-graphscope.nx.generators.duplication"], [310, "module-graphscope.nx.generators.ego"], [310, "module-graphscope.nx.generators.expanders"], [310, "module-graphscope.nx.generators.geometric"], [310, "module-graphscope.nx.generators.harary_graph"], [310, "module-graphscope.nx.generators.intersection"], [310, "module-graphscope.nx.generators.joint_degree_seq"], [310, "module-graphscope.nx.generators.mycielski"], [310, "module-graphscope.nx.generators.nonisomorphic_trees"], [310, "module-graphscope.nx.generators.small"], [310, "module-graphscope.nx.generators.social"], [310, "module-graphscope.nx.generators.spectral_graph_forge"], [310, "module-graphscope.nx.generators.sudoku"], [310, "module-graphscope.nx.generators.trees"], [310, "module-graphscope.nx.generators.triads"], [310, "module-networkx.generators.internet_as_graphs"], [310, "module-networkx.generators.stochastic"], [315, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[178, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[179, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[180, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[181, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[182, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[183, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[184, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[185, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[186, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[187, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[188, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[189, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[190, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[191, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[192, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[193, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[194, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[195, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[196, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[197, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[198, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[199, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[200, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[201, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[202, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[203, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[204, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[205, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[206, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[207, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[208, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[209, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[210, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[211, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[212, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[213, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[214, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[215, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[216, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[217, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[218, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[219, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[220, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[221, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[222, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[223, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[224, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[225, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[226, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[227, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[228, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[229, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[230, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[231, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[232, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[233, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[234, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[235, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[236, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[237, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[238, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[239, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[240, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[241, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[242, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[243, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[244, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[245, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[246, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[247, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[248, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[249, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[250, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[251, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[252, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[253, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[254, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[255, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[256, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[257, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[258, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[259, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[260, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[261, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[262, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[263, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[264, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[265, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[266, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[267, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[268, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[269, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[270, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[271, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[272, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[273, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[274, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[275, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[276, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[277, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[278, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[279, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[280, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[281, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[282, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[283, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[284, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[285, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[286, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[287, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[288, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[289, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[290, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[291, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[292, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[293, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[294, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[295, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[296, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[297, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[298, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[299, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[300, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[301, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[302, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[303, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[304, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[305, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[306, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[307, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[308, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[309, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[310, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[310, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[310, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[310, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[310, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[310, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[310, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[310, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[310, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[310, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[310, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[310, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[310, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[310, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[310, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[310, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[310, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[310, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[310, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[310, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[310, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[310, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[311, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[311, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[311, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[311, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[311, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[311, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[311, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[311, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[311, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[311, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[311, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[311, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[311, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[311, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[311, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[311, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[311, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[311, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[311, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[311, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[313, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[313, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[314, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[314, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[315, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[315, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[318, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[318, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[318, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[318, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[318, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[318, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[318, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[318, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[318, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[318, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[318, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[318, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[318, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[318, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[318, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[318, "graphscope.Session.load_from"]], "load_from_gar() (graphscope.session method)": [[318, "graphscope.Session.load_from_gar"]], "restore_from_pvc() (graphscope.session method)": [[318, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[318, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[318, "graphscope.Session.store_to_pvc"]]}})